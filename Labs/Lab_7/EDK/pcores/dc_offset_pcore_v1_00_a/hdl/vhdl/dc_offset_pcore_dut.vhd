-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\Chilipepper_Labs\Labs\Lab_4\MATLAB\codegen\dc_offset_correction\hdlsrc\dc_offset_pcore_dut.vhd
-- Created: 2014-03-19 12:49:25
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dc_offset_pcore_dut
-- Source Path: dc_offset_pcore/dc_offset_pcore_dut
-- Hierarchy Level: 1
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY dc_offset_pcore_dut IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        dut_enable                        :   IN    std_logic;  -- ufix1
        i_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        gain_en_in                        :   IN    std_logic;  -- ufix1
        rssi_low_goal_in                  :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
        rssi_high_goal_in                 :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
        rx_en_in                          :   IN    std_logic;  -- ufix1
        gain_in                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        ce_out                            :   OUT   std_logic;  -- ufix1
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        rssi_out                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        dir_out                           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        blinky                            :   OUT   std_logic;  -- ufix1
        d1                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d2                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d3                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d4                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d5                                :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        d6                                :   OUT   std_logic_vector(29 DOWNTO 0);  -- ufix30
        d7                                :   OUT   std_logic;  -- ufix1
        d8                                :   OUT   std_logic;  -- ufix1
        gain_out                          :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
        );
END dc_offset_pcore_dut;


ARCHITECTURE rtl OF dc_offset_pcore_dut IS

  -- Component Declarations
  COMPONENT dc_offset_correction_fixpt
    PORT( clk                             :   IN    std_logic;
          clk_enable                      :   IN    std_logic;
          reset                           :   IN    std_logic;
          i_in                            :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          q_in                            :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
          gain_en_in                      :   IN    std_logic;  -- ufix1
          rssi_low_goal_in                :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
          rssi_high_goal_in               :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
          rx_en_in                        :   IN    std_logic;  -- ufix1
          gain_in                         :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
          ce_out                          :   OUT   std_logic;  -- ufix1
          i_out                           :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
          q_out                           :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
          rssi_out                        :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          dir_out                         :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          blinky                          :   OUT   std_logic;  -- ufix1
          d1                              :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          d2                              :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          d3                              :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          d4                              :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
          d5                              :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
          d6                              :   OUT   std_logic_vector(29 DOWNTO 0);  -- ufix30
          d7                              :   OUT   std_logic;  -- ufix1
          d8                              :   OUT   std_logic;  -- ufix1
          gain_out                        :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : dc_offset_correction_fixpt
    USE ENTITY work.dc_offset_correction_fixpt(rtl);

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL gain_en_in_sig                   : std_logic;  -- ufix1
  SIGNAL rx_en_in_sig                     : std_logic;  -- ufix1
  SIGNAL ce_out_sig                       : std_logic;  -- ufix1
  SIGNAL i_out_sig                        : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL q_out_sig                        : std_logic_vector(11 DOWNTO 0);  -- ufix12
  SIGNAL rssi_out_sig                     : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL dir_out_sig                      : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL blinky_sig                       : std_logic;  -- ufix1
  SIGNAL d1_sig                           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL d2_sig                           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL d3_sig                           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL d4_sig                           : std_logic_vector(23 DOWNTO 0);  -- ufix24
  SIGNAL d5_sig                           : std_logic_vector(1 DOWNTO 0);  -- ufix2
  SIGNAL d6_sig                           : std_logic_vector(29 DOWNTO 0);  -- ufix30
  SIGNAL d7_sig                           : std_logic;  -- ufix1
  SIGNAL d8_sig                           : std_logic;  -- ufix1
  SIGNAL gain_out_sig                     : std_logic_vector(5 DOWNTO 0);  -- ufix6

BEGIN
  u_dc_offset_correction_fixpt : dc_offset_correction_fixpt
    PORT MAP( clk => clk,
              clk_enable => enb,
              reset => reset,
              i_in => i_in,  -- sfix12
              q_in => q_in,  -- sfix12
              gain_en_in => gain_en_in_sig,  -- ufix1
              rssi_low_goal_in => rssi_low_goal_in,  -- ufix30
              rssi_high_goal_in => rssi_high_goal_in,  -- ufix30
              rx_en_in => rx_en_in_sig,  -- ufix1
              gain_in => gain_in,  -- ufix6
              ce_out => ce_out_sig,  -- ufix1
              i_out => i_out_sig,  -- sfix12
              q_out => q_out_sig,  -- sfix12
              rssi_out => rssi_out_sig,  -- ufix24
              dir_out => dir_out_sig,  -- ufix2
              blinky => blinky_sig,  -- ufix1
              d1 => d1_sig,  -- ufix24
              d2 => d2_sig,  -- ufix24
              d3 => d3_sig,  -- ufix24
              d4 => d4_sig,  -- ufix24
              d5 => d5_sig,  -- ufix2
              d6 => d6_sig,  -- ufix30
              d7 => d7_sig,  -- ufix1
              d8 => d8_sig,  -- ufix1
              gain_out => gain_out_sig  -- ufix6
              );

  gain_en_in_sig <= gain_en_in;

  rx_en_in_sig <= rx_en_in;

  enb <= dut_enable;

  ce_out <= ce_out_sig;

  i_out <= i_out_sig;

  q_out <= q_out_sig;

  rssi_out <= rssi_out_sig;

  dir_out <= dir_out_sig;

  blinky <= blinky_sig;

  d1 <= d1_sig;

  d2 <= d2_sig;

  d3 <= d3_sig;

  d4 <= d4_sig;

  d5 <= d5_sig;

  d6 <= d6_sig;

  d7 <= d7_sig;

  d8 <= d8_sig;

  gain_out <= gain_out_sig;

END rtl;

