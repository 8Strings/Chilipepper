-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\pcore_Branch\Chilipepper\Labs\Lab_3\MATLAB\codegen\qpsk_tx\hdlsrc\qpsk_tx_fixpt.vhd
-- Created: 2013-11-18 19:08:08
-- 
-- Generated by MATLAB 8.2, MATLAB Coder 2.5 and HDL Coder 3.3
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- tx_done_out                   ce_out        1
-- request_byte                  ce_out        1
-- blinky                        ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qpsk_tx_fixpt
-- Source Path: qpsk_tx_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.qpsk_tx_fixpt_pkg.ALL;

ENTITY qpsk_tx_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        ce                                :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        empty_in                          :   IN    std_logic;  -- ufix1
        clear_fifo_in                     :   IN    std_logic;  -- ufix1
        tx_en_in                          :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        tx_done_out                       :   OUT   std_logic;  -- ufix1
        request_byte                      :   OUT   std_logic;  -- ufix1
        blinky                            :   OUT   std_logic  -- ufix1
        );
END qpsk_tx_fixpt;


ARCHITECTURE rtl OF qpsk_tx_fixpt IS

  -- Component Declarations
  COMPONENT tx_fifo_ram
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          wr_addr                         :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          rd_dout                         :   OUT   std_logic_vector(7 DOWNTO 0)  -- ufix8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tx_fifo_ram
    USE ENTITY work.tx_fifo_ram(rtl);

  -- Constants
  CONSTANT tbi                            : vector_of_signed3(0 TO 64) := ( to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3) );  -- sfix3 [65]
  CONSTANT tbq                            : vector_of_signed3(0 TO 64) := ( to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3) );  -- sfix3 [65]
  CONSTANT tbi_2                          : vector_of_signed3(0 TO 64) := ( to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3) );  -- sfix3 [65]
  CONSTANT tbq_2                          : vector_of_signed3(0 TO 64) := ( to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3) );  -- sfix3 [65]
  CONSTANT nc                             : vector_of_signed14(0 TO 16) := ( to_signed(2#00000001101101#, 14), to_signed(2#11111110100001#, 14), to_signed(2#11111100111110#, 14),
                                                                            to_signed(2#00000101010001#, 14), to_signed(2#00000100010010#, 14), to_signed(2#11110010010000#, 14),
                                                                            to_signed(2#11111010110100#, 14), to_signed(2#00110010001011#, 14), to_signed(2#01010110001110#, 14),
                                                                            to_signed(2#00110010001011#, 14), to_signed(2#11111010110100#, 14), to_signed(2#11110010010000#, 14),
                                                                            to_signed(2#00000100010010#, 14), to_signed(2#00000101010001#, 14), to_signed(2#11111100111110#, 14),
                                                                            to_signed(2#11111110100001#, 14), to_signed(2#00000001101101#, 14) );  -- sfix14 [17]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL c_re                             : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL c_im                             : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL c_re_1                           : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL c_im_1                           : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL tmp                              : vector_of_signed32(0 TO 15);  -- int32 [16]
  SIGNAL tmp_1                            : vector_of_signed32(0 TO 15);  -- int32 [16]
  SIGNAL empty_in_1                       : std_logic;  -- ufix1
  SIGNAL tx_en_in_1                       : std_logic;  -- ufix1
  SIGNAL tmp_2                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_3                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_4                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_5                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_6                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL reBuf                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_7                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_8                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_9                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL wrCount                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_10                           : std_logic;  -- ufix1
  SIGNAL count                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_11                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL rdCount                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sentTrain                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_12                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p54_tmp                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p54_tmp_1                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p54_tmp_2                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_13                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_14                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_1                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_15                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_16                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_2                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_17                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_18                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p49_tmp                          : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p49_tmp_1                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_19                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_3                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_20                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_21                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_22                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p48_tmp                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p48_tmp_1                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p48_tmp_2                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_23                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_24                           : std_logic;  -- ufix1
  SIGNAL p57_tmp                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p57_tmp_1                        : std_logic;  -- ufix1
  SIGNAL p57_tmp_2                        : std_logic;  -- ufix1
  SIGNAL p57_tmp_3                        : std_logic;  -- ufix1
  SIGNAL tmp_25                           : std_logic;  -- ufix1
  SIGNAL tmp_26                           : std_logic;  -- ufix1
  SIGNAL txDone                           : std_logic;  -- ufix1
  SIGNAL tmp_27                           : std_logic;  -- ufix1
  SIGNAL iA                               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL iA_1                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL symIndex                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_28                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_29                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p56_tmp                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p56_tmp_1                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p56_tmp_2                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p56_tmp_3                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p56_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p56_cast                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL p56_mul_temp                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL p56_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p56_sub_cast_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p56_sub_temp                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p56_cast_1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sym2                             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p78sym2_cast                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL sym2_1                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL wrIndex                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_30                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_31                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p120tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tx_fifo_ram_wrenb                : std_logic;  -- ufix1
  SIGNAL rdIndex                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_32                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_33                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p92tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tx_fifo                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL tx_fifo_unsigned                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_34                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p62tmp_cast                      : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL p62tmp_cast_1                    : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL tmp_35                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p63tmp_cast                      : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL p63tmp_cast_1                    : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL tmp_36                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p64tmp_cast                      : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL p64tmp_cast_1                    : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL tmp_37                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p65tmp_cast                      : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL p65tmp_cast_1                    : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL tmp_38                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p66tmp_cast                      : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL p66tmp_cast_1                    : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL tmp_39                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p67tmp_cast                      : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL p67tmp_cast_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL tmp_40                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p68tmp_cast                      : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL p68tmp_cast_1                    : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL tmp_42                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL iA_2                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sym2_2                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL a                                : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL c                                : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL tmp_43                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_1                              : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL c_1                              : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL tmp_44                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_2                              : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL c_2                              : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL tmp_45                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_3                              : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL c_3                              : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL tmp_46                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_4                              : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL c_4                              : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL tmp_47                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_5                              : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL c_5                              : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL tmp_48                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_6                              : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL c_6                              : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL tmp_49                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_51                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL iA_3                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL empty_in_2                       : std_logic;  -- ufix1
  SIGNAL tx_en_in_2                       : std_logic;  -- ufix1
  SIGNAL tmp_52                           : std_logic;  -- ufix1
  SIGNAL iA_4                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL iA_5                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_6                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_4                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL diLatch                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL tmp_53                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p53_tmp                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p53_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p53_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p53_tmp_3                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p53_tmp_4                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p53_tmp_5                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p53_tmp_6                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p53_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p53_cast                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL p53_mul_temp                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL p53_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p53_sub_cast_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p53_sub_temp                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p53_cast_1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p53_2                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p53_cast_2                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p53_mul_temp_1                   : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p53_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p53_sub_cast_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p53_sub_temp_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p53_cast_3                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p53_sub_temp_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p53_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p53_cast_4                       : std_logic;  -- ufix1
  SIGNAL p53_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p53_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p53_sub_temp_5                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p53_sub_cast_5                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL empty_in_3                       : std_logic;  -- ufix1
  SIGNAL tx_en_in_3                       : std_logic;  -- ufix1
  SIGNAL tmp_54                           : std_logic;  -- ufix1
  SIGNAL iA_7                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL iA_8                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_9                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_2                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_5                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL dqLatch                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL tmp_55                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p51_tmp                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p51_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p51_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p51_tmp_3                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p51_tmp_4                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p51_tmp_5                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p51_tmp_6                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p51_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p51_cast                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL p51_mul_temp                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL p51_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p51_sub_cast_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p51_sub_temp                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p51_cast_1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p51_2                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p51_cast_2                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p51_mul_temp_1                   : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p51_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p51_sub_cast_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p51_sub_temp_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p51_cast_3                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p51_sub_temp_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p51_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p51_cast_4                       : std_logic;  -- ufix1
  SIGNAL p51_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p51_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p51_sub_temp_5                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p51_sub_cast_5                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL iA_10                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_11                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL fmo_1_re                         : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_im                         : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_re_1                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_im_1                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL sentTrain_3                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_6                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_re                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL tmp_im                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_1                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p47_tmp_3                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p47_tmp_4                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p47_tmp_5                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p47_tmp_6                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_7                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_8                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_9                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_im                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_re                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_im_1                     : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_tmp_re_1                     : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p47_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p47_cast                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL p47_mul_temp                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL p47_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p47_sub_cast_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p47_sub_temp                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p47_cast_1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p47_2                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p47_cast_2                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p47_mul_temp_1                   : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p47_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p47_sub_cast_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p47_sub_temp_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p47_cast_3                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p47_sub_temp_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p47_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p47_cast_4                       : std_logic;  -- ufix1
  SIGNAL p47_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p47_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p47_sub_temp_5                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p47_sub_cast_5                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p47_3                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p47_cast_5                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p47_mul_temp_2                   : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p47_sub_cast_6                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p47_sub_cast_7                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p47_sub_temp_6                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p47_cast_6                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p47_sub_temp_7                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p47_sub_temp_8                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p47_cast_7                       : std_logic;  -- ufix1
  SIGNAL p47_sub_cast_8                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p47_sub_temp_9                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p47_sub_temp_10                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p47_sub_cast_9                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL byte_out_re                      : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL byte_out_im                      : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL buf_re                           : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL buf_im                           : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL buf_re_1                         : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL buf_im_1                         : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL tmp_re_1                         : vector_of_signed3(0 TO 15);  -- sfix3 [16]
  SIGNAL tmp_im_1                         : vector_of_signed3(0 TO 15);  -- sfix3 [16]
  SIGNAL tmp_re_2                         : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL tmp_im_2                         : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL c_re_2                           : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL c_im_2                           : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL d_ssrc_re                        : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL d_ssrc_im                        : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL p27d_ssrc_cast                   : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL p27d_ssrc_cast_1                 : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL a0                               : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL c_7                              : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL tmp_56                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p23tmp_add_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p23tmp_add_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL tmp_57                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p24tmp_sub_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p24tmp_sub_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p24tmp_cast                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL tmp_58                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p22_cast                         : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL a0_1                             : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL c_8                              : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL tmp_59                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p17tmp_add_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p17tmp_add_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL tmp_60                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p18tmp_sub_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p18tmp_sub_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p18tmp_cast                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL tmp_61                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p16_cast                         : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_62                           : std_logic;  -- ufix1
  SIGNAL tx_done                          : std_logic;  -- ufix1
  SIGNAL tx_done_out_1                    : std_logic;  -- ufix1
  SIGNAL tx_done_out_2                    : std_logic;  -- ufix1
  SIGNAL fmo_2                            : std_logic;  -- ufix1
  SIGNAL tmp_63                           : std_logic;  -- ufix1
  SIGNAL request_byte_1                   : std_logic;  -- ufix1
  SIGNAL request_byte_2                   : std_logic;  -- ufix1
  SIGNAL tmp_64                           : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt                       : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt_1                     : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_1                         : std_logic;  -- ufix1
  SIGNAL p132blinky_mul_temp              : unsigned(38 DOWNTO 0);  -- ufix39_En37
  SIGNAL p132blinky_cast                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL blinky_2                         : std_logic;  -- ufix1

BEGIN
  u_tx_fifo_ram : tx_fifo_ram
    PORT MAP( clk => clk,
              enb => ce,
              wr_din => data_in,  -- ufix8
              wr_addr => std_logic_vector(indexLogic_fixptsig),  -- ufix10
              wr_en => tx_fifo_ram_wrenb,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_1),  -- ufix10
              rd_dout => tx_fifo  -- ufix8
              );

  c_re <= to_signed(2#0000000000000000000000#, 22);
  c_im <= to_signed(2#0000000000000000000000#, 22);

  enb <= ce;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_re_1 <= to_signed(2#0000000000000000000000#, 22);
      c_im_1 <= to_signed(2#0000000000000000000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        c_re_1 <= c_re;
        c_im_1 <= c_im;
      END IF;
    END IF;
  END PROCESS delayMatch_process;



  tmp_gen: FOR t_0 IN 0 TO 15 GENERATE
    tmp(t_0) <= to_signed(1 + t_0, 32);
  END GENERATE tmp_gen;


  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_1 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_1 <= tmp;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      empty_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        empty_in_1 <= empty_in;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_1 <= tx_en_in;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  tmp_3 <= tmp_2 - 1;

  
  tmp_2 <= to_unsigned(2#1000#, 4) WHEN (empty_in = '0') AND (tmp_4 = 0) ELSE
      tmp_4;

  
  tmp_5 <= tmp_3 WHEN tmp_2 > 0 ELSE
      to_unsigned(2#0000#, 4);

  
  tmp_6 <= to_unsigned(2#0000#, 4) WHEN tmp_5 = 1 ELSE
      tmp_5;

  reBuf_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reBuf <= to_unsigned(2#0000#, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reBuf <= tmp_6;
      END IF;
    END IF;
  END PROCESS reBuf_reg_process;


  
  tmp_4 <= to_unsigned(2#0000#, 4) WHEN clear_fifo_in = '1' ELSE
      reBuf;

  
  tmp_9 <= tmp_7 WHEN tmp_5 = 1 ELSE
      tmp_8;

  wrCount_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wrCount <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wrCount <= tmp_9;
      END IF;
    END IF;
  END PROCESS wrCount_reg_process;


  
  tmp_8 <= to_unsigned(2#0000000000#, 10) WHEN clear_fifo_in = '1' ELSE
      wrCount;

  tmp_7 <= tmp_8 + 1;

  
  p54_tmp <= tmp_11 WHEN count >= 32 ELSE
      rdCount;
  
  p54_tmp_1 <= rdCount WHEN resize(sentTrain, 8) <= 89 ELSE
      p54_tmp;
  
  p54_tmp_2 <= rdCount WHEN sentTrain <= 24 ELSE
      p54_tmp_1;
  
  tmp_12 <= p54_tmp_2 WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_10 = '0') ELSE
      rdCount;

  
  tmp_13 <= tmp_7 WHEN tmp_5 = 1 ELSE
      tmp_12;

  rdCount_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rdCount <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rdCount <= tmp_13;
      END IF;
    END IF;
  END PROCESS rdCount_reg_process;


  tmp_11 <= rdCount - 1;

  --HDL code generation from MATLAB function: qpsk_tx_fixpt
  --total number of bytes to send out
  tmp_14 <= sentTrain + 1;

  
  tmp_15 <= tmp_14 WHEN count_1 >= 8 ELSE
      sentTrain;

  tmp_16 <= sentTrain + 1;

  
  tmp_17 <= tmp_16 WHEN count_2 >= 8 ELSE
      sentTrain;

  
  p49_tmp <= tmp_17 WHEN resize(sentTrain, 8) <= 89 ELSE
      sentTrain;
  
  p49_tmp_1 <= tmp_15 WHEN sentTrain <= 24 ELSE
      p49_tmp;
  
  tmp_18 <= p49_tmp_1 WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_10 = '0') ELSE
      sentTrain;

  
  tmp_19 <= to_unsigned(2#0000001#, 7) WHEN tmp_5 = 1 ELSE
      tmp_18;

  sentTrain_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain <= tmp_19;
      END IF;
    END IF;
  END PROCESS sentTrain_reg_process;


  count_1 <= count_3 + 1;

  
  tmp_20 <= to_unsigned(2#0000000000#, 10) WHEN count_1 >= 8 ELSE
      count_1;

  count_2 <= count_3 + 1;

  
  tmp_21 <= to_unsigned(2#0000000000#, 10) WHEN count_2 >= 8 ELSE
      count_2;

  
  p48_tmp <= to_unsigned(2#0000000000#, 10) WHEN count >= 32 ELSE
      count;
  
  p48_tmp_1 <= tmp_21 WHEN resize(sentTrain, 8) <= 89 ELSE
      p48_tmp;
  
  p48_tmp_2 <= tmp_20 WHEN sentTrain <= 24 ELSE
      p48_tmp_1;
  
  tmp_22 <= p48_tmp_2 WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_10 = '0') ELSE
      count_3;

  
  tmp_23 <= to_unsigned(2#0000000000#, 10) WHEN tmp_5 = 1 ELSE
      tmp_22;

  count_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_3 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_3 <= tmp_23;
      END IF;
    END IF;
  END PROCESS count_reg_process;


  count <= count_3 + 1;

  
  p57_tmp <= tmp_11 WHEN count >= 32 ELSE
      rdCount;
  
  p57_tmp_1 <= '1' WHEN p57_tmp = 0 ELSE
      '0';
  
  p57_tmp_2 <= '0' WHEN resize(sentTrain, 8) <= 89 ELSE
      p57_tmp_1;
  
  p57_tmp_3 <= '0' WHEN sentTrain <= 24 ELSE
      p57_tmp_2;
  
  tmp_24 <= p57_tmp_3 WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_10 = '0') ELSE
      tmp_10;

  
  tmp_25 <= '0' WHEN (empty_in = '0') AND (tmp_4 = 0) ELSE
      tmp_24;

  tmp_26 <= tmp_25;

  txDone_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      txDone <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        txDone <= tmp_26;
      END IF;
    END IF;
  END PROCESS txDone_reg_process;


  
  tmp_10 <= '0' WHEN clear_fifo_in = '1' ELSE
      txDone;

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_27 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_27 <= tmp_10;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  iA <= resize(count_3, 16);

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_1 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;


  tmp_28 <= symIndex + 1;

  p56_1 <= iA srl 3;
  p56_cast <= signed(resize(p56_1, 17));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p56_mul_temp <= resize(p56_cast & '0' & '0' & '0', 49);
  p56_sub_cast <= p56_mul_temp(31 DOWNTO 0);
  p56_sub_cast_1 <= unsigned(p56_sub_cast(15 DOWNTO 0));
  p56_sub_temp <= iA - p56_sub_cast_1;
  
  p56_cast_1 <= "1111111111" WHEN p56_sub_temp(15 DOWNTO 10) /= "000000" ELSE
      p56_sub_temp(9 DOWNTO 0);
  
  p56_tmp <= tmp_28 WHEN p56_cast_1 = 0 ELSE
      symIndex;
  
  p56_tmp_1 <= to_unsigned(2#000#, 3) WHEN count >= 32 ELSE
      p56_tmp;
  
  p56_tmp_2 <= symIndex WHEN resize(sentTrain, 8) <= 89 ELSE
      p56_tmp_1;
  
  p56_tmp_3 <= symIndex WHEN sentTrain <= 24 ELSE
      p56_tmp_2;
  
  tmp_29 <= p56_tmp_3 WHEN ((empty_in = '1') AND (tx_en_in = '1')) AND (tmp_10 = '0') ELSE
      symIndex;

  symIndex_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      symIndex <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        symIndex <= tmp_29;
      END IF;
    END IF;
  END PROCESS symIndex_reg_process;


  p78sym2_cast <= resize(symIndex & '0', 5);
  sym2 <= p78sym2_cast(2 DOWNTO 0);

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sym2_1 <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sym2_1 <= sym2;
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;


  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- transfer data from processor to internal buffer
  -- Because the core has a non-zero throughput we need to stale a bit for the
  -- requested data to make it to our input. So, I'm doing that we reBuf
  -- counter. There are definitely more efficient ways to do this but I'm
  -- gonna leave that for another day.
  wrIndex <= to_unsigned(2#10000000000#, 11);

  
  tmp_30 <= resize(tmp_7, 11) WHEN tmp_5 = 1 ELSE
      wrIndex;

  p120tmp_sub_cast <= signed(resize(tmp_30, 32));
  tmp_31 <= p120tmp_sub_cast - 1;

  indexLogic_fixptsig <= unsigned(tmp_31(9 DOWNTO 0));

  tx_fifo_ram_wrenb <= '1';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- we are ready to transmit some data
  rdIndex <= resize(resize(resize(tmp_8, 11) - resize(rdCount, 11), 12) + 1, 10);

  
  tmp_32 <= to_unsigned(2#0000000000#, 10) WHEN rdIndex <= 0 ELSE
      rdIndex;

  p92tmp_sub_cast <= signed(resize(tmp_32, 32));
  tmp_33 <= p92tmp_sub_cast - 1;

  indexLogic_fixptsig_1 <= unsigned(tmp_33(9 DOWNTO 0));

  tx_fifo_unsigned <= unsigned(tx_fifo);

  p62tmp_cast <= tx_fifo_unsigned & '0';
  p62tmp_cast_1 <= p62tmp_cast srl 1;
  tmp_34 <= p62tmp_cast_1(8 DOWNTO 1);

  p63tmp_cast <= tx_fifo_unsigned & '0' & '0';
  p63tmp_cast_1 <= p63tmp_cast srl 2;
  tmp_35 <= p63tmp_cast_1(9 DOWNTO 2);

  p64tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0';
  p64tmp_cast_1 <= p64tmp_cast srl 3;
  tmp_36 <= p64tmp_cast_1(10 DOWNTO 3);

  p65tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0';
  p65tmp_cast_1 <= p65tmp_cast srl 4;
  tmp_37 <= p65tmp_cast_1(11 DOWNTO 4);

  p66tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0';
  p66tmp_cast_1 <= p66tmp_cast srl 5;
  tmp_38 <= p66tmp_cast_1(12 DOWNTO 5);

  p67tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0';
  p67tmp_cast_1 <= p67tmp_cast srl 6;
  tmp_39 <= p67tmp_cast_1(13 DOWNTO 6);

  p68tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p68tmp_cast_1 <= p68tmp_cast srl 7;
  tmp_40 <= p68tmp_cast_1(14 DOWNTO 7);

  p60_output : PROCESS (sym2_1, tx_fifo_unsigned, tmp_34, tmp_35, tmp_36, tmp_37, tmp_38, tmp_39,
       tmp_40)
    VARIABLE tmp41 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp : unsigned(3 DOWNTO 0);
  BEGIN
    add_temp := resize(sym2_1, 4) + 1;

    CASE add_temp IS
      WHEN "0001" =>
        tmp41 := tx_fifo_unsigned;
      WHEN "0010" =>
        tmp41 := tmp_34;
      WHEN "0011" =>
        tmp41 := tmp_35;
      WHEN "0100" =>
        tmp41 := tmp_36;
      WHEN "0101" =>
        tmp41 := tmp_37;
      WHEN "0110" =>
        tmp41 := tmp_38;
      WHEN "0111" =>
        tmp41 := tmp_39;
      WHEN "1000" =>
        tmp41 := tmp_40;
      WHEN OTHERS => 
        tmp41 := to_unsigned(2#00000000#, 8);
    END CASE;

    tmp_42 <= tmp41;
  END PROCESS p60_output;


  iA_2 <= tmp_42;

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sym2_2 <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sym2_2 <= sym2;
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;


  a <= tx_fifo_unsigned & '0';

  c <= a srl 1;

  tmp_43 <= c(8 DOWNTO 1);

  a_1 <= tx_fifo_unsigned & '0' & '0';

  c_1 <= a_1 srl 2;

  tmp_44 <= c_1(9 DOWNTO 2);

  a_2 <= tx_fifo_unsigned & '0' & '0' & '0';

  c_2 <= a_2 srl 3;

  tmp_45 <= c_2(10 DOWNTO 3);

  a_3 <= tx_fifo_unsigned & '0' & '0' & '0' & '0';

  c_3 <= a_3 srl 4;

  tmp_46 <= c_3(11 DOWNTO 4);

  a_4 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0';

  c_4 <= a_4 srl 5;

  tmp_47 <= c_4(12 DOWNTO 5);

  a_5 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0';

  c_5 <= a_5 srl 6;

  tmp_48 <= c_5(13 DOWNTO 6);

  a_6 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  c_6 <= a_6 srl 7;

  tmp_49 <= c_6(14 DOWNTO 7);

  p70_output : PROCESS (sym2_2, tx_fifo_unsigned, tmp_43, tmp_44, tmp_45, tmp_46, tmp_47, tmp_48,
       tmp_49)
    VARIABLE tmp50 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp1 : unsigned(3 DOWNTO 0);
  BEGIN
    add_temp1 := resize(sym2_2, 4) + 2;

    CASE add_temp1 IS
      WHEN "0001" =>
        tmp50 := tx_fifo_unsigned;
      WHEN "0010" =>
        tmp50 := tmp_43;
      WHEN "0011" =>
        tmp50 := tmp_44;
      WHEN "0100" =>
        tmp50 := tmp_45;
      WHEN "0101" =>
        tmp50 := tmp_46;
      WHEN "0110" =>
        tmp50 := tmp_47;
      WHEN "0111" =>
        tmp50 := tmp_48;
      WHEN "1000" =>
        tmp50 := tmp_49;
      WHEN OTHERS => 
        tmp50 := to_unsigned(2#00000000#, 8);
    END CASE;

    tmp_51 <= tmp50;
  END PROCESS p70_output;


  iA_3 <= tmp_51;

  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      empty_in_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        empty_in_2 <= empty_in;
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;


  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_2 <= tx_en_in;
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;


  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_52 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_52 <= tmp_10;
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;


  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_4 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_4 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;


  iA_5 <= resize(sentTrain, 8);

  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_6 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_6 <= iA_5;
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;


  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_1 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_1 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;


  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_4 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_4 <= count_3;
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;


  p53_2 <= iA_6 srl 1;
  p53_cast_2 <= signed(resize(p53_2, 9));
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  p53_mul_temp_1 <= resize(p53_cast_2 & '0', 41);
  p53_sub_cast_2 <= p53_mul_temp_1(31 DOWNTO 0);
  p53_sub_cast_3 <= unsigned(p53_sub_cast_2(7 DOWNTO 0));
  p53_sub_temp_1 <= iA_6 - p53_sub_cast_3;
  
  p53_cast_3 <= "1111111" WHEN p53_sub_temp_1(7) /= '0' ELSE
      p53_sub_temp_1(6 DOWNTO 0);
  p53_sub_temp_2 <= resize(p53_cast_3 * to_unsigned(2#10#, 2), 10) - 1;
  
  p53_tmp <= signed(p53_sub_temp_2(2 DOWNTO 0)) WHEN count_4 = 0 ELSE
      diLatch;
  p53_sub_temp_5 <= resize(sentTrain_1, 8) - 24;
  p53_sub_cast_5 <= signed(resize(p53_sub_temp_5, 32));
  p53_tmp_1 <= p53_sub_cast_5 - 1;
  
  p53_tmp_2 <= to_signed(16#00000000#, 32) WHEN p53_tmp_1 < 0 ELSE
      p53_tmp_1;
  
  p53_tmp_3 <= tbi(to_integer(p53_tmp_2)) WHEN count_4 = 0 ELSE
      diLatch;
  p53_1 <= iA_4 srl 3;
  p53_cast <= signed(resize(p53_1, 17));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p53_mul_temp <= resize(p53_cast & '0' & '0' & '0', 49);
  p53_sub_cast <= p53_mul_temp(31 DOWNTO 0);
  p53_sub_cast_1 <= unsigned(p53_sub_cast(15 DOWNTO 0));
  p53_sub_temp <= iA_4 - p53_sub_cast_1;
  
  p53_cast_1 <= "1111111111" WHEN p53_sub_temp(15 DOWNTO 10) /= "000000" ELSE
      p53_sub_temp(9 DOWNTO 0);
  p53_sub_temp_3 <= iA_2 - resize((iA_2 srl 1) * 2, 8);
  p53_cast_4 <= p53_sub_temp_3(0);
  
  p53_sub_cast_4 <= to_unsigned(2#0010#, 4) WHEN p53_cast_4 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p53_sub_temp_4 <= p53_sub_cast_4 - 1;
  
  p53_tmp_4 <= signed(p53_sub_temp_4(2 DOWNTO 0)) WHEN p53_cast_1 = 0 ELSE
      diLatch;
  
  p53_tmp_5 <= p53_tmp_3 WHEN resize(sentTrain_1, 8) <= 89 ELSE
      p53_tmp_4;
  
  p53_tmp_6 <= p53_tmp WHEN sentTrain_1 <= 24 ELSE
      p53_tmp_5;
  
  tmp_53 <= p53_tmp_6 WHEN ((empty_in_2 = '1') AND (tx_en_in_2 = '1')) AND (tmp_52 = '0') ELSE
      diLatch;

  diLatch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diLatch <= to_signed(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        diLatch <= tmp_53;
      END IF;
    END IF;
  END PROCESS diLatch_reg_process;


  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      empty_in_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        empty_in_3 <= empty_in;
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;


  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_3 <= tx_en_in;
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;


  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_54 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_54 <= tmp_10;
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;


  delayMatch_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_7 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_7 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_18_process;


  iA_8 <= resize(sentTrain, 8);

  delayMatch_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_9 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_9 <= iA_8;
      END IF;
    END IF;
  END PROCESS delayMatch_19_process;


  delayMatch_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_2 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_2 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_20_process;


  delayMatch_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_5 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_5 <= count_3;
      END IF;
    END IF;
  END PROCESS delayMatch_21_process;


  p51_2 <= iA_9 srl 1;
  p51_cast_2 <= signed(resize(p51_2, 9));
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  p51_mul_temp_1 <= resize(p51_cast_2 & '0', 41);
  p51_sub_cast_2 <= p51_mul_temp_1(31 DOWNTO 0);
  p51_sub_cast_3 <= unsigned(p51_sub_cast_2(7 DOWNTO 0));
  p51_sub_temp_1 <= iA_9 - p51_sub_cast_3;
  
  p51_cast_3 <= "1111111" WHEN p51_sub_temp_1(7) /= '0' ELSE
      p51_sub_temp_1(6 DOWNTO 0);
  p51_sub_temp_2 <= resize(p51_cast_3 * to_unsigned(2#10#, 2), 10) - 1;
  
  p51_tmp <= signed(p51_sub_temp_2(2 DOWNTO 0)) WHEN count_5 = 0 ELSE
      dqLatch;
  p51_sub_temp_5 <= resize(sentTrain_2, 8) - 24;
  p51_sub_cast_5 <= signed(resize(p51_sub_temp_5, 32));
  p51_tmp_1 <= p51_sub_cast_5 - 1;
  
  p51_tmp_2 <= to_signed(16#00000000#, 32) WHEN p51_tmp_1 < 0 ELSE
      p51_tmp_1;
  
  p51_tmp_3 <= tbq(to_integer(p51_tmp_2)) WHEN count_5 = 0 ELSE
      dqLatch;
  p51_1 <= iA_7 srl 3;
  p51_cast <= signed(resize(p51_1, 17));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p51_mul_temp <= resize(p51_cast & '0' & '0' & '0', 49);
  p51_sub_cast <= p51_mul_temp(31 DOWNTO 0);
  p51_sub_cast_1 <= unsigned(p51_sub_cast(15 DOWNTO 0));
  p51_sub_temp <= iA_7 - p51_sub_cast_1;
  
  p51_cast_1 <= "1111111111" WHEN p51_sub_temp(15 DOWNTO 10) /= "000000" ELSE
      p51_sub_temp(9 DOWNTO 0);
  p51_sub_temp_3 <= iA_3 - resize((iA_3 srl 1) * 2, 8);
  p51_cast_4 <= p51_sub_temp_3(0);
  
  p51_sub_cast_4 <= to_unsigned(2#0010#, 4) WHEN p51_cast_4 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p51_sub_temp_4 <= p51_sub_cast_4 - 1;
  
  p51_tmp_4 <= signed(p51_sub_temp_4(2 DOWNTO 0)) WHEN p51_cast_1 = 0 ELSE
      dqLatch;
  
  p51_tmp_5 <= p51_tmp_3 WHEN resize(sentTrain_2, 8) <= 89 ELSE
      p51_tmp_4;
  
  p51_tmp_6 <= p51_tmp WHEN sentTrain_2 <= 24 ELSE
      p51_tmp_5;
  
  tmp_55 <= p51_tmp_6 WHEN ((empty_in_3 = '1') AND (tx_en_in_3 = '1')) AND (tmp_54 = '0') ELSE
      dqLatch;

  dqLatch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dqLatch <= to_signed(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dqLatch <= tmp_55;
      END IF;
    END IF;
  END PROCESS dqLatch_reg_process;


  delayMatch_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_10 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_10 <= iA_5;
      END IF;
    END IF;
  END PROCESS delayMatch_22_process;


  delayMatch_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_11 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_11 <= iA_8;
      END IF;
    END IF;
  END PROCESS delayMatch_23_process;


  fmo_1_re <= to_signed(2#000#, 3);
  fmo_1_im <= to_signed(2#000#, 3);

  delayMatch_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fmo_1_re_1 <= to_signed(2#000#, 3);
      fmo_1_im_1 <= to_signed(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fmo_1_re_1 <= fmo_1_re;
        fmo_1_im_1 <= fmo_1_im;
      END IF;
    END IF;
  END PROCESS delayMatch_24_process;


  delayMatch_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_3 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_3 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_25_process;


  delayMatch_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_6 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_6 <= count_3;
      END IF;
    END IF;
  END PROCESS delayMatch_26_process;


  p47_2 <= iA_11 srl 1;
  p47_cast_2 <= signed(resize(p47_2, 9));
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  p47_mul_temp_1 <= resize(p47_cast_2 & '0', 41);
  p47_sub_cast_2 <= p47_mul_temp_1(31 DOWNTO 0);
  p47_sub_cast_3 <= unsigned(p47_sub_cast_2(7 DOWNTO 0));
  p47_sub_temp_1 <= iA_11 - p47_sub_cast_3;
  
  p47_cast_3 <= "1111111" WHEN p47_sub_temp_1(7) /= '0' ELSE
      p47_sub_temp_1(6 DOWNTO 0);
  p47_sub_temp_2 <= resize(p47_cast_3 * to_unsigned(2#10#, 2), 10) - 1;
  p47_3 <= iA_10 srl 1;
  p47_cast_5 <= signed(resize(p47_3, 9));
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  p47_mul_temp_2 <= resize(p47_cast_5 & '0', 41);
  p47_sub_cast_6 <= p47_mul_temp_2(31 DOWNTO 0);
  p47_sub_cast_7 <= unsigned(p47_sub_cast_6(7 DOWNTO 0));
  p47_sub_temp_6 <= iA_10 - p47_sub_cast_7;
  
  p47_cast_6 <= "1111111" WHEN p47_sub_temp_6(7) /= '0' ELSE
      p47_sub_temp_6(6 DOWNTO 0);
  p47_sub_temp_7 <= resize(p47_cast_6 * to_unsigned(2#10#, 2), 10) - 1;
  
  p47_tmp_1 <= signed(p47_sub_temp_2(2 DOWNTO 0)) WHEN count_6 = 0 ELSE
      dqLatch;
  
  p47_tmp <= signed(p47_sub_temp_7(2 DOWNTO 0)) WHEN count_6 = 0 ELSE
      diLatch;
  p47_sub_temp_5 <= resize(sentTrain_3, 8) - 24;
  p47_sub_cast_5 <= signed(resize(p47_sub_temp_5, 32));
  p47_tmp_2 <= p47_sub_cast_5 - 1;
  
  p47_tmp_3 <= to_signed(16#00000000#, 32) WHEN p47_tmp_2 < 0 ELSE
      p47_tmp_2;
  p47_sub_temp_10 <= resize(sentTrain_3, 8) - 24;
  p47_sub_cast_9 <= signed(resize(p47_sub_temp_10, 32));
  p47_tmp_4 <= p47_sub_cast_9 - 1;
  
  p47_tmp_5 <= to_signed(16#00000000#, 32) WHEN p47_tmp_4 < 0 ELSE
      p47_tmp_4;
  
  p47_tmp_7 <= tbq_2(to_integer(p47_tmp_5)) WHEN count_6 = 0 ELSE
      dqLatch;
  
  p47_tmp_6 <= tbi_2(to_integer(p47_tmp_3)) WHEN count_6 = 0 ELSE
      diLatch;
  p47_1 <= iA_1 srl 3;
  p47_cast <= signed(resize(p47_1, 17));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p47_mul_temp <= resize(p47_cast & '0' & '0' & '0', 49);
  p47_sub_cast <= p47_mul_temp(31 DOWNTO 0);
  p47_sub_cast_1 <= unsigned(p47_sub_cast(15 DOWNTO 0));
  p47_sub_temp <= iA_1 - p47_sub_cast_1;
  
  p47_cast_1 <= "1111111111" WHEN p47_sub_temp(15 DOWNTO 10) /= "000000" ELSE
      p47_sub_temp(9 DOWNTO 0);
  p47_sub_temp_3 <= iA_3 - resize((iA_3 srl 1) * 2, 8);
  p47_cast_4 <= p47_sub_temp_3(0);
  
  p47_sub_cast_4 <= to_unsigned(2#0010#, 4) WHEN p47_cast_4 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p47_sub_temp_4 <= p47_sub_cast_4 - 1;
  p47_sub_temp_8 <= iA_2 - resize((iA_2 srl 1) * 2, 8);
  p47_cast_7 <= p47_sub_temp_8(0);
  
  p47_sub_cast_8 <= to_unsigned(2#0010#, 4) WHEN p47_cast_7 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p47_sub_temp_9 <= p47_sub_cast_8 - 1;
  
  p47_tmp_9 <= signed(p47_sub_temp_4(2 DOWNTO 0)) WHEN p47_cast_1 = 0 ELSE
      dqLatch;
  
  p47_tmp_8 <= signed(p47_sub_temp_9(2 DOWNTO 0)) WHEN p47_cast_1 = 0 ELSE
      diLatch;
  
  p47_tmp_re <= p47_tmp_6 WHEN resize(sentTrain_3, 8) <= 89 ELSE
      p47_tmp_8;
  
  p47_tmp_im <= p47_tmp_7 WHEN resize(sentTrain_3, 8) <= 89 ELSE
      p47_tmp_9;
  
  p47_tmp_re_1 <= p47_tmp WHEN sentTrain_3 <= 24 ELSE
      p47_tmp_re;
  
  p47_tmp_im_1 <= p47_tmp_1 WHEN sentTrain_3 <= 24 ELSE
      p47_tmp_im;
  
  tmp_re <= p47_tmp_re_1 WHEN ((empty_in_1 = '1') AND (tx_en_in_1 = '1')) AND (tmp_27 = '0') ELSE
      fmo_1_re_1;
  
  tmp_im <= p47_tmp_im_1 WHEN ((empty_in_1 = '1') AND (tx_en_in_1 = '1')) AND (tmp_27 = '0') ELSE
      fmo_1_im_1;

  byte_out_re <= tmp_re;
  byte_out_im <= tmp_im;

  buf_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      buf_re_1 <= (OTHERS => to_signed(2#000#, 3));
      buf_im_1 <= (OTHERS => to_signed(2#000#, 3));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        buf_re_1 <= buf_re;
        buf_im_1 <= buf_im;
      END IF;
    END IF;
  END PROCESS buf_reg_process;



  tmp_im_1_gen: FOR t_01 IN 0 TO 15 GENERATE
    tmp_re_1(t_01) <= buf_re_1(to_integer(tmp_1(t_01)));
    tmp_im_1(t_01) <= buf_im_1(to_integer(tmp_1(t_01)));
  END GENERATE tmp_im_1_gen;


  tmp_re_2(0 TO 15) <= tmp_re_1(0 TO 15);
  tmp_im_2(0 TO 15) <= tmp_im_1(0 TO 15);
  tmp_re_2(16) <= byte_out_re;
  tmp_im_2(16) <= byte_out_im;

  buf_re <= tmp_re_2;
  buf_im <= tmp_im_2;

  p28_output : PROCESS (c_re_1, c_im_1, buf_re, buf_im)
    VARIABLE c_im1 : signed(21 DOWNTO 0);
    VARIABLE c_im_0 : signed(21 DOWNTO 0);
    VARIABLE c_re1 : signed(21 DOWNTO 0);
    VARIABLE c_re_0 : signed(21 DOWNTO 0);
    VARIABLE c_re_11 : signed(21 DOWNTO 0);
    VARIABLE c_im_11 : signed(21 DOWNTO 0);
    VARIABLE add_cast : vector_of_signed23(0 TO 16);
    VARIABLE mul_temp : vector_of_signed17(0 TO 16);
    VARIABLE add_cast_0 : vector_of_signed23(0 TO 16);
    VARIABLE add_temp2 : vector_of_signed23(0 TO 16);
    VARIABLE add_cast_1 : vector_of_signed23(0 TO 16);
    VARIABLE mul_temp_0 : vector_of_signed17(0 TO 16);
    VARIABLE add_cast_2 : vector_of_signed23(0 TO 16);
    VARIABLE add_temp_0 : vector_of_signed23(0 TO 16);
  BEGIN
    c_re_0 := c_re_1;
    c_re1 := c_re_1;
    c_im_0 := c_im_1;
    c_im1 := c_im_1;

    FOR k IN 0 TO 16 LOOP
      add_cast(k) := resize(c_re1, 23);
      mul_temp(k) := buf_re(k) * nc(k);
      add_cast_0(k) := resize(mul_temp(k), 23);
      add_temp2(k) := add_cast(k) + add_cast_0(k);
      c_re_11 := add_temp2(k)(21 DOWNTO 0);
      add_cast_1(k) := resize(c_im1, 23);
      mul_temp_0(k) := buf_im(k) * nc(k);
      add_cast_2(k) := resize(mul_temp_0(k), 23);
      add_temp_0(k) := add_cast_1(k) + add_cast_2(k);
      c_im_11 := add_temp_0(k)(21 DOWNTO 0);
      c_re_0 := c_re_11;
      c_re1 := c_re_11;
      c_im_0 := c_im_11;
      c_im1 := c_im_11;
    END LOOP;

    c_re_2 <= c_re_0;
    c_im_2 <= c_im_0;
  END PROCESS p28_output;


  p27d_ssrc_cast <= c_re_2(14 DOWNTO 1);
  d_ssrc_re <= p27d_ssrc_cast(13 DOWNTO 1);
  p27d_ssrc_cast_1 <= c_im_2(14 DOWNTO 1);
  d_ssrc_im <= p27d_ssrc_cast_1(13 DOWNTO 1);

  -- make i/q discrete ports and scale to the full 12-bit range of the DAC
  -- (one bit is for sign)
  a0 <= d_ssrc_re;

  c_7 <= resize(a0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);

  p23tmp_add_cast <= resize(c_7(25 DOWNTO 11), 16);
  p23tmp_add_temp <= p23tmp_add_cast + 1;
  tmp_56 <= p23tmp_add_temp(15 DOWNTO 1);

  p24tmp_sub_cast <= (resize(c_7(25 DOWNTO 11), 16)) + ('0' & (c_7(10) OR c_7(9) OR c_7(8) OR c_7(7) OR c_7(6) OR c_7(5) OR c_7(4) OR c_7(3) OR c_7(2) OR c_7(1) OR c_7(0)));
  p24tmp_sub_temp <= p24tmp_sub_cast - 1;
  p24tmp_cast <= (resize(p24tmp_sub_temp(15 DOWNTO 1), 16)) + ('0' & p24tmp_sub_temp(0));
  tmp_57 <= p24tmp_cast(14 DOWNTO 0);

  p22_cast <= resize(a0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  
  tmp_58 <= tmp_57 WHEN p22_cast < 0 ELSE
      tmp_56;

  i_out_1 <= tmp_58(11 DOWNTO 0);

  i_out <= std_logic_vector(i_out_1);

  a0_1 <= d_ssrc_im;

  c_8 <= resize(a0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);

  p17tmp_add_cast <= resize(c_8(25 DOWNTO 11), 16);
  p17tmp_add_temp <= p17tmp_add_cast + 1;
  tmp_59 <= p17tmp_add_temp(15 DOWNTO 1);

  p18tmp_sub_cast <= (resize(c_8(25 DOWNTO 11), 16)) + ('0' & (c_8(10) OR c_8(9) OR c_8(8) OR c_8(7) OR c_8(6) OR c_8(5) OR c_8(4) OR c_8(3) OR c_8(2) OR c_8(1) OR c_8(0)));
  p18tmp_sub_temp <= p18tmp_sub_cast - 1;
  p18tmp_cast <= (resize(p18tmp_sub_temp(15 DOWNTO 1), 16)) + ('0' & p18tmp_sub_temp(0));
  tmp_60 <= p18tmp_cast(14 DOWNTO 0);

  p16_cast <= resize(a0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  
  tmp_61 <= tmp_60 WHEN p16_cast < 0 ELSE
      tmp_59;

  q_out_1 <= tmp_61(11 DOWNTO 0);

  q_out <= std_logic_vector(q_out_1);

  tmp_62 <= tmp_26;

  tx_done <= tmp_62;

  tx_done_out_1 <= tx_done;

  tx_done_out_2 <= tx_done_out_1;

  delayMatch_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_done_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_done_out <= tx_done_out_2;
      END IF;
    END IF;
  END PROCESS delayMatch_27_process;


  fmo_2 <= '0';

  
  tmp_63 <= '1' WHEN (empty_in = '0') AND (tmp_4 = 0) ELSE
      fmo_2;

  request_byte_1 <= tmp_63;

  request_byte_2 <= request_byte_1;

  delayMatch_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      request_byte <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        request_byte <= request_byte_2;
      END IF;
    END IF;
  END PROCESS delayMatch_28_process;


  blinky_cnt_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_cnt <= to_unsigned(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_cnt <= tmp_64;
      END IF;
    END IF;
  END PROCESS blinky_cnt_reg_process;


  blinky_cnt_1 <= blinky_cnt + 1;

  
  tmp_64 <= to_unsigned(2#0000000000000000000000000#, 25) WHEN blinky_cnt_1 = 20000000 ELSE
      blinky_cnt_1;

  p132blinky_mul_temp <= tmp_64 * to_unsigned(2#11010110101111#, 14);
  p132blinky_cast <= p132blinky_mul_temp(38 DOWNTO 37);
  blinky_1 <= p132blinky_cast(0);

  blinky_2 <= blinky_1;

  delayMatch_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky <= blinky_2;
      END IF;
    END IF;
  END PROCESS delayMatch_29_process;


  ce_out <= ce;

END rtl;

