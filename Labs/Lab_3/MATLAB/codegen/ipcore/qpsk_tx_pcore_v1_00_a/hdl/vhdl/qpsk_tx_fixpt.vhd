-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\pcore_Branch\Chilipepper\Labs\Lab_3\MATLAB\codegen\qpsk_tx\hdlsrc\qpsk_tx_fixpt.vhd
-- Created: 2013-11-15 16:55:37
-- 
-- Generated by MATLAB 8.2, MATLAB Coder 2.5 and HDL Coder 3.3
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- tx_done_out                   ce_out        1
-- ready                         ce_out        1
-- blinky                        ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qpsk_tx_fixpt
-- Source Path: qpsk_tx_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.qpsk_tx_fixpt_pkg.ALL;

ENTITY qpsk_tx_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        ce                                :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(31 DOWNTO 0);  -- ufix32
        clear_fifo_in                     :   IN    std_logic;  -- ufix1
        tx_en_in                          :   IN    std_logic;  -- ufix1
        valid                             :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        tx_done_out                       :   OUT   std_logic;  -- ufix1
        ready                             :   OUT   std_logic;  -- ufix1
        blinky                            :   OUT   std_logic  -- ufix1
        );
END qpsk_tx_fixpt;


ARCHITECTURE rtl OF qpsk_tx_fixpt IS

  -- Component Declarations
  COMPONENT tx_fifo_ram
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          wr_addr                         :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(10 DOWNTO 0);  -- ufix11
          rd_dout                         :   OUT   std_logic_vector(7 DOWNTO 0)  -- ufix8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tx_fifo_ram
    USE ENTITY work.tx_fifo_ram(rtl);

  -- Constants
  CONSTANT tbi                            : vector_of_signed3(0 TO 64) := ( to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3) );  -- sfix3 [65]
  CONSTANT tbq                            : vector_of_signed3(0 TO 64) := ( to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3) );  -- sfix3 [65]
  CONSTANT tbq_2                          : vector_of_signed3(0 TO 64) := ( to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3) );  -- sfix3 [65]
  CONSTANT tbi_2                          : vector_of_signed3(0 TO 64) := ( to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#111#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#111#, 3), to_signed(2#001#, 3),
                                                                           to_signed(2#001#, 3) );  -- sfix3 [65]
  CONSTANT nc                             : vector_of_signed14(0 TO 16) := ( to_signed(2#00000001101101#, 14), to_signed(2#11111110100001#, 14), to_signed(2#11111100111110#, 14),
                                                                            to_signed(2#00000101010001#, 14), to_signed(2#00000100010010#, 14), to_signed(2#11110010010000#, 14),
                                                                            to_signed(2#11111010110100#, 14), to_signed(2#00110010001011#, 14), to_signed(2#01010110001110#, 14),
                                                                            to_signed(2#00110010001011#, 14), to_signed(2#11111010110100#, 14), to_signed(2#11110010010000#, 14),
                                                                            to_signed(2#00000100010010#, 14), to_signed(2#00000101010001#, 14), to_signed(2#11111100111110#, 14),
                                                                            to_signed(2#11111110100001#, 14), to_signed(2#00000001101101#, 14) );  -- sfix14 [17]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL c_re                             : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL c_im                             : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL c_re_1                           : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL c_im_1                           : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL tx_en_in_1                       : std_logic;  -- ufix1
  SIGNAL debounce                         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL debounce_1                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp                              : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_1                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_2                            : std_logic;
  SIGNAL tmp_3                            : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL count                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_1                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_2                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sentTrain                        : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL wrCount                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_4                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_5                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_6                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL wrCount_1                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL txDone                           : std_logic;  -- ufix1
  SIGNAL txDone_1                         : std_logic;  -- ufix1
  SIGNAL txDone_2                         : std_logic;  -- ufix1
  SIGNAL rdCount                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_7                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_3                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_8                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sentTrain_1                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_9                            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_10                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_11                           : std_logic;  -- ufix1
  SIGNAL tmp_12                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_13                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_14                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_15                           : std_logic;  -- ufix1
  SIGNAL tmp_16                           : std_logic;  -- ufix1
  SIGNAL tmp_17                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_4                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_18                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_19                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_5                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_20                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL count_6                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_21                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_22                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_23                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_24                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_25                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_26                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_27                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_28                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_29                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_30                           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL tmp_31                           : std_logic;  -- ufix1
  SIGNAL tmp_32                           : std_logic;  -- ufix1
  SIGNAL tmp_33                           : std_logic;  -- ufix1
  SIGNAL tmp_34                           : std_logic;  -- ufix1
  SIGNAL txDone_3                         : std_logic;  -- ufix1
  SIGNAL tmp_35                           : std_logic;  -- ufix1
  SIGNAL fmo_1_re                         : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_im                         : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_re_1                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_im_1                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL iA                               : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL iA_1                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL tx_en_in_2                       : std_logic;  -- ufix1
  SIGNAL tmp_36                           : std_logic;  -- ufix1
  SIGNAL iA_2                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL symIndex                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL symIndex_1                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_37                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_38                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p60_tmp                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p60_tmp_1                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p60_tmp_2                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p60_tmp_3                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p60_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p60_cast                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL p60_mul_temp                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL p60_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p60_sub_cast_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p60_sub_temp                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p60_cast_1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL sym2                             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p89sym2_cast                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL sym2_1                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL u                                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL u_1                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data_in_unsigned                 : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_39                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL val                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_40                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p77tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL addr                             : signed(31 DOWNTO 0);  -- int32
  SIGNAL tmp_41                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_42                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL rdIndex                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tx_fifo_ram_wrenb                : std_logic;  -- ufix1
  SIGNAL rdIndex_1                        : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_43                           : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_44                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p138tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tx_fifo                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL tx_fifo_unsigned                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_45                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p66tmp_cast                      : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL p66tmp_cast_1                    : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL tmp_46                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p67tmp_cast                      : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL p67tmp_cast_1                    : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL tmp_47                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p68tmp_cast                      : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL p68tmp_cast_1                    : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL tmp_48                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p69tmp_cast                      : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL p69tmp_cast_1                    : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL tmp_49                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p70tmp_cast                      : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL p70tmp_cast_1                    : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL tmp_50                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p71tmp_cast                      : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL p71tmp_cast_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL tmp_51                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p72tmp_cast                      : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL p72tmp_cast_1                    : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL tmp_53                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL iA_3                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_4                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_5                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_2                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_7                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL diLatch                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL tmp_54                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p57_tmp                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p57_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p57_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p57_tmp_3                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p57_tmp_4                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p57_tmp_5                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p57_tmp_6                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p57_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p57_cast                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL p57_mul_temp                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL p57_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p57_sub_cast_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p57_sub_temp                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p57_cast_1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p57_2                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p57_cast_2                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p57_mul_temp_1                   : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p57_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p57_sub_cast_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p57_sub_temp_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p57_cast_3                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p57_sub_temp_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p57_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p57_cast_4                       : std_logic;  -- ufix1
  SIGNAL p57_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p57_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p57_sub_temp_5                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p57_sub_cast_5                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL tx_en_in_3                       : std_logic;  -- ufix1
  SIGNAL tmp_55                           : std_logic;  -- ufix1
  SIGNAL iA_6                             : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL sym2_2                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL u_2                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL u_3                              : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a                                : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL c                                : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL tmp_56                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_1                              : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL c_1                              : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL tmp_57                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_2                              : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL c_2                              : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL tmp_58                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_3                              : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL c_3                              : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL tmp_59                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_4                              : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL c_4                              : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL tmp_60                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_5                              : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL c_5                              : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL tmp_61                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_6                              : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL c_6                              : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL tmp_62                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_64                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL iA_7                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_8                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_9                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_3                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_8                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL dqLatch                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL tmp_65                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p55_tmp                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p55_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p55_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p55_tmp_3                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p55_tmp_4                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p55_tmp_5                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p55_tmp_6                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p55_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p55_cast                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL p55_mul_temp                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL p55_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p55_sub_cast_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p55_sub_temp                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p55_cast_1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p55_2                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p55_cast_2                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p55_mul_temp_1                   : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p55_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p55_sub_cast_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p55_sub_temp_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p55_cast_3                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p55_sub_temp_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p55_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p55_cast_4                       : std_logic;  -- ufix1
  SIGNAL p55_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p55_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p55_sub_temp_5                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p55_sub_cast_5                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL iA_10                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_11                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_4                      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL count_9                          : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tmp_re                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL tmp_im                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp                          : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_1                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p50_tmp_3                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p50_tmp_4                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p50_tmp_5                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p50_tmp_6                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_7                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_8                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_9                        : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_im                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_re                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_im_1                     : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_tmp_re_1                     : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p50_1                            : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p50_cast                         : signed(16 DOWNTO 0);  -- sfix17
  SIGNAL p50_mul_temp                     : signed(48 DOWNTO 0);  -- sfix49
  SIGNAL p50_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p50_sub_cast_1                   : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p50_sub_temp                     : unsigned(15 DOWNTO 0);  -- uint16
  SIGNAL p50_cast_1                       : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p50_2                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p50_cast_2                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p50_mul_temp_1                   : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p50_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p50_sub_cast_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p50_sub_temp_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p50_cast_3                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p50_sub_temp_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p50_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p50_cast_4                       : std_logic;  -- ufix1
  SIGNAL p50_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p50_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p50_sub_temp_5                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p50_sub_cast_5                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p50_3                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p50_cast_5                       : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p50_mul_temp_2                   : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p50_sub_cast_6                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p50_sub_cast_7                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p50_sub_temp_6                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p50_cast_6                       : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL p50_sub_temp_7                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p50_sub_temp_8                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p50_cast_7                       : std_logic;  -- ufix1
  SIGNAL p50_sub_cast_8                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p50_sub_temp_9                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p50_sub_temp_10                  : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p50_sub_cast_9                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL buf_re                           : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL buf_im                           : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL buf_re_1                         : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL buf_im_1                         : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL tmp_re_1                         : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL tmp_im_1                         : vector_of_signed3(0 TO 16);  -- sfix3 [17]
  SIGNAL p30tmp_cast                      : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p30tmp_cast_1                    : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL c_re_2                           : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL c_im_2                           : signed(21 DOWNTO 0);  -- sfix22_En14
  SIGNAL d_ssrc_re                        : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL d_ssrc_im                        : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL p26d_ssrc_cast                   : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL p26d_ssrc_cast_1                 : signed(13 DOWNTO 0);  -- sfix14_En13
  SIGNAL a0                               : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL c_7                              : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL tmp_66                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p22tmp_add_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p22tmp_add_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL tmp_67                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p23tmp_sub_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p23tmp_sub_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p23tmp_cast                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL tmp_68                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p21_cast                         : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL a0_1                             : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL c_8                              : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL tmp_69                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p16tmp_add_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p16tmp_add_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL tmp_70                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p17tmp_sub_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p17tmp_sub_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p17tmp_cast                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL tmp_71                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p15_cast                         : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tx_done_out_1                    : std_logic;  -- ufix1
  SIGNAL tx_done_out_2                    : std_logic;  -- ufix1
  SIGNAL fmo_3                            : std_logic;  -- ufix1
  SIGNAL fmo_3_1                          : std_logic;  -- ufix1
  SIGNAL fmo_3_2                          : std_logic;  -- ufix1
  SIGNAL tmp_72                           : std_logic;  -- ufix1
  SIGNAL tmp_73                           : std_logic;  -- ufix1
  SIGNAL ready_1                          : std_logic;  -- ufix1
  SIGNAL ready_2                          : std_logic;  -- ufix1
  SIGNAL blinky_cnt                       : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL tmp_74                           : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt_1                     : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_cnt_2                     : unsigned(24 DOWNTO 0);  -- ufix25
  SIGNAL blinky_1                         : std_logic;  -- ufix1
  SIGNAL p166blinky_mul_temp              : unsigned(38 DOWNTO 0);  -- ufix39_En37
  SIGNAL p166blinky_cast                  : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL blinky_2                         : std_logic;  -- ufix1

BEGIN
  u_tx_fifo_ram : tx_fifo_ram
    PORT MAP( clk => clk,
              enb => ce,
              wr_din => std_logic_vector(tmp_41),  -- ufix8
              wr_addr => std_logic_vector(indexLogic_fixptsig),  -- ufix11
              wr_en => tx_fifo_ram_wrenb,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_1),  -- ufix11
              rd_dout => tx_fifo  -- ufix8
              );

  c_re <= to_signed(2#0000000000000000000000#, 22);
  c_im <= to_signed(2#0000000000000000000000#, 22);

  enb <= ce;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_re_1 <= to_signed(2#0000000000000000000000#, 22);
      c_im_1 <= to_signed(2#0000000000000000000000#, 22);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        c_re_1 <= c_re;
        c_im_1 <= c_im;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_1 <= tx_en_in;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;


  debounce <= to_unsigned(2#10#, 2);

  --HDL code generation from MATLAB function: qpsk_tx_fixpt
  tmp <= debounce_1 - 1;

  
  tmp_1 <= tmp WHEN debounce_1 > 0 ELSE
      debounce_1;

  
  tmp_3 <= tmp_1 WHEN tmp_2 = '0' ELSE
      debounce;

  debounce_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      debounce_1 <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        debounce_1 <= tmp_3;
      END IF;
    END IF;
  END PROCESS debounce_reg_process;


  -- this will work for one packet at a time, but needs to be fixed to recieve
  -- data while transmitting a packet as well
  
  tmp_2 <= '1' WHEN (valid = '1') AND (debounce_1 = 0) ELSE
      '0';

  count <= to_unsigned(2#0000000000#, 10);

  count_1 <= to_unsigned(2#0000000000#, 10);

  count_2 <= to_unsigned(2#0000000000#, 10);

  sentTrain <= to_unsigned(2#0000001#, 7);

  wrCount <= to_unsigned(2#0000000000#, 10);

  
  tmp_6 <= tmp_4 WHEN tmp_2 = '0' ELSE
      tmp_5;

  wrCount_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wrCount_1 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wrCount_1 <= tmp_6;
      END IF;
    END IF;
  END PROCESS wrCount_reg_process;


  
  tmp_4 <= wrCount WHEN clear_fifo_in = '1' ELSE
      wrCount_1;

  tmp_5 <= tmp_4 + 1;

  txDone <= '1';

  txDone_1 <= '0';

  txDone_2 <= '0';

  tmp_7 <= rdCount - 1;

  
  tmp_8 <= tmp_7 WHEN count_3 >= 32 ELSE
      rdCount;

  
  tmp_9 <= rdCount WHEN resize(sentTrain_1, 8) <= 89 ELSE
      tmp_8;

  
  tmp_10 <= rdCount WHEN sentTrain_1 <= 24 ELSE
      tmp_9;

  
  tmp_12 <= tmp_10 WHEN (tx_en_in = '1') AND (tmp_11 = '0') ELSE
      rdCount;

  
  tmp_13 <= tmp_12 WHEN tmp_2 = '0' ELSE
      tmp_5;

  rdCount_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rdCount <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rdCount <= tmp_13;
      END IF;
    END IF;
  END PROCESS rdCount_reg_process;


  
  tmp_14 <= tmp_7 WHEN count_3 >= 32 ELSE
      rdCount;

  
  tmp_15 <= txDone WHEN tmp_14 = 0 ELSE
      tmp_11;

  
  tmp_16 <= tmp_11 WHEN resize(sentTrain_1, 8) <= 89 ELSE
      tmp_15;

  --total number of bytes to send out
  tmp_17 <= sentTrain_1 + 1;

  
  tmp_18 <= tmp_17 WHEN count_4 >= 8 ELSE
      sentTrain_1;

  tmp_19 <= sentTrain_1 + 1;

  count_4 <= count_5 + 1;

  
  tmp_20 <= count_2 WHEN count_4 >= 8 ELSE
      count_4;

  
  tmp_21 <= count_1 WHEN count_6 >= 8 ELSE
      count_6;

  count_3 <= count_5 + 1;

  
  tmp_22 <= count WHEN count_3 >= 32 ELSE
      count_3;

  
  tmp_23 <= tmp_21 WHEN resize(sentTrain_1, 8) <= 89 ELSE
      tmp_22;

  
  tmp_24 <= tmp_20 WHEN sentTrain_1 <= 24 ELSE
      tmp_23;

  
  tmp_25 <= tmp_24 WHEN (tx_en_in = '1') AND (tmp_11 = '0') ELSE
      count_5;

  count_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_5 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_5 <= tmp_25;
      END IF;
    END IF;
  END PROCESS count_reg_process;


  count_6 <= count_5 + 1;

  
  tmp_26 <= tmp_19 WHEN count_6 >= 8 ELSE
      sentTrain_1;

  
  tmp_27 <= tmp_26 WHEN resize(sentTrain_1, 8) <= 89 ELSE
      sentTrain_1;

  
  tmp_28 <= tmp_18 WHEN sentTrain_1 <= 24 ELSE
      tmp_27;

  
  tmp_29 <= tmp_28 WHEN (tx_en_in = '1') AND (tmp_11 = '0') ELSE
      sentTrain_1;

  
  tmp_30 <= tmp_29 WHEN tmp_2 = '0' ELSE
      sentTrain;

  sentTrain_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_1 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_1 <= tmp_30;
      END IF;
    END IF;
  END PROCESS sentTrain_reg_process;


  
  tmp_31 <= tmp_11 WHEN sentTrain_1 <= 24 ELSE
      tmp_16;

  
  tmp_32 <= tmp_31 WHEN (tx_en_in = '1') AND (tmp_11 = '0') ELSE
      tmp_11;

  
  tmp_33 <= tmp_32 WHEN tmp_2 = '0' ELSE
      txDone_1;

  tmp_34 <= tmp_33;

  txDone_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      txDone_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        txDone_3 <= tmp_34;
      END IF;
    END IF;
  END PROCESS txDone_reg_process;


  
  tmp_11 <= txDone_2 WHEN clear_fifo_in = '1' ELSE
      txDone_3;

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_35 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_35 <= tmp_11;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  fmo_1_re <= to_signed(2#000#, 3);
  fmo_1_im <= to_signed(2#000#, 3);

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fmo_1_re_1 <= to_signed(2#000#, 3);
      fmo_1_im_1 <= to_signed(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fmo_1_re_1 <= fmo_1_re;
        fmo_1_im_1 <= fmo_1_im;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  iA <= resize(count_5, 16);

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_1 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_1 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_2 <= tx_en_in;
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;


  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_36 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_36 <= tmp_11;
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;


  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_2 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_2 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;


  symIndex <= to_unsigned(2#000#, 3);

  tmp_37 <= symIndex_1 + 1;

  p60_1 <= iA srl 3;
  p60_cast <= signed(resize(p60_1, 17));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p60_mul_temp <= resize(p60_cast & '0' & '0' & '0', 49);
  p60_sub_cast <= p60_mul_temp(31 DOWNTO 0);
  p60_sub_cast_1 <= unsigned(p60_sub_cast(15 DOWNTO 0));
  p60_sub_temp <= iA - p60_sub_cast_1;
  
  p60_cast_1 <= "1111111111" WHEN p60_sub_temp(15 DOWNTO 10) /= "000000" ELSE
      p60_sub_temp(9 DOWNTO 0);
  
  p60_tmp <= tmp_37 WHEN p60_cast_1 = 0 ELSE
      symIndex_1;
  
  p60_tmp_1 <= symIndex WHEN count_3 >= 32 ELSE
      p60_tmp;
  
  p60_tmp_2 <= symIndex_1 WHEN resize(sentTrain_1, 8) <= 89 ELSE
      p60_tmp_1;
  
  p60_tmp_3 <= symIndex_1 WHEN sentTrain_1 <= 24 ELSE
      p60_tmp_2;
  
  tmp_38 <= p60_tmp_3 WHEN (tx_en_in = '1') AND (tmp_11 = '0') ELSE
      symIndex_1;

  symIndex_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      symIndex_1 <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        symIndex_1 <= tmp_38;
      END IF;
    END IF;
  END PROCESS symIndex_reg_process;


  p89sym2_cast <= resize(symIndex_1 & '0', 5);
  sym2 <= p89sym2_cast(2 DOWNTO 0);

  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sym2_1 <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sym2_1 <= sym2;
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;


  u <= to_unsigned(2#00000000#, 8);

  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      u_1 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        u_1 <= u;
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;


  data_in_unsigned <= unsigned(data_in);

  tmp_39 <= data_in_unsigned(7 DOWNTO 0);

  val <= to_unsigned(2#00000000#, 8);

  p77tmp_sub_cast <= signed(resize(tmp_5, 32));
  tmp_40 <= p77tmp_sub_cast - 1;

  addr <= to_signed(16#00000400#, 32);

  
  tmp_41 <= tmp_39 WHEN tmp_2 = '1' ELSE
      val;

  
  tmp_42 <= tmp_40 WHEN tmp_2 = '1' ELSE
      addr;

  indexLogic_fixptsig <= unsigned(tmp_42(10 DOWNTO 0));

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- we are ready to transmit some data
  rdIndex <= resize(resize(resize(tmp_4, 11) - resize(rdCount, 11), 12) + 1, 10);

  tx_fifo_ram_wrenb <= '1';

  rdIndex_1 <= to_unsigned(2#0000000000#, 10);

  
  tmp_43 <= rdIndex_1 WHEN rdIndex <= 0 ELSE
      rdIndex;

  p138tmp_sub_cast <= signed(resize(tmp_43, 32));
  tmp_44 <= p138tmp_sub_cast - 1;

  indexLogic_fixptsig_1 <= unsigned(tmp_44(10 DOWNTO 0));

  tx_fifo_unsigned <= unsigned(tx_fifo);

  p66tmp_cast <= tx_fifo_unsigned & '0';
  p66tmp_cast_1 <= p66tmp_cast srl 1;
  tmp_45 <= p66tmp_cast_1(8 DOWNTO 1);

  p67tmp_cast <= tx_fifo_unsigned & '0' & '0';
  p67tmp_cast_1 <= p67tmp_cast srl 2;
  tmp_46 <= p67tmp_cast_1(9 DOWNTO 2);

  p68tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0';
  p68tmp_cast_1 <= p68tmp_cast srl 3;
  tmp_47 <= p68tmp_cast_1(10 DOWNTO 3);

  p69tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0';
  p69tmp_cast_1 <= p69tmp_cast srl 4;
  tmp_48 <= p69tmp_cast_1(11 DOWNTO 4);

  p70tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0';
  p70tmp_cast_1 <= p70tmp_cast srl 5;
  tmp_49 <= p70tmp_cast_1(12 DOWNTO 5);

  p71tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0';
  p71tmp_cast_1 <= p71tmp_cast srl 6;
  tmp_50 <= p71tmp_cast_1(13 DOWNTO 6);

  p72tmp_cast <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p72tmp_cast_1 <= p72tmp_cast srl 7;
  tmp_51 <= p72tmp_cast_1(14 DOWNTO 7);

  p64_output : PROCESS (sym2_1, u_1, tx_fifo_unsigned, tmp_45, tmp_46, tmp_47, tmp_48, tmp_49, tmp_50,
       tmp_51)
    VARIABLE tmp52 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp : unsigned(3 DOWNTO 0);
  BEGIN
    add_temp := resize(sym2_1, 4) + 1;

    CASE add_temp IS
      WHEN "0001" =>
        tmp52 := tx_fifo_unsigned;
      WHEN "0010" =>
        tmp52 := tmp_45;
      WHEN "0011" =>
        tmp52 := tmp_46;
      WHEN "0100" =>
        tmp52 := tmp_47;
      WHEN "0101" =>
        tmp52 := tmp_48;
      WHEN "0110" =>
        tmp52 := tmp_49;
      WHEN "0111" =>
        tmp52 := tmp_50;
      WHEN "1000" =>
        tmp52 := tmp_51;
      WHEN OTHERS => 
        tmp52 := u_1;
    END CASE;

    tmp_53 <= tmp52;
  END PROCESS p64_output;


  iA_3 <= tmp_53;

  iA_4 <= resize(sentTrain_1, 8);

  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_5 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_5 <= iA_4;
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;


  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_2 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_2 <= sentTrain_1;
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;


  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_7 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_7 <= count_5;
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;


  p57_2 <= iA_5 srl 1;
  p57_cast_2 <= signed(resize(p57_2, 9));
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  p57_mul_temp_1 <= resize(p57_cast_2 & '0', 41);
  p57_sub_cast_2 <= p57_mul_temp_1(31 DOWNTO 0);
  p57_sub_cast_3 <= unsigned(p57_sub_cast_2(7 DOWNTO 0));
  p57_sub_temp_1 <= iA_5 - p57_sub_cast_3;
  
  p57_cast_3 <= "1111111" WHEN p57_sub_temp_1(7) /= '0' ELSE
      p57_sub_temp_1(6 DOWNTO 0);
  p57_sub_temp_2 <= resize(p57_cast_3 * to_unsigned(2#10#, 2), 10) - 1;
  
  p57_tmp <= signed(p57_sub_temp_2(2 DOWNTO 0)) WHEN count_7 = 0 ELSE
      diLatch;
  p57_sub_temp_5 <= resize(sentTrain_2, 8) - 24;
  p57_sub_cast_5 <= signed(resize(p57_sub_temp_5, 32));
  p57_tmp_1 <= p57_sub_cast_5 - 1;
  
  p57_tmp_2 <= to_signed(16#00000000#, 32) WHEN p57_tmp_1 < 0 ELSE
      p57_tmp_1;
  
  p57_tmp_3 <= tbi(to_integer(p57_tmp_2)) WHEN count_7 = 0 ELSE
      diLatch;
  p57_1 <= iA_2 srl 3;
  p57_cast <= signed(resize(p57_1, 17));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p57_mul_temp <= resize(p57_cast & '0' & '0' & '0', 49);
  p57_sub_cast <= p57_mul_temp(31 DOWNTO 0);
  p57_sub_cast_1 <= unsigned(p57_sub_cast(15 DOWNTO 0));
  p57_sub_temp <= iA_2 - p57_sub_cast_1;
  
  p57_cast_1 <= "1111111111" WHEN p57_sub_temp(15 DOWNTO 10) /= "000000" ELSE
      p57_sub_temp(9 DOWNTO 0);
  p57_sub_temp_3 <= iA_3 - resize((iA_3 srl 1) * 2, 8);
  p57_cast_4 <= p57_sub_temp_3(0);
  
  p57_sub_cast_4 <= to_unsigned(2#0010#, 4) WHEN p57_cast_4 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p57_sub_temp_4 <= p57_sub_cast_4 - 1;
  
  p57_tmp_4 <= signed(p57_sub_temp_4(2 DOWNTO 0)) WHEN p57_cast_1 = 0 ELSE
      diLatch;
  
  p57_tmp_5 <= p57_tmp_3 WHEN resize(sentTrain_2, 8) <= 89 ELSE
      p57_tmp_4;
  
  p57_tmp_6 <= p57_tmp WHEN sentTrain_2 <= 24 ELSE
      p57_tmp_5;
  
  tmp_54 <= p57_tmp_6 WHEN (tx_en_in_2 = '1') AND (tmp_36 = '0') ELSE
      diLatch;

  diLatch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diLatch <= to_signed(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        diLatch <= tmp_54;
      END IF;
    END IF;
  END PROCESS diLatch_reg_process;


  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_3 <= tx_en_in;
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;


  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_55 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_55 <= tmp_11;
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;


  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_6 <= to_unsigned(16#0000#, 16);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_6 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;


  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sym2_2 <= to_unsigned(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sym2_2 <= sym2;
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;


  u_2 <= to_unsigned(2#00000000#, 8);

  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      u_3 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        u_3 <= u_2;
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;


  a <= tx_fifo_unsigned & '0';

  c <= a srl 1;

  tmp_56 <= c(8 DOWNTO 1);

  a_1 <= tx_fifo_unsigned & '0' & '0';

  c_1 <= a_1 srl 2;

  tmp_57 <= c_1(9 DOWNTO 2);

  a_2 <= tx_fifo_unsigned & '0' & '0' & '0';

  c_2 <= a_2 srl 3;

  tmp_58 <= c_2(10 DOWNTO 3);

  a_3 <= tx_fifo_unsigned & '0' & '0' & '0' & '0';

  c_3 <= a_3 srl 4;

  tmp_59 <= c_3(11 DOWNTO 4);

  a_4 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0';

  c_4 <= a_4 srl 5;

  tmp_60 <= c_4(12 DOWNTO 5);

  a_5 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0';

  c_5 <= a_5 srl 6;

  tmp_61 <= c_5(13 DOWNTO 6);

  a_6 <= tx_fifo_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  c_6 <= a_6 srl 7;

  tmp_62 <= c_6(14 DOWNTO 7);

  p74_output : PROCESS (sym2_2, u_3, tx_fifo_unsigned, tmp_56, tmp_57, tmp_58, tmp_59, tmp_60, tmp_61,
       tmp_62)
    VARIABLE tmp63 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp1 : unsigned(3 DOWNTO 0);
  BEGIN
    add_temp1 := resize(sym2_2, 4) + 2;

    CASE add_temp1 IS
      WHEN "0001" =>
        tmp63 := tx_fifo_unsigned;
      WHEN "0010" =>
        tmp63 := tmp_56;
      WHEN "0011" =>
        tmp63 := tmp_57;
      WHEN "0100" =>
        tmp63 := tmp_58;
      WHEN "0101" =>
        tmp63 := tmp_59;
      WHEN "0110" =>
        tmp63 := tmp_60;
      WHEN "0111" =>
        tmp63 := tmp_61;
      WHEN "1000" =>
        tmp63 := tmp_62;
      WHEN OTHERS => 
        tmp63 := u_3;
    END CASE;

    tmp_64 <= tmp63;
  END PROCESS p74_output;


  iA_7 <= tmp_64;

  iA_8 <= resize(sentTrain_1, 8);

  delayMatch_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_9 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_9 <= iA_8;
      END IF;
    END IF;
  END PROCESS delayMatch_18_process;


  delayMatch_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_3 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_3 <= sentTrain_1;
      END IF;
    END IF;
  END PROCESS delayMatch_19_process;


  delayMatch_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_8 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_8 <= count_5;
      END IF;
    END IF;
  END PROCESS delayMatch_20_process;


  p55_2 <= iA_9 srl 1;
  p55_cast_2 <= signed(resize(p55_2, 9));
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  p55_mul_temp_1 <= resize(p55_cast_2 & '0', 41);
  p55_sub_cast_2 <= p55_mul_temp_1(31 DOWNTO 0);
  p55_sub_cast_3 <= unsigned(p55_sub_cast_2(7 DOWNTO 0));
  p55_sub_temp_1 <= iA_9 - p55_sub_cast_3;
  
  p55_cast_3 <= "1111111" WHEN p55_sub_temp_1(7) /= '0' ELSE
      p55_sub_temp_1(6 DOWNTO 0);
  p55_sub_temp_2 <= resize(p55_cast_3 * to_unsigned(2#10#, 2), 10) - 1;
  
  p55_tmp <= signed(p55_sub_temp_2(2 DOWNTO 0)) WHEN count_8 = 0 ELSE
      dqLatch;
  p55_sub_temp_5 <= resize(sentTrain_3, 8) - 24;
  p55_sub_cast_5 <= signed(resize(p55_sub_temp_5, 32));
  p55_tmp_1 <= p55_sub_cast_5 - 1;
  
  p55_tmp_2 <= to_signed(16#00000000#, 32) WHEN p55_tmp_1 < 0 ELSE
      p55_tmp_1;
  
  p55_tmp_3 <= tbq(to_integer(p55_tmp_2)) WHEN count_8 = 0 ELSE
      dqLatch;
  p55_1 <= iA_6 srl 3;
  p55_cast <= signed(resize(p55_1, 17));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p55_mul_temp <= resize(p55_cast & '0' & '0' & '0', 49);
  p55_sub_cast <= p55_mul_temp(31 DOWNTO 0);
  p55_sub_cast_1 <= unsigned(p55_sub_cast(15 DOWNTO 0));
  p55_sub_temp <= iA_6 - p55_sub_cast_1;
  
  p55_cast_1 <= "1111111111" WHEN p55_sub_temp(15 DOWNTO 10) /= "000000" ELSE
      p55_sub_temp(9 DOWNTO 0);
  p55_sub_temp_3 <= iA_7 - resize((iA_7 srl 1) * 2, 8);
  p55_cast_4 <= p55_sub_temp_3(0);
  
  p55_sub_cast_4 <= to_unsigned(2#0010#, 4) WHEN p55_cast_4 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p55_sub_temp_4 <= p55_sub_cast_4 - 1;
  
  p55_tmp_4 <= signed(p55_sub_temp_4(2 DOWNTO 0)) WHEN p55_cast_1 = 0 ELSE
      dqLatch;
  
  p55_tmp_5 <= p55_tmp_3 WHEN resize(sentTrain_3, 8) <= 89 ELSE
      p55_tmp_4;
  
  p55_tmp_6 <= p55_tmp WHEN sentTrain_3 <= 24 ELSE
      p55_tmp_5;
  
  tmp_65 <= p55_tmp_6 WHEN (tx_en_in_3 = '1') AND (tmp_55 = '0') ELSE
      dqLatch;

  dqLatch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dqLatch <= to_signed(2#000#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dqLatch <= tmp_65;
      END IF;
    END IF;
  END PROCESS dqLatch_reg_process;


  delayMatch_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_10 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_10 <= iA_4;
      END IF;
    END IF;
  END PROCESS delayMatch_21_process;


  delayMatch_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_11 <= to_unsigned(2#00000000#, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_11 <= iA_8;
      END IF;
    END IF;
  END PROCESS delayMatch_22_process;


  delayMatch_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_4 <= to_unsigned(2#0000000#, 7);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_4 <= sentTrain_1;
      END IF;
    END IF;
  END PROCESS delayMatch_23_process;


  delayMatch_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_9 <= to_unsigned(2#0000000000#, 10);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_9 <= count_5;
      END IF;
    END IF;
  END PROCESS delayMatch_24_process;


  p50_2 <= iA_10 srl 1;
  p50_cast_2 <= signed(resize(p50_2, 9));
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  p50_mul_temp_1 <= resize(p50_cast_2 & '0', 41);
  p50_sub_cast_2 <= p50_mul_temp_1(31 DOWNTO 0);
  p50_sub_cast_3 <= unsigned(p50_sub_cast_2(7 DOWNTO 0));
  p50_sub_temp_1 <= iA_10 - p50_sub_cast_3;
  
  p50_cast_3 <= "1111111" WHEN p50_sub_temp_1(7) /= '0' ELSE
      p50_sub_temp_1(6 DOWNTO 0);
  p50_sub_temp_2 <= resize(p50_cast_3 * to_unsigned(2#10#, 2), 10) - 1;
  p50_3 <= iA_11 srl 1;
  p50_cast_5 <= signed(resize(p50_3, 9));
  -- CSD Encoding (2) : 10; Cost (Adders) = 0
  p50_mul_temp_2 <= resize(p50_cast_5 & '0', 41);
  p50_sub_cast_6 <= p50_mul_temp_2(31 DOWNTO 0);
  p50_sub_cast_7 <= unsigned(p50_sub_cast_6(7 DOWNTO 0));
  p50_sub_temp_6 <= iA_11 - p50_sub_cast_7;
  
  p50_cast_6 <= "1111111" WHEN p50_sub_temp_6(7) /= '0' ELSE
      p50_sub_temp_6(6 DOWNTO 0);
  p50_sub_temp_7 <= resize(p50_cast_6 * to_unsigned(2#10#, 2), 10) - 1;
  
  p50_tmp_1 <= signed(p50_sub_temp_2(2 DOWNTO 0)) WHEN count_9 = 0 ELSE
      diLatch;
  
  p50_tmp <= signed(p50_sub_temp_7(2 DOWNTO 0)) WHEN count_9 = 0 ELSE
      dqLatch;
  p50_sub_temp_5 <= resize(sentTrain_4, 8) - 24;
  p50_sub_cast_5 <= signed(resize(p50_sub_temp_5, 32));
  p50_tmp_2 <= p50_sub_cast_5 - 1;
  
  p50_tmp_3 <= to_signed(16#00000000#, 32) WHEN p50_tmp_2 < 0 ELSE
      p50_tmp_2;
  p50_sub_temp_10 <= resize(sentTrain_4, 8) - 24;
  p50_sub_cast_9 <= signed(resize(p50_sub_temp_10, 32));
  p50_tmp_4 <= p50_sub_cast_9 - 1;
  
  p50_tmp_5 <= to_signed(16#00000000#, 32) WHEN p50_tmp_4 < 0 ELSE
      p50_tmp_4;
  
  p50_tmp_7 <= tbi_2(to_integer(p50_tmp_3)) WHEN count_9 = 0 ELSE
      diLatch;
  
  p50_tmp_6 <= tbq_2(to_integer(p50_tmp_5)) WHEN count_9 = 0 ELSE
      dqLatch;
  p50_1 <= iA_1 srl 3;
  p50_cast <= signed(resize(p50_1, 17));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p50_mul_temp <= resize(p50_cast & '0' & '0' & '0', 49);
  p50_sub_cast <= p50_mul_temp(31 DOWNTO 0);
  p50_sub_cast_1 <= unsigned(p50_sub_cast(15 DOWNTO 0));
  p50_sub_temp <= iA_1 - p50_sub_cast_1;
  
  p50_cast_1 <= "1111111111" WHEN p50_sub_temp(15 DOWNTO 10) /= "000000" ELSE
      p50_sub_temp(9 DOWNTO 0);
  p50_sub_temp_3 <= iA_3 - resize((iA_3 srl 1) * 2, 8);
  p50_cast_4 <= p50_sub_temp_3(0);
  
  p50_sub_cast_4 <= to_unsigned(2#0010#, 4) WHEN p50_cast_4 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p50_sub_temp_4 <= p50_sub_cast_4 - 1;
  p50_sub_temp_8 <= iA_7 - resize((iA_7 srl 1) * 2, 8);
  p50_cast_7 <= p50_sub_temp_8(0);
  
  p50_sub_cast_8 <= to_unsigned(2#0010#, 4) WHEN p50_cast_7 = '1' ELSE
      to_unsigned(2#0000#, 4);
  p50_sub_temp_9 <= p50_sub_cast_8 - 1;
  
  p50_tmp_9 <= signed(p50_sub_temp_4(2 DOWNTO 0)) WHEN p50_cast_1 = 0 ELSE
      diLatch;
  
  p50_tmp_8 <= signed(p50_sub_temp_9(2 DOWNTO 0)) WHEN p50_cast_1 = 0 ELSE
      dqLatch;
  
  p50_tmp_re <= p50_tmp_7 WHEN resize(sentTrain_4, 8) <= 89 ELSE
      p50_tmp_9;
  
  p50_tmp_im <= p50_tmp_6 WHEN resize(sentTrain_4, 8) <= 89 ELSE
      p50_tmp_8;
  
  p50_tmp_re_1 <= p50_tmp_1 WHEN sentTrain_4 <= 24 ELSE
      p50_tmp_re;
  
  p50_tmp_im_1 <= p50_tmp WHEN sentTrain_4 <= 24 ELSE
      p50_tmp_im;
  
  tmp_re <= p50_tmp_re_1 WHEN (tx_en_in_1 = '1') AND (tmp_35 = '0') ELSE
      fmo_1_re_1;
  
  tmp_im <= p50_tmp_im_1 WHEN (tx_en_in_1 = '1') AND (tmp_35 = '0') ELSE
      fmo_1_im_1;

  buf_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      buf_re_1 <= (OTHERS => to_signed(2#000#, 3));
      buf_im_1 <= (OTHERS => to_signed(2#000#, 3));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        buf_re_1 <= buf_re;
        buf_im_1 <= buf_im;
      END IF;
    END IF;
  END PROCESS buf_reg_process;


  tmp_re_1(0 TO 15) <= buf_re_1(1 TO 16);
  tmp_im_1(0 TO 15) <= buf_im_1(1 TO 16);
  p30tmp_cast <= tmp_re(1 DOWNTO 0);
  tmp_re_1(16) <= resize(p30tmp_cast, 3);
  p30tmp_cast_1 <= tmp_im(1 DOWNTO 0);
  tmp_im_1(16) <= resize(p30tmp_cast_1, 3);

  buf_re <= tmp_re_1;
  buf_im <= tmp_im_1;

  p27_output : PROCESS (c_re_1, c_im_1, buf_re, buf_im)
    VARIABLE c_im1 : signed(21 DOWNTO 0);
    VARIABLE c_im_0 : signed(21 DOWNTO 0);
    VARIABLE c_re1 : signed(21 DOWNTO 0);
    VARIABLE c_re_0 : signed(21 DOWNTO 0);
    VARIABLE c_re_11 : signed(21 DOWNTO 0);
    VARIABLE c_im_11 : signed(21 DOWNTO 0);
    VARIABLE add_cast : vector_of_signed23(0 TO 16);
    VARIABLE mul_temp : vector_of_signed17(0 TO 16);
    VARIABLE add_cast_0 : vector_of_signed23(0 TO 16);
    VARIABLE add_temp2 : vector_of_signed23(0 TO 16);
    VARIABLE add_cast_1 : vector_of_signed23(0 TO 16);
    VARIABLE mul_temp_0 : vector_of_signed17(0 TO 16);
    VARIABLE add_cast_2 : vector_of_signed23(0 TO 16);
    VARIABLE add_temp_0 : vector_of_signed23(0 TO 16);
  BEGIN
    c_re_0 := c_re_1;
    c_re1 := c_re_1;
    c_im_0 := c_im_1;
    c_im1 := c_im_1;

    FOR k IN 0 TO 16 LOOP
      add_cast(k) := resize(c_re1, 23);
      mul_temp(k) := buf_re(k) * nc(k);
      add_cast_0(k) := resize(mul_temp(k), 23);
      add_temp2(k) := add_cast(k) + add_cast_0(k);
      c_re_11 := add_temp2(k)(21 DOWNTO 0);
      add_cast_1(k) := resize(c_im1, 23);
      mul_temp_0(k) := buf_im(k) * nc(k);
      add_cast_2(k) := resize(mul_temp_0(k), 23);
      add_temp_0(k) := add_cast_1(k) + add_cast_2(k);
      c_im_11 := add_temp_0(k)(21 DOWNTO 0);
      c_re_0 := c_re_11;
      c_re1 := c_re_11;
      c_im_0 := c_im_11;
      c_im1 := c_im_11;
    END LOOP;

    c_re_2 <= c_re_0;
    c_im_2 <= c_im_0;
  END PROCESS p27_output;


  p26d_ssrc_cast <= c_re_2(14 DOWNTO 1);
  d_ssrc_re <= p26d_ssrc_cast(13 DOWNTO 1);
  p26d_ssrc_cast_1 <= c_im_2(14 DOWNTO 1);
  d_ssrc_im <= p26d_ssrc_cast_1(13 DOWNTO 1);

  -- make i/q discrete ports and scale to the full 12-bit range of the DAC
  -- (one bit is for sign)
  a0 <= d_ssrc_re;

  c_7 <= resize(a0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);

  p22tmp_add_cast <= resize(c_7(25 DOWNTO 11), 16);
  p22tmp_add_temp <= p22tmp_add_cast + 1;
  tmp_66 <= p22tmp_add_temp(15 DOWNTO 1);

  p23tmp_sub_cast <= (resize(c_7(25 DOWNTO 11), 16)) + ('0' & (c_7(10) OR c_7(9) OR c_7(8) OR c_7(7) OR c_7(6) OR c_7(5) OR c_7(4) OR c_7(3) OR c_7(2) OR c_7(1) OR c_7(0)));
  p23tmp_sub_temp <= p23tmp_sub_cast - 1;
  p23tmp_cast <= (resize(p23tmp_sub_temp(15 DOWNTO 1), 16)) + ('0' & p23tmp_sub_temp(0));
  tmp_67 <= p23tmp_cast(14 DOWNTO 0);

  p21_cast <= resize(a0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  
  tmp_68 <= tmp_67 WHEN p21_cast < 0 ELSE
      tmp_66;

  i_out_1 <= tmp_68(11 DOWNTO 0);

  i_out <= std_logic_vector(i_out_1);

  a0_1 <= d_ssrc_im;

  c_8 <= resize(a0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);

  p16tmp_add_cast <= resize(c_8(25 DOWNTO 11), 16);
  p16tmp_add_temp <= p16tmp_add_cast + 1;
  tmp_69 <= p16tmp_add_temp(15 DOWNTO 1);

  p17tmp_sub_cast <= (resize(c_8(25 DOWNTO 11), 16)) + ('0' & (c_8(10) OR c_8(9) OR c_8(8) OR c_8(7) OR c_8(6) OR c_8(5) OR c_8(4) OR c_8(3) OR c_8(2) OR c_8(1) OR c_8(0)));
  p17tmp_sub_temp <= p17tmp_sub_cast - 1;
  p17tmp_cast <= (resize(p17tmp_sub_temp(15 DOWNTO 1), 16)) + ('0' & p17tmp_sub_temp(0));
  tmp_70 <= p17tmp_cast(14 DOWNTO 0);

  p15_cast <= resize(a0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  
  tmp_71 <= tmp_70 WHEN p15_cast < 0 ELSE
      tmp_69;

  q_out_1 <= tmp_71(11 DOWNTO 0);

  q_out <= std_logic_vector(q_out_1);

  tx_done_out_1 <= tmp_34;

  tx_done_out_2 <= tx_done_out_1;

  delayMatch_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_done_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_done_out <= tx_done_out_2;
      END IF;
    END IF;
  END PROCESS delayMatch_25_process;


  fmo_3 <= '0';

  fmo_3_1 <= '0';

  fmo_3_2 <= '1';

  
  tmp_72 <= fmo_3_1 WHEN tmp_2 = '0' ELSE
      fmo_3_2;

  
  tmp_73 <= fmo_3 WHEN tmp_2 = '0' ELSE
      tmp_72;

  ready_1 <= tmp_73;

  ready_2 <= ready_1;

  delayMatch_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      ready <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        ready <= ready_2;
      END IF;
    END IF;
  END PROCESS delayMatch_26_process;


  --HDL code generation from MATLAB function: qpsk_tx_fixpt
  blinky_cnt <= to_unsigned(2#0000000000000000000000000#, 25);

  blinky_cnt_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_cnt_1 <= to_unsigned(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_cnt_1 <= tmp_74;
      END IF;
    END IF;
  END PROCESS blinky_cnt_reg_process;


  blinky_cnt_2 <= blinky_cnt_1 + 1;

  
  tmp_74 <= blinky_cnt WHEN blinky_cnt_2 = 20000000 ELSE
      blinky_cnt_2;

  p166blinky_mul_temp <= tmp_74 * to_unsigned(2#11010110101111#, 14);
  p166blinky_cast <= p166blinky_mul_temp(38 DOWNTO 37);
  blinky_1 <= p166blinky_cast(0);

  blinky_2 <= blinky_1;

  delayMatch_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky <= blinky_2;
      END IF;
    END IF;
  END PROCESS delayMatch_27_process;


  ce_out <= ce;

END rtl;

