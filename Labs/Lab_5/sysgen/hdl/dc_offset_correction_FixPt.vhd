-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\Chilipepper\Labs\Lab_5\Matlab\codegen\dc_offset_correction\hdlsrc\dc_offset_correction_FixPt.vhd
-- Created: 2013-04-23 13:11:39
-- 
-- Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- rssi_out                      ce_out        1
-- rssi_en_out                   ce_out        1
-- dir_out                       ce_out        1
-- dir_en_out                    ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dc_offset_correction_FixPt
-- Source Path: dc_offset_correction_FixPt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.dc_offset_correction_FixPt_pkg.ALL;

ENTITY dc_offset_correction_FixPt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        ce                                :   IN    std_logic;
        i_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        alpha_in                          :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        gain_en_in                        :   IN    std_logic;  -- ufix1
        rssi_low_goal_in                  :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_high_goal_in                 :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rx_en_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        rssi_out                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_en_out                       :   OUT   std_logic;  -- ufix1
        dir_out                           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        dir_en_out                        :   OUT   std_logic  -- ufix1
        );
END dc_offset_correction_FixPt;


ARCHITECTURE rtl OF dc_offset_correction_FixPt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL i_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : std_logic;
  SIGNAL tmp_3                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_4                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p209tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_5                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_6                            : std_logic;
  SIGNAL alpha_in_unsigned                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL alpha                            : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL p205alpha_cast                   : unsigned(23 DOWNTO 0);  -- ufix24_En12
  SIGNAL p205alpha_cast_1                 : unsigned(23 DOWNTO 0);  -- ufix24_En12
  SIGNAL tmp_7                            : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p189tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_8                            : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL multiplier_cast                  : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_9                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_10                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_11                           : std_logic;
  SIGNAL tmp_12                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_13                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_14                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p182tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p182tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_15                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_16                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_17                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_18                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_1            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_19                           : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_20                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_21                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_22                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_23                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_24                           : std_logic;
  SIGNAL tmp_25                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_26                           : std_logic;
  SIGNAL tmp_27                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_28                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p152i_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p152i_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p152i_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL i_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rd_46_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL i_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_29                           : std_logic;
  SIGNAL tmp_30                           : std_logic;
  SIGNAL tmp_31                           : std_logic;
  SIGNAL tmp_32                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_33                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p213tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_34                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_35                           : std_logic;
  SIGNAL tmp_36                           : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p203tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_37                           : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL multiplier_cast_2                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_2            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_38                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_39                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_40                           : std_logic;
  SIGNAL tmp_41                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_42                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_43                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p196tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p196tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_44                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_45                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_46                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_47                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_3                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_3            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_48                           : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_49                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_50                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_51                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_52                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_53                           : std_logic;
  SIGNAL tmp_54                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_55                           : std_logic;
  SIGNAL tmp_56                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_57                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p151q_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p151q_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p151q_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL q_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rd_47_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL q_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_58                           : std_logic;
  SIGNAL tmp_59                           : std_logic;
  SIGNAL rd_27_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_60                           : std_logic;
  SIGNAL i_out_3                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_out_3                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_61                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_62                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_63                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_64                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_65                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL rssi_inst                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_66                           : std_logic;
  SIGNAL tmp_67                           : std_logic;
  SIGNAL tmp_68                           : std_logic;
  SIGNAL tmp_69                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_70                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_71                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_72                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p126_tmp                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_73                           : std_logic;
  SIGNAL tmp_74                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_75                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_76                           : std_logic;
  SIGNAL tmp_77                           : std_logic;
  SIGNAL tmp_78                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_79                           : std_logic;
  SIGNAL tmp_80                           : std_logic;
  SIGNAL tmp_81                           : std_logic;
  SIGNAL tmp_82                           : std_logic;
  SIGNAL tmp_83                           : std_logic;
  SIGNAL tmp_84                           : std_logic;
  SIGNAL tmp_85                           : std_logic;
  SIGNAL rd_28_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_86                           : std_logic;
  SIGNAL tmp_87                           : std_logic;
  SIGNAL tmp_88                           : std_logic;
  SIGNAL tmp_89                           : std_logic;
  SIGNAL tmp_90                           : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_91                           : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_92                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_93                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_94                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_95                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_96                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_97                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_98                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_99                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_100                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_101                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_102                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL rssi_out_1                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL delayMatch_reg                   : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_2                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_103                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p132_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p132_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p132_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p132_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p132_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p132_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL rd_30_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_104                          : std_logic;
  SIGNAL delayMatch_reg_1                 : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_3                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_105                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL delayMatch_reg_2                 : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_4                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_106                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_out_5                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_out_tmp                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_107                          : std_logic;
  SIGNAL tmp_108                          : std_logic;
  SIGNAL tmp_109                          : std_logic;
  SIGNAL tmp_110                          : std_logic;
  SIGNAL rssi_en_out_1                    : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_3                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_2                    : std_logic;  -- ufix1
  SIGNAL tmp_111                          : std_logic;  -- ufix1
  SIGNAL p130_tmp                         : std_logic;  -- ufix1
  SIGNAL rd_29_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_112                          : std_logic;
  SIGNAL delayMatch_reg_4                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_3                    : std_logic;  -- ufix1
  SIGNAL tmp_113                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_5                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_4                    : std_logic;  -- ufix1
  SIGNAL tmp_114                          : std_logic;  -- ufix1
  SIGNAL rssi_en_out_5                    : std_logic;  -- ufix1
  SIGNAL tmp_115                          : std_logic;
  SIGNAL tmp_116                          : std_logic;
  SIGNAL rd_8_reg                         : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_117                          : std_logic;
  SIGNAL tmp_118                          : std_logic;
  SIGNAL rd_15_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_119                          : std_logic;
  SIGNAL tmp_120                          : std_logic;
  SIGNAL tmp_121                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_122                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p215tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_123                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL ai                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_124                          : std_logic;
  SIGNAL tmp_125                          : std_logic;
  SIGNAL tmp_126                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_127                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p217tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_128                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL aq                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_129                          : std_logic;
  SIGNAL tmp_130                          : std_logic;
  SIGNAL rd_5_reg                         : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_131                          : std_logic;
  SIGNAL tmp_132                          : std_logic;
  SIGNAL tmp_133                          : std_logic;
  SIGNAL tmp_134                          : std_logic;
  SIGNAL rd_31_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_135                          : std_logic;
  SIGNAL tmp_136                          : std_logic;
  SIGNAL tmp_137                          : std_logic;
  SIGNAL tmp_138                          : std_logic;
  SIGNAL tmp_139                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssiHold                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_140                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p134_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p134_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p134_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p134_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p134_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p134_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_141                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_142                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_143                          : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p169tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_144                          : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_145                          : std_logic;
  SIGNAL multiplier_cast_4                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_4            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_146                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_147                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_148                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_149                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_150                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_151                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_5                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_5            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_152                          : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_153                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_154                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_155                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_156                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_157                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_158                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_159                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_160                          : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p175tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_161                          : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_162                          : std_logic;
  SIGNAL multiplier_cast_6                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_6            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_163                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_164                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_165                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_166                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_167                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_168                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_7                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_7            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_169                          : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_170                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_171                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_172                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_173                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_174                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_175                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_176                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_177                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_178                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_179                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_180                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_181                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_182                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_183                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL rd_4_reg                         : vector_of_signed49(0 TO 1);  -- sfix49 [2]
  SIGNAL tmp_184                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL c                                : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p82c_sub_cast                    : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p82c_sub_cast_1                  : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_185                          : std_logic;
  SIGNAL tmp_186                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_187                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p81tmp_cast                      : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL p81tmp_cast_1                    : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL tmp_188                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL rssi_diff                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_diff_1                      : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_high_goal_in_unsigned       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_3_reg                         : vector_of_unsigned24(0 TO 3);  -- ufix24 [4]
  SIGNAL rssi_high_goal_in_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha_relop1                     : std_logic;
  SIGNAL rssi_low_goal_in_unsigned        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_2_reg                         : vector_of_unsigned24(0 TO 3);  -- ufix24 [4]
  SIGNAL rssi_low_goal_in_1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha_relop1_1                   : std_logic;
  SIGNAL tmp_189                          : std_logic;
  SIGNAL rd_26_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_190                          : std_logic;
  SIGNAL tmp_191                          : std_logic;  -- ufix1
  SIGNAL tmp_192                          : std_logic;  -- ufix1
  SIGNAL tmp_193                          : std_logic;  -- ufix1
  SIGNAL tmp_194                          : std_logic;  -- ufix1
  SIGNAL tmp_195                          : std_logic;  -- ufix1
  SIGNAL tmp_196                          : std_logic;  -- ufix1
  SIGNAL tmp_197                          : std_logic;  -- ufix1
  SIGNAL tmp_198                          : std_logic;  -- ufix1
  SIGNAL tmp_199                          : std_logic;  -- ufix1
  SIGNAL tmp_200                          : std_logic;  -- ufix1
  SIGNAL tmp_201                          : std_logic;  -- ufix1
  SIGNAL tmp_203                          : std_logic;  -- ufix1
  SIGNAL tmp_204                          : std_logic;  -- ufix1
  SIGNAL tmp_205                          : std_logic;  -- ufix1
  SIGNAL tmp_206                          : std_logic;
  SIGNAL tmp_207                          : std_logic;
  SIGNAL tmp_208                          : std_logic;
  SIGNAL tmp_209                          : std_logic;
  SIGNAL tmp_210                          : std_logic;
  SIGNAL alpha_relop1_2                   : std_logic;
  SIGNAL dir_out_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_211                          : std_logic;
  SIGNAL alpha_relop1_3                   : std_logic;
  SIGNAL delayMatch_reg_6                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_2                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_212                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_213                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_13_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_214                          : std_logic;
  SIGNAL rd_7_reg                         : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_215                          : std_logic;
  SIGNAL delayMatch_reg_7                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_3                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_216                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_217                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_218                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_8                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_4                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_219                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_220                          : std_logic;
  SIGNAL delayMatch_reg_9                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_5                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_221                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_24_reg                        : vector_of_unsigned2(0 TO 3);  -- ufix2 [4]
  SIGNAL tmp_222                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_9_reg                         : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_223                          : std_logic;
  SIGNAL delayMatch_reg_10                : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_6                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_225                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch_reg_11                : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_7                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_226                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_out_8                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_227                          : std_logic;
  SIGNAL tmp_228                          : std_logic;  -- ufix1
  SIGNAL tmp_229                          : std_logic;
  SIGNAL tmp_230                          : std_logic;
  SIGNAL tmp_231                          : std_logic;
  SIGNAL tmp_232                          : std_logic;
  SIGNAL tmp_233                          : std_logic;
  SIGNAL alpha_relop1_4                   : std_logic;
  SIGNAL dir_en_out_1                     : std_logic;  -- ufix1
  SIGNAL tmp_234                          : std_logic;
  SIGNAL alpha_relop1_5                   : std_logic;
  SIGNAL delayMatch_reg_12                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_2                     : std_logic;  -- ufix1
  SIGNAL tmp_235                          : std_logic;  -- ufix1
  SIGNAL tmp_236                          : std_logic;  -- ufix1
  SIGNAL rd_14_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_237                          : std_logic;
  SIGNAL rd_6_reg                         : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_238                          : std_logic;
  SIGNAL delayMatch_reg_13                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_3                     : std_logic;  -- ufix1
  SIGNAL tmp_239                          : std_logic;  -- ufix1
  SIGNAL tmp_240                          : std_logic;  -- ufix1
  SIGNAL tmp_241                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_14                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_4                     : std_logic;  -- ufix1
  SIGNAL tmp_242                          : std_logic;  -- ufix1
  SIGNAL tmp_243                          : std_logic;
  SIGNAL delayMatch_reg_15                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_5                     : std_logic;  -- ufix1
  SIGNAL tmp_244                          : std_logic;  -- ufix1
  SIGNAL rd_25_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_245                          : std_logic;  -- ufix1
  SIGNAL rd_10_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_246                          : std_logic;
  SIGNAL delayMatch_reg_16                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_6                     : std_logic;  -- ufix1
  SIGNAL tmp_248                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_17                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_7                     : std_logic;  -- ufix1
  SIGNAL tmp_249                          : std_logic;  -- ufix1
  SIGNAL dir_en_out_8                     : std_logic;  -- ufix1

BEGIN
  i_in_signed <= signed(i_in);

  enb <= ce;

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_in_1 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_in_1 <= i_in_signed;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  
  tmp <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_1 <= tmp;
      END IF;
    END IF;
  END PROCESS rd_40_process;


  
  tmp_2 <= '1' WHEN i_in_signed < 0 ELSE
      '0';

  tmp_3 <= i_in_signed;

  p209tmp_1 <=  - (resize(i_in_signed, 13));
  tmp_4 <= p209tmp_1(11 DOWNTO 0);

  
  tmp_5 <= tmp_4 WHEN tmp_2 = '1' ELSE
      tmp_3;

  
  tmp_6 <= '1' WHEN tmp_5 < 250 ELSE
      '0';

  alpha_in_unsigned <= unsigned(alpha_in);

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --        Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2      %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  p205alpha_cast <= alpha_in_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p205alpha_cast_1 <= p205alpha_cast srl 12;
  alpha <= p205alpha_cast_1(11 DOWNTO 0);

  p189tmp_sub_cast <= resize(alpha, 14);
  tmp_7 <= 4096 - p189tmp_sub_cast;

  tmp_8 <= alpha;

  multiplier_cast <= signed(resize(tmp_8, 13));
  multiplier_mul_temp <= multiplier_cast * i_in_signed;
  tmp_9 <= multiplier_mul_temp(23 DOWNTO 0);

  tmp_10 <= resize(tmp_9 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_11 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_11 <= tmp_6;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  rd_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_12 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_12 <= tmp_10;
      END IF;
    END IF;
  END PROCESS rd_43_process;


  p182tmp_cast <= resize(tmp_13, 25);
  p182tmp_cast_1 <=  - (p182tmp_cast);
  tmp_14 <= p182tmp_cast_1(23 DOWNTO 0);

  tmp_15 <= tmp_13;

  rd_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_17 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_17 <= tmp_16;
      END IF;
    END IF;
  END PROCESS rd_51_process;


  tmp_18 <= tmp_16;

  multiplier_cast_1 <= signed(resize(tmp_7, 15));
  multiplier_mul_temp_1 <= multiplier_cast_1 * tmp_18;
  tmp_19 <= multiplier_mul_temp_1(37 DOWNTO 0);

  tmp_20 <= resize(tmp_19, 39);

  rd_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_21 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_21 <= tmp_20;
      END IF;
    END IF;
  END PROCESS rd_50_process;


  tmp_22 <= tmp_21 + tmp_12;

  tmp_23 <= tmp_22(35 DOWNTO 12);

  
  tmp_13 <= tmp_23 WHEN tmp_11 = '1' ELSE
      tmp_17;

  
  tmp_24 <= '1' WHEN tmp_13 < 0 ELSE
      '0';

  
  tmp_25 <= tmp_14 WHEN tmp_24 = '1' ELSE
      tmp_15;

  
  tmp_26 <= '1' WHEN tmp_25 > 204800 ELSE
      '0';

  
  tmp_27 <= to_signed(0, 24) WHEN tmp_26 = '1' ELSE
      tmp_13;

  
  tmp_28 <= tmp_27 WHEN tmp_1 = '1' ELSE
      tmp_17;

  tmp_16 <= tmp_28;

  p152i_out_sub_cast <= resize(i_in_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p152i_out_sub_cast_1 <= resize(tmp_16, 25);
  p152i_out_sub_temp <= p152i_out_sub_cast - p152i_out_sub_cast_1;
  i_out_1 <= p152i_out_sub_temp(23 DOWNTO 12);

  i_out_2 <= i_out_1;

  rd_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_46_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_46_reg(0) <= i_out_2;
        rd_46_reg(1 TO 2) <= rd_46_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_46_process;

  i_out_tmp <= rd_46_reg(2);

  i_out <= std_logic_vector(i_out_tmp);

  q_in_signed <= signed(q_in);

  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_in_1 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_in_1 <= q_in_signed;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- DC Correction section
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  tmp_29 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_30 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_30 <= tmp_29;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  
  tmp_31 <= '1' WHEN q_in_signed < 0 ELSE
      '0';

  tmp_32 <= q_in_signed;

  p213tmp_1 <=  - (resize(q_in_signed, 13));
  tmp_33 <= p213tmp_1(11 DOWNTO 0);

  
  tmp_34 <= tmp_33 WHEN tmp_31 = '1' ELSE
      tmp_32;

  
  tmp_35 <= '1' WHEN tmp_34 < 250 ELSE
      '0';

  p203tmp_sub_cast <= resize(alpha, 14);
  tmp_36 <= 4096 - p203tmp_sub_cast;

  tmp_37 <= alpha;

  multiplier_cast_2 <= signed(resize(tmp_37, 13));
  multiplier_mul_temp_2 <= multiplier_cast_2 * q_in_signed;
  tmp_38 <= multiplier_mul_temp_2(23 DOWNTO 0);

  tmp_39 <= resize(tmp_38 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_40 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_40 <= tmp_35;
      END IF;
    END IF;
  END PROCESS rd_44_process;


  rd_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_41 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_41 <= tmp_39;
      END IF;
    END IF;
  END PROCESS rd_45_process;


  p196tmp_cast <= resize(tmp_42, 25);
  p196tmp_cast_1 <=  - (p196tmp_cast);
  tmp_43 <= p196tmp_cast_1(23 DOWNTO 0);

  tmp_44 <= tmp_42;

  rd_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_46 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_46 <= tmp_45;
      END IF;
    END IF;
  END PROCESS rd_53_process;


  tmp_47 <= tmp_45;

  multiplier_cast_3 <= signed(resize(tmp_36, 15));
  multiplier_mul_temp_3 <= multiplier_cast_3 * tmp_47;
  tmp_48 <= multiplier_mul_temp_3(37 DOWNTO 0);

  tmp_49 <= resize(tmp_48, 39);

  rd_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_50 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_50 <= tmp_49;
      END IF;
    END IF;
  END PROCESS rd_52_process;


  tmp_51 <= tmp_50 + tmp_41;

  tmp_52 <= tmp_51(35 DOWNTO 12);

  
  tmp_42 <= tmp_52 WHEN tmp_40 = '1' ELSE
      tmp_46;

  
  tmp_53 <= '1' WHEN tmp_42 < 0 ELSE
      '0';

  
  tmp_54 <= tmp_43 WHEN tmp_53 = '1' ELSE
      tmp_44;

  
  tmp_55 <= '1' WHEN tmp_54 > 204800 ELSE
      '0';

  
  tmp_56 <= to_signed(0, 24) WHEN tmp_55 = '1' ELSE
      tmp_42;

  
  tmp_57 <= tmp_56 WHEN tmp_30 = '1' ELSE
      tmp_46;

  tmp_45 <= tmp_57;

  p151q_out_sub_cast <= resize(q_in_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p151q_out_sub_cast_1 <= resize(tmp_45, 25);
  p151q_out_sub_temp <= p151q_out_sub_cast - p151q_out_sub_cast_1;
  q_out_1 <= p151q_out_sub_temp(23 DOWNTO 12);

  q_out_2 <= q_out_1;

  rd_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_47_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_47_reg(0) <= q_out_2;
        rd_47_reg(1 TO 2) <= rd_47_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_47_process;

  q_out_tmp <= rd_47_reg(2);

  q_out <= std_logic_vector(q_out_tmp);

  
  tmp_58 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  
  tmp_59 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_27_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_27_reg(0) <= tmp_59;
        rd_27_reg(1 TO 2) <= rd_27_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_27_process;

  tmp_60 <= rd_27_reg(2);

  rd_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_out_3 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_out_3 <= i_out_1;
      END IF;
    END IF;
  END PROCESS rd_39_process;


  rd_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_out_3 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_out_3 <= q_out_1;
      END IF;
    END IF;
  END PROCESS rd_38_process;


  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- RSSI Estimation
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  tmp_61 <= i_out_3 * i_out_3;

  tmp_62 <= resize(tmp_61, 25);

  tmp_63 <= q_out_3 * q_out_3;

  tmp_64 <= resize(tmp_63, 25);

  tmp_65 <= tmp_62 + tmp_64;

  rssi_inst <= unsigned(tmp_65(22 DOWNTO 0));

  
  tmp_66 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_67 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_67 <= tmp_66;
      END IF;
    END IF;
  END PROCESS rd_32_process;


  
  tmp_68 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  rd_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_70 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_70 <= tmp_69;
      END IF;
    END IF;
  END PROCESS rd_54_process;


  counter <= tmp_71 + 1;

  
  p126_tmp <= to_unsigned(0, 9) WHEN counter >= 256 ELSE
      counter;
  
  tmp_72 <= to_unsigned(0, 9) WHEN tmp_67 = '1' ELSE
      p126_tmp;

  
  tmp_73 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_74 <= tmp_72 WHEN tmp_73 = '1' ELSE
      tmp_71;

  
  tmp_75 <= tmp_74 WHEN tmp_60 = '1' ELSE
      tmp_70;

  tmp_69 <= tmp_75;

  
  tmp_76 <= '1' WHEN tmp_69 = 0 ELSE
      '0';

  tmp_77 <= tmp_76 AND tmp_68;

  
  tmp_78 <= to_unsigned(1, 9) WHEN tmp_77 = '1' ELSE
      tmp_69;

  rd_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_71 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_71 <= tmp_78;
      END IF;
    END IF;
  END PROCESS rd_55_process;


  
  tmp_79 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_80 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_81 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_81 <= tmp_80;
      END IF;
    END IF;
  END PROCESS rd_35_process;


  
  tmp_82 <= '1' WHEN tmp_69 = 0 ELSE
      '0';

  
  tmp_83 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  tmp_84 <= tmp_82 AND tmp_83;

  
  tmp_85 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_28_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_28_reg(0) <= tmp_85;
        rd_28_reg(1 TO 2) <= rd_28_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_28_process;

  tmp_86 <= rd_28_reg(2);

  
  tmp_87 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_88 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_89 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_89 <= tmp_88;
      END IF;
    END IF;
  END PROCESS rd_33_process;


  tmp_90 <= resize(rssi_inst, 33);

  rd_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_91 <= to_unsigned(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_91 <= tmp_90;
      END IF;
    END IF;
  END PROCESS rd_37_process;


  rd_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_93 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_93 <= tmp_92;
      END IF;
    END IF;
  END PROCESS rd_56_process;


  rd_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_95 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_95 <= tmp_94;
      END IF;
    END IF;
  END PROCESS rd_57_process;


  
  tmp_97 <= tmp_95 WHEN tmp_89 = '1' ELSE
      tmp_96;

  
  tmp_98 <= tmp_97 WHEN tmp_87 = '1' ELSE
      tmp_95;

  
  tmp_99 <= tmp_98 WHEN tmp_86 = '1' ELSE
      tmp_93;

  tmp_92 <= tmp_99;

  
  tmp_94 <= to_unsigned(0, 32) WHEN tmp_84 = '1' ELSE
      tmp_92;

  tmp_100 <= resize(tmp_94, 33);

  rd_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_101 <= to_unsigned(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_101 <= tmp_100;
      END IF;
    END IF;
  END PROCESS rd_58_process;


  tmp_102 <= tmp_101 + tmp_91;

  tmp_96 <= tmp_102(31 DOWNTO 0);

  rssi_out_1 <= to_unsigned(0, 24);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= rssi_out_1;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  rssi_out_2 <= delayMatch_reg(1);

  p132_cast <= tmp_96 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p132_cast_1 <= p132_cast srl 8;
  p132_add_cast <= resize(p132_cast_1(39 DOWNTO 7), 34);
  p132_add_temp <= p132_add_cast + to_unsigned(1, 34);
  p132_cast_2 <= p132_add_temp(33 DOWNTO 1);
  
  p132_tmp <= p132_cast_2(23 DOWNTO 0) WHEN counter >= 256 ELSE
      rssi_out_2;
  
  tmp_103 <= rssi_out_2 WHEN tmp_81 = '1' ELSE
      p132_tmp;

  rd_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_30_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_30_reg(0) <= tmp_58;
        rd_30_reg(1 TO 2) <= rd_30_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_30_process;

  tmp_104 <= rd_30_reg(2);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_1 <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_1(0) <= rssi_out_1;
        delayMatch_reg_1(1) <= delayMatch_reg_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;

  rssi_out_3 <= delayMatch_reg_1(1);

  
  tmp_105 <= tmp_103 WHEN tmp_79 = '1' ELSE
      rssi_out_3;

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_2 <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_2(0) <= rssi_out_1;
        delayMatch_reg_2(1) <= delayMatch_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;

  rssi_out_4 <= delayMatch_reg_2(1);

  
  tmp_106 <= tmp_105 WHEN tmp_104 = '1' ELSE
      rssi_out_4;

  rssi_out_5 <= tmp_106;

  rd_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_out_tmp <= to_unsigned(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_out_tmp <= rssi_out_5;
      END IF;
    END IF;
  END PROCESS rd_49_process;


  rssi_out <= std_logic_vector(rssi_out_tmp);

  
  tmp_107 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  
  tmp_108 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_109 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_110 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_110 <= tmp_109;
      END IF;
    END IF;
  END PROCESS rd_34_process;


  rssi_en_out_1 <= '0';

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_3(0) <= rssi_en_out_1;
        delayMatch_reg_3(1) <= delayMatch_reg_3(0);
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;

  rssi_en_out_2 <= delayMatch_reg_3(1);

  
  p130_tmp <= '1' WHEN counter >= 256 ELSE
      rssi_en_out_2;
  
  tmp_111 <= rssi_en_out_2 WHEN tmp_110 = '1' ELSE
      p130_tmp;

  rd_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_29_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_29_reg(0) <= tmp_107;
        rd_29_reg(1 TO 2) <= rd_29_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_29_process;

  tmp_112 <= rd_29_reg(2);

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_4 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_4(0) <= rssi_en_out_1;
        delayMatch_reg_4(1) <= delayMatch_reg_4(0);
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;

  rssi_en_out_3 <= delayMatch_reg_4(1);

  
  tmp_113 <= tmp_111 WHEN tmp_108 = '1' ELSE
      rssi_en_out_3;

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_5 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_5(0) <= rssi_en_out_1;
        delayMatch_reg_5(1) <= delayMatch_reg_5(0);
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;

  rssi_en_out_4 <= delayMatch_reg_5(1);

  
  tmp_114 <= tmp_113 WHEN tmp_112 = '1' ELSE
      rssi_en_out_4;

  rssi_en_out_5 <= tmp_114;

  rd_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_en_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_en_out <= rssi_en_out_5;
      END IF;
    END IF;
  END PROCESS rd_48_process;


  
  tmp_115 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  
  tmp_116 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_8_reg(0) <= tmp_116;
        rd_8_reg(1 TO 3) <= rd_8_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_8_process;

  tmp_117 <= rd_8_reg(3);

  
  tmp_118 <= '1' WHEN gain_en_in = '0' ELSE
      '0';

  rd_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_15_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_15_reg(0) <= tmp_118;
        rd_15_reg(1 TO 3) <= rd_15_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_15_process;

  tmp_119 <= rd_15_reg(3);

  -- dir_out = 0 - do nothing
  -- dir_out = 1 - increase
  -- dir_out = 2 - decrease
  
  tmp_120 <= '1' WHEN i_in_signed < 0 ELSE
      '0';

  tmp_121 <= i_in_signed;

  p215tmp_1 <=  - (resize(i_in_signed, 13));
  tmp_122 <= p215tmp_1(11 DOWNTO 0);

  
  tmp_123 <= tmp_122 WHEN tmp_120 = '1' ELSE
      tmp_121;

  ai <= unsigned(tmp_123(10 DOWNTO 0));

  
  tmp_124 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_125 <= '1' WHEN q_in_signed < 0 ELSE
      '0';

  tmp_126 <= q_in_signed;

  --spssa
  -- see if the MCU has done something and if so reset
  -- decrease
  -- this overrides anything else
  -- we're saturating the ADC so decrease gain
  --too high - decrease
  --too low - increase
  -- wait for some action and the processor is done
  p217tmp_1 <=  - (resize(q_in_signed, 13));
  tmp_127 <= p217tmp_1(11 DOWNTO 0);

  
  tmp_128 <= tmp_127 WHEN tmp_125 = '1' ELSE
      tmp_126;

  aq <= unsigned(tmp_128(10 DOWNTO 0));

  
  tmp_129 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_130 <= tmp_124 OR tmp_129;

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_5_reg(0) <= tmp_130;
        rd_5_reg(1 TO 3) <= rd_5_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_5_process;

  tmp_131 <= rd_5_reg(3);

  
  tmp_132 <= '1' WHEN tmp_114 = '1' ELSE
      '0';

  rd_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_133 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_133 <= tmp_132;
      END IF;
    END IF;
  END PROCESS rd_18_process;


  
  tmp_134 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_31_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_31_reg(0) <= tmp_134;
        rd_31_reg(1 TO 2) <= rd_31_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_31_process;

  tmp_135 <= rd_31_reg(2);

  
  tmp_136 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_137 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_138 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_138 <= tmp_137;
      END IF;
    END IF;
  END PROCESS rd_36_process;


  rssiHold_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssiHold <= to_unsigned(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssiHold <= tmp_139;
      END IF;
    END IF;
  END PROCESS rssiHold_reg_process;


  p134_cast <= tmp_96 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p134_cast_1 <= p134_cast srl 8;
  p134_add_cast <= resize(p134_cast_1(39 DOWNTO 7), 34);
  p134_add_temp <= p134_add_cast + to_unsigned(1, 34);
  p134_cast_2 <= p134_add_temp(33 DOWNTO 1);
  
  p134_tmp <= p134_cast_2(23 DOWNTO 0) WHEN counter >= 256 ELSE
      rssiHold;
  
  tmp_140 <= rssiHold WHEN tmp_138 = '1' ELSE
      p134_tmp;

  
  tmp_141 <= tmp_140 WHEN tmp_136 = '1' ELSE
      rssiHold;

  
  tmp_142 <= tmp_141 WHEN tmp_135 = '1' ELSE
      rssiHold;

  tmp_139 <= tmp_142;

  p169tmp_sub_cast <= resize(alpha, 14);
  tmp_143 <= 4096 - p169tmp_sub_cast;

  tmp_144 <= alpha;

  
  tmp_145 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  multiplier_cast_4 <= signed(resize(tmp_144, 13));
  multiplier_mul_temp_4 <= multiplier_cast_4 * i_in_signed;
  tmp_146 <= multiplier_mul_temp_4(23 DOWNTO 0);

  tmp_147 <= resize(tmp_146 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_149 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_149 <= tmp_148;
      END IF;
    END IF;
  END PROCESS rd_60_process;


  tmp_150 <= tmp_148;

  rd_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_151 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_151 <= tmp_150;
      END IF;
    END IF;
  END PROCESS rd_59_process;


  multiplier_cast_5 <= signed(resize(tmp_143, 15));
  multiplier_mul_temp_5 <= multiplier_cast_5 * tmp_151;
  tmp_152 <= multiplier_mul_temp_5(37 DOWNTO 0);

  tmp_153 <= resize(tmp_152, 39);

  tmp_154 <= tmp_153 + tmp_147;

  tmp_155 <= tmp_154(35 DOWNTO 12);

  
  tmp_156 <= tmp_155 WHEN tmp_145 = '1' ELSE
      tmp_149;

  tmp_148 <= tmp_156;

  tmp_157 <= tmp_148;

  rd_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_158 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_158 <= tmp_157;
      END IF;
    END IF;
  END PROCESS rd_23_process;


  tmp_159 <= tmp_148;

  p175tmp_sub_cast <= resize(alpha, 14);
  tmp_160 <= 4096 - p175tmp_sub_cast;

  tmp_161 <= alpha;

  
  tmp_162 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  multiplier_cast_6 <= signed(resize(tmp_161, 13));
  multiplier_mul_temp_6 <= multiplier_cast_6 * q_in_signed;
  tmp_163 <= multiplier_mul_temp_6(23 DOWNTO 0);

  tmp_164 <= resize(tmp_163 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_166 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_166 <= tmp_165;
      END IF;
    END IF;
  END PROCESS rd_62_process;


  tmp_167 <= tmp_165;

  rd_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_168 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_168 <= tmp_167;
      END IF;
    END IF;
  END PROCESS rd_61_process;


  multiplier_cast_7 <= signed(resize(tmp_160, 15));
  multiplier_mul_temp_7 <= multiplier_cast_7 * tmp_168;
  tmp_169 <= multiplier_mul_temp_7(37 DOWNTO 0);

  tmp_170 <= resize(tmp_169, 39);

  tmp_171 <= tmp_170 + tmp_164;

  tmp_172 <= tmp_171(35 DOWNTO 12);

  
  tmp_173 <= tmp_172 WHEN tmp_162 = '1' ELSE
      tmp_166;

  tmp_165 <= tmp_173;

  tmp_174 <= tmp_165;

  rd_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_175 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_175 <= tmp_174;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  tmp_176 <= tmp_165;

  rd_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_177 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_177 <= tmp_159;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  tmp_178 <= tmp_158 * tmp_177;

  tmp_179 <= resize(tmp_178, 49);

  rd_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_180 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_180 <= tmp_176;
      END IF;
    END IF;
  END PROCESS rd_20_process;


  tmp_181 <= tmp_175 * tmp_180;

  tmp_182 <= resize(tmp_181, 49);

  tmp_183 <= tmp_179 + tmp_182;

  rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_4_reg <= (OTHERS => to_signed(0, 49));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_4_reg(0) <= tmp_183;
        rd_4_reg(1) <= rd_4_reg(0);
      END IF;
    END IF;
  END PROCESS rd_4_process;

  tmp_184 <= rd_4_reg(1);

  -- only increase power if the rssi is away from the mean
  p82c_sub_cast <= signed(resize(tmp_139 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 50));
  p82c_sub_cast_1 <= resize(tmp_184, 50);
  c <= p82c_sub_cast - p82c_sub_cast_1;

  
  tmp_185 <= '1' WHEN c < to_signed(0, 50) ELSE
      '0';

  tmp_186 <= c;

  p81tmp_cast <= resize(c, 51);
  p81tmp_cast_1 <=  - (p81tmp_cast);
  tmp_187 <= p81tmp_cast_1(49 DOWNTO 0);

  
  tmp_188 <= tmp_187 WHEN tmp_185 = '1' ELSE
      tmp_186;

  rssi_diff <= unsigned(tmp_188(47 DOWNTO 24));

  rd_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_diff_1 <= to_unsigned(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_diff_1 <= rssi_diff;
      END IF;
    END IF;
  END PROCESS rd_19_process;


  rssi_high_goal_in_unsigned <= unsigned(rssi_high_goal_in);

  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_3_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_3_reg(0) <= rssi_high_goal_in_unsigned;
        rd_3_reg(1 TO 3) <= rd_3_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_3_process;

  rssi_high_goal_in_1 <= rd_3_reg(3);

  
  alpha_relop1 <= '1' WHEN rssi_diff_1 > rssi_high_goal_in_1 ELSE
      '0';

  rssi_low_goal_in_unsigned <= unsigned(rssi_low_goal_in);

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_2_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_2_reg(0) <= rssi_low_goal_in_unsigned;
        rd_2_reg(1 TO 3) <= rd_2_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_2_process;

  rssi_low_goal_in_1 <= rd_2_reg(3);

  
  alpha_relop1_1 <= '1' WHEN rssi_diff_1 < rssi_low_goal_in_1 ELSE
      '0';

  
  tmp_189 <= '1' WHEN gain_en_in = '1' ELSE
      '0';

  rd_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_26_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_26_reg(0) <= tmp_189;
        rd_26_reg(1 TO 2) <= rd_26_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_26_process;

  tmp_190 <= rd_26_reg(2);

  
  tmp_192 <= '0' WHEN tmp_190 = '1' ELSE
      tmp_191;

  rd_63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_193 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_193 <= tmp_192;
      END IF;
    END IF;
  END PROCESS rd_63_process;


  rd_65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_194 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_194 <= tmp_191;
      END IF;
    END IF;
  END PROCESS rd_65_process;


  
  tmp_195 <= '1' WHEN alpha_relop1_1 = '1' ELSE
      tmp_194;

  
  tmp_196 <= '1' WHEN alpha_relop1 = '1' ELSE
      tmp_195;

  
  tmp_197 <= tmp_196 WHEN tmp_133 = '1' ELSE
      tmp_194;

  
  tmp_198 <= '1' WHEN tmp_131 = '1' ELSE
      tmp_197;

  
  tmp_199 <= tmp_198 WHEN tmp_119 = '1' ELSE
      tmp_194;

  tmp_200 <= tmp_191;

  rd_64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_201 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_201 <= tmp_200;
      END IF;
    END IF;
  END PROCESS rd_64_process;


  p44_output : PROCESS (tmp_201, tmp_199, tmp_193)
    VARIABLE tmp202 : std_logic;
  BEGIN

    CASE tmp_201 IS
      WHEN '0' =>
        tmp202 := tmp_199;
      WHEN '1' =>
        tmp202 := tmp_193;
      WHEN OTHERS => 
        tmp202 := '0';
    END CASE;

    tmp_203 <= tmp202;
  END PROCESS p44_output;


  
  tmp_204 <= tmp_203 WHEN tmp_117 = '1' ELSE
      tmp_194;

  tmp_191 <= tmp_204;

  tmp_205 <= tmp_191;

  
  tmp_206 <= '1' WHEN gain_en_in = '0' ELSE
      '0';

  
  tmp_207 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_208 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_209 <= tmp_207 OR tmp_208;

  
  tmp_210 <= '1' WHEN tmp_114 = '1' ELSE
      '0';

  
  alpha_relop1_2 <= '1' WHEN rssi_diff_1 < rssi_low_goal_in_1 ELSE
      '0';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- Gain Correction
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  dir_out_1 <= to_unsigned(0, 2);

  rd_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_211 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_211 <= tmp_210;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  
  alpha_relop1_3 <= '1' WHEN rssi_diff_1 > rssi_high_goal_in_1 ELSE
      '0';

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_6 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_6(0) <= dir_out_1;
        delayMatch_reg_6(1) <= delayMatch_reg_6(0);
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;

  dir_out_2 <= delayMatch_reg_6(1);

  
  tmp_212 <= to_unsigned(1, 2) WHEN alpha_relop1_2 = '1' ELSE
      dir_out_2;

  
  tmp_213 <= to_unsigned(2, 2) WHEN alpha_relop1_3 = '1' ELSE
      tmp_212;

  rd_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_13_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_13_reg(0) <= tmp_206;
        rd_13_reg(1 TO 3) <= rd_13_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_13_process;

  tmp_214 <= rd_13_reg(3);

  rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_7_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_7_reg(0) <= tmp_209;
        rd_7_reg(1 TO 3) <= rd_7_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_7_process;

  tmp_215 <= rd_7_reg(3);

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_7 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_7(0) <= dir_out_1;
        delayMatch_reg_7(1) <= delayMatch_reg_7(0);
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;

  dir_out_3 <= delayMatch_reg_7(1);

  
  tmp_216 <= tmp_213 WHEN tmp_211 = '1' ELSE
      dir_out_3;

  
  tmp_217 <= to_unsigned(2, 2) WHEN tmp_215 = '1' ELSE
      tmp_216;

  rd_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_218 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_218 <= tmp_205;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_8 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_8(0) <= dir_out_1;
        delayMatch_reg_8(1) <= delayMatch_reg_8(0);
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;

  dir_out_4 <= delayMatch_reg_8(1);

  
  tmp_219 <= tmp_217 WHEN tmp_214 = '1' ELSE
      dir_out_4;

  
  tmp_220 <= '1' WHEN gain_en_in = '1' ELSE
      '0';

  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_9 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_9(0) <= dir_out_1;
        delayMatch_reg_9(1) <= delayMatch_reg_9(0);
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;

  dir_out_5 <= delayMatch_reg_9(1);

  
  tmp_221 <= to_unsigned(0, 2) WHEN tmp_220 = '1' ELSE
      dir_out_5;

  rd_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_24_reg <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_24_reg(0) <= tmp_221;
        rd_24_reg(1 TO 3) <= rd_24_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_24_process;

  tmp_222 <= rd_24_reg(3);

  rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_9_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_9_reg(0) <= tmp_115;
        rd_9_reg(1 TO 3) <= rd_9_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_9_process;

  tmp_223 <= rd_9_reg(3);

  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_10 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_10(0) <= dir_out_1;
        delayMatch_reg_10(1) <= delayMatch_reg_10(0);
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;

  dir_out_6 <= delayMatch_reg_10(1);

  p46_output : PROCESS (tmp_218, tmp_219, tmp_222, dir_out_6)
    VARIABLE tmp224 : unsigned(1 DOWNTO 0);
  BEGIN

    CASE tmp_218 IS
      WHEN '0' =>
        tmp224 := tmp_219;
      WHEN '1' =>
        tmp224 := tmp_222;
      WHEN OTHERS => 
        tmp224 := dir_out_6;
    END CASE;

    tmp_225 <= tmp224;
  END PROCESS p46_output;


  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_11 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_11(0) <= dir_out_1;
        delayMatch_reg_11(1) <= delayMatch_reg_11(0);
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;

  dir_out_7 <= delayMatch_reg_11(1);

  
  tmp_226 <= tmp_225 WHEN tmp_223 = '1' ELSE
      dir_out_7;

  dir_out_8 <= tmp_226;

  dir_out <= std_logic_vector(dir_out_8);

  
  tmp_227 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  tmp_228 <= tmp_191;

  
  tmp_229 <= '1' WHEN gain_en_in = '0' ELSE
      '0';

  
  tmp_230 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_231 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_232 <= tmp_230 OR tmp_231;

  
  tmp_233 <= '1' WHEN tmp_114 = '1' ELSE
      '0';

  
  alpha_relop1_4 <= '1' WHEN rssi_diff_1 < rssi_low_goal_in_1 ELSE
      '0';

  dir_en_out_1 <= '0';

  rd_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_234 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_234 <= tmp_233;
      END IF;
    END IF;
  END PROCESS rd_17_process;


  
  alpha_relop1_5 <= '1' WHEN rssi_diff_1 > rssi_high_goal_in_1 ELSE
      '0';

  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_12 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_12(0) <= dir_en_out_1;
        delayMatch_reg_12(1) <= delayMatch_reg_12(0);
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;

  dir_en_out_2 <= delayMatch_reg_12(1);

  
  tmp_235 <= '1' WHEN alpha_relop1_4 = '1' ELSE
      dir_en_out_2;

  
  tmp_236 <= '1' WHEN alpha_relop1_5 = '1' ELSE
      tmp_235;

  rd_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_14_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_14_reg(0) <= tmp_229;
        rd_14_reg(1 TO 3) <= rd_14_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_14_process;

  tmp_237 <= rd_14_reg(3);

  rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_6_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_6_reg(0) <= tmp_232;
        rd_6_reg(1 TO 3) <= rd_6_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  tmp_238 <= rd_6_reg(3);

  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_13 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_13(0) <= dir_en_out_1;
        delayMatch_reg_13(1) <= delayMatch_reg_13(0);
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;

  dir_en_out_3 <= delayMatch_reg_13(1);

  
  tmp_239 <= tmp_236 WHEN tmp_234 = '1' ELSE
      dir_en_out_3;

  
  tmp_240 <= '1' WHEN tmp_238 = '1' ELSE
      tmp_239;

  rd_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_241 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_241 <= tmp_228;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_14 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_14(0) <= dir_en_out_1;
        delayMatch_reg_14(1) <= delayMatch_reg_14(0);
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;

  dir_en_out_4 <= delayMatch_reg_14(1);

  
  tmp_242 <= tmp_240 WHEN tmp_237 = '1' ELSE
      dir_en_out_4;

  
  tmp_243 <= '1' WHEN gain_en_in = '1' ELSE
      '0';

  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_15 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_15(0) <= dir_en_out_1;
        delayMatch_reg_15(1) <= delayMatch_reg_15(0);
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;

  dir_en_out_5 <= delayMatch_reg_15(1);

  
  tmp_244 <= '1' WHEN tmp_243 = '1' ELSE
      dir_en_out_5;

  rd_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_25_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_25_reg(0) <= tmp_244;
        rd_25_reg(1 TO 3) <= rd_25_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_25_process;

  tmp_245 <= rd_25_reg(3);

  rd_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_10_reg(0) <= tmp_227;
        rd_10_reg(1 TO 3) <= rd_10_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_10_process;

  tmp_246 <= rd_10_reg(3);

  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_16 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_16(0) <= dir_en_out_1;
        delayMatch_reg_16(1) <= delayMatch_reg_16(0);
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;

  dir_en_out_6 <= delayMatch_reg_16(1);

  p48_output : PROCESS (tmp_241, tmp_242, tmp_245, dir_en_out_6)
    VARIABLE tmp247 : std_logic;
  BEGIN

    CASE tmp_241 IS
      WHEN '0' =>
        tmp247 := tmp_242;
      WHEN '1' =>
        tmp247 := tmp_245;
      WHEN OTHERS => 
        tmp247 := dir_en_out_6;
    END CASE;

    tmp_248 <= tmp247;
  END PROCESS p48_output;


  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_17 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_17(0) <= dir_en_out_1;
        delayMatch_reg_17(1) <= delayMatch_reg_17(0);
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;

  dir_en_out_7 <= delayMatch_reg_17(1);

  
  tmp_249 <= tmp_248 WHEN tmp_246 = '1' ELSE
      dir_en_out_7;

  dir_en_out_8 <= tmp_249;

  dir_en_out <= dir_en_out_8;

  ce_out <= ce;

END rtl;

