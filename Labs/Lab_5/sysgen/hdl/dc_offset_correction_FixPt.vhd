-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\Chilipepper\Labs\Lab_5\Matlab\codegen\dc_offset_correction\hdlsrc\dc_offset_correction_FixPt.vhd
-- Created: 2013-05-07 16:43:55
-- 
-- Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- rssi_out                      ce_out        1
-- rssi_en_out                   ce_out        1
-- dir_out                       ce_out        1
-- dir_en_out                    ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dc_offset_correction_FixPt
-- Source Path: dc_offset_correction_FixPt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.dc_offset_correction_FixPt_pkg.ALL;

ENTITY dc_offset_correction_FixPt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        ce                                :   IN    std_logic;
        i_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        alpha_in                          :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        gain_en_in                        :   IN    std_logic;  -- ufix1
        rssi_low_goal_in                  :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_high_goal_in                 :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rx_en_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        rssi_out                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_en_out                       :   OUT   std_logic;  -- ufix1
        dir_out                           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        dir_en_out                        :   OUT   std_logic  -- ufix1
        );
END dc_offset_correction_FixPt;


ARCHITECTURE rtl OF dc_offset_correction_FixPt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL i_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : std_logic;
  SIGNAL alpha_in_unsigned                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL alpha                            : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL p215alpha_cast                   : unsigned(23 DOWNTO 0);  -- ufix24_En12
  SIGNAL p215alpha_cast_1                 : unsigned(23 DOWNTO 0);  -- ufix24_En12
  SIGNAL tmp_2                            : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p195tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_3                            : std_logic;
  SIGNAL tmp_4                            : std_logic;
  SIGNAL tmp_5                            : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL multiplier_cast                  : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_6                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_7                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_8                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_9                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_10                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_11                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_12                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_13                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_1            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_14                           : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_15                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_16                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_17                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_18                           : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p207tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_19                           : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL multiplier_cast_2                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_2            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_20                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_21                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_22                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_23                           : std_logic;
  SIGNAL tmp_24                           : std_logic;
  SIGNAL tmp_25                           : std_logic;
  SIGNAL tmp_26                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_27                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p171tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p171tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_28                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_29                           : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_30                           : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_31                           : std_logic;
  SIGNAL tmp_32                           : std_logic;
  SIGNAL tmp_33                           : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p201tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_34                           : std_logic;
  SIGNAL tmp_35                           : std_logic;
  SIGNAL tmp_36                           : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL q_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL multiplier_cast_3                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_3            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_37                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_38                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_39                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_40                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_41                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_42                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_43                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_44                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_4                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_4            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_45                           : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_46                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_47                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_48                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_49                           : std_logic;
  SIGNAL tmp_50                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_51                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p169tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p169tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_52                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_53                           : std_logic;
  SIGNAL tmp_54                           : std_logic;
  SIGNAL tmp_55                           : std_logic;
  SIGNAL tmp_56                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_57                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_58                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_59                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_60                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_61                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p184_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p184_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p184_tmp_2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p184_tmp_3                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p184_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p184_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p184_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p184_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p184_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p184_cast_4                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p184_cast_5                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p184_cast_6                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p184_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p184_cast_7                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_62                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_63                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_64                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_65                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_66                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p186_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_tmp_2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p186_tmp_3                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p186_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p186_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p186_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p186_cast_4                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast_5                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast_6                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p186_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p186_cast_7                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_67                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_68                           : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p157tmp_sub_temp                 : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL alpha_relop1                     : std_logic;
  SIGNAL tmp_69                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_70                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p189_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p189_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p189_tmp_2                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p189_tmp_3                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p189_tmp_4                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p189_tmp_5                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p189_tmp_6                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p189_tmp_7                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p189_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p189_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p189_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p189_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p189_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p189_cast_4                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p189_cast_5                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p189_cast_6                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p189_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p189_cast_7                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_71                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_72                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_73                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_74                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_5                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_5            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_75                           : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_76                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_77                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_78                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL i_dc                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_79                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p179_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p179_tmp_1                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p179_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p179_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p179_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p179_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p179_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p167i_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p167i_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p167i_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL i_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rd_58_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL i_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_80                           : std_logic;
  SIGNAL tmp_81                           : std_logic;
  SIGNAL tmp_82                           : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p213tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_83                           : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL multiplier_cast_6                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_6            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_84                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_85                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_86                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_87                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_88                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_89                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_7                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_7            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_90                           : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_91                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_92                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_93                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL q_dc                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_94                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p182_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p182_tmp_1                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p182_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p182_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p182_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p182_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p182_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p166q_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p166q_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p166q_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL q_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rd_59_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL q_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_95                           : std_logic;
  SIGNAL tmp_96                           : std_logic;
  SIGNAL rd_30_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_97                           : std_logic;
  SIGNAL tmp_98                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_99                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_100                          : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_101                          : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_102                          : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_103                          : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_104                          : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL rssi_inst                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_105                          : std_logic;
  SIGNAL tmp_106                          : std_logic;
  SIGNAL tmp_107                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_108                          : std_logic;
  SIGNAL tmp_109                          : std_logic;
  SIGNAL tmp_110                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_111                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_112                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_113                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p130_tmp                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_114                          : std_logic;
  SIGNAL tmp_115                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_116                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_117                          : std_logic;
  SIGNAL tmp_118                          : std_logic;
  SIGNAL tmp_119                          : std_logic;
  SIGNAL tmp_120                          : std_logic;
  SIGNAL tmp_121                          : std_logic;
  SIGNAL tmp_122                          : std_logic;
  SIGNAL tmp_123                          : std_logic;
  SIGNAL tmp_124                          : std_logic;
  SIGNAL tmp_125                          : std_logic;
  SIGNAL tmp_126                          : std_logic;
  SIGNAL tmp_127                          : std_logic;
  SIGNAL tmp_128                          : std_logic;
  SIGNAL rd_31_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_129                          : std_logic;
  SIGNAL tmp_130                          : std_logic;
  SIGNAL tmp_131                          : std_logic;
  SIGNAL tmp_132                          : std_logic;
  SIGNAL tmp_133                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_134                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_135                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_136                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_137                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_138                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL rssi_sum                         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_139                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_140                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_141                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_142                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL rssi_out_1                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL delayMatch_reg                   : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_2                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_143                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p136_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p136_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p136_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p136_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p136_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p136_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL rd_33_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_144                          : std_logic;
  SIGNAL delayMatch_reg_1                 : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_3                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_145                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL delayMatch_reg_2                 : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_4                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_146                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_out_5                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_out_tmp                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_147                          : std_logic;
  SIGNAL tmp_148                          : std_logic;
  SIGNAL tmp_149                          : std_logic;
  SIGNAL tmp_150                          : std_logic;
  SIGNAL rssi_en_out_1                    : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_3                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_2                    : std_logic;  -- ufix1
  SIGNAL tmp_151                          : std_logic;  -- ufix1
  SIGNAL p134_tmp                         : std_logic;  -- ufix1
  SIGNAL rd_32_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_152                          : std_logic;
  SIGNAL delayMatch_reg_4                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_3                    : std_logic;  -- ufix1
  SIGNAL tmp_153                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_5                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_4                    : std_logic;  -- ufix1
  SIGNAL tmp_154                          : std_logic;  -- ufix1
  SIGNAL rssi_en_out_5                    : std_logic;  -- ufix1
  SIGNAL tmp_155                          : std_logic;
  SIGNAL tmp_156                          : std_logic;
  SIGNAL rd_8_reg                         : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_157                          : std_logic;
  SIGNAL tmp_158                          : std_logic;
  SIGNAL rd_15_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_159                          : std_logic;
  SIGNAL tmp_160                          : std_logic;
  SIGNAL tmp_161                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_162                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p220tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_163                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL ai                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_164                          : std_logic;
  SIGNAL tmp_165                          : std_logic;
  SIGNAL tmp_166                          : std_logic;
  SIGNAL tmp_167                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_168                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p222tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_169                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL aq                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_170                          : std_logic;
  SIGNAL tmp_171                          : std_logic;
  SIGNAL tmp_172                          : std_logic;
  SIGNAL rd_5_reg                         : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_173                          : std_logic;
  SIGNAL tmp_174                          : std_logic;
  SIGNAL tmp_175                          : std_logic;
  SIGNAL tmp_176                          : std_logic;
  SIGNAL rd_34_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_177                          : std_logic;
  SIGNAL tmp_178                          : std_logic;
  SIGNAL tmp_179                          : std_logic;
  SIGNAL tmp_180                          : std_logic;
  SIGNAL tmp_181                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssiHold                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_182                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p138_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p138_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p138_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p138_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p138_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p138_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_183                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_184                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_185                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_186                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_187                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_188                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_189                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_190                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_191                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_192                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_193                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL rd_4_reg                         : vector_of_signed49(0 TO 1);  -- sfix49 [2]
  SIGNAL tmp_194                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL c                                : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p86c_sub_cast                    : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p86c_sub_cast_1                  : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL c_1                              : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_195                          : std_logic;
  SIGNAL tmp_196                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_197                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_198                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p85tmp_cast                      : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL p85tmp_cast_1                    : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL tmp_199                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL rssi_diff                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_high_goal_in_unsigned       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_3_reg                         : vector_of_unsigned24(0 TO 3);  -- ufix24 [4]
  SIGNAL rssi_high_goal_in_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha_relop1_1                   : std_logic;
  SIGNAL rssi_low_goal_in_unsigned        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_2_reg                         : vector_of_unsigned24(0 TO 3);  -- ufix24 [4]
  SIGNAL rssi_low_goal_in_1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha_relop1_2                   : std_logic;
  SIGNAL tmp_200                          : std_logic;
  SIGNAL rd_29_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_201                          : std_logic;
  SIGNAL tmp_202                          : std_logic;  -- ufix1
  SIGNAL tmp_203                          : std_logic;  -- ufix1
  SIGNAL tmp_204                          : std_logic;  -- ufix1
  SIGNAL tmp_205                          : std_logic;  -- ufix1
  SIGNAL tmp_206                          : std_logic;  -- ufix1
  SIGNAL tmp_207                          : std_logic;  -- ufix1
  SIGNAL tmp_208                          : std_logic;  -- ufix1
  SIGNAL tmp_209                          : std_logic;  -- ufix1
  SIGNAL tmp_210                          : std_logic;  -- ufix1
  SIGNAL tmp_211                          : std_logic;  -- ufix1
  SIGNAL tmp_212                          : std_logic;  -- ufix1
  SIGNAL tmp_214                          : std_logic;  -- ufix1
  SIGNAL tmp_215                          : std_logic;  -- ufix1
  SIGNAL tmp_216                          : std_logic;  -- ufix1
  SIGNAL tmp_217                          : std_logic;
  SIGNAL tmp_218                          : std_logic;
  SIGNAL tmp_219                          : std_logic;
  SIGNAL tmp_220                          : std_logic;
  SIGNAL tmp_221                          : std_logic;
  SIGNAL tmp_222                          : std_logic;
  SIGNAL tmp_223                          : std_logic;
  SIGNAL alpha_relop1_3                   : std_logic;
  SIGNAL dir_out_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_224                          : std_logic;
  SIGNAL alpha_relop1_4                   : std_logic;
  SIGNAL delayMatch_reg_6                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_2                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_225                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_226                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_13_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_227                          : std_logic;
  SIGNAL rd_7_reg                         : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_228                          : std_logic;
  SIGNAL delayMatch_reg_7                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_3                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_229                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_230                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_231                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_8                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_4                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_232                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_233                          : std_logic;
  SIGNAL delayMatch_reg_9                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_5                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_234                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_27_reg                        : vector_of_unsigned2(0 TO 3);  -- ufix2 [4]
  SIGNAL tmp_235                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_9_reg                         : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_236                          : std_logic;
  SIGNAL delayMatch_reg_10                : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_6                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_238                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch_reg_11                : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_7                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_239                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_out_8                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_240                          : std_logic;
  SIGNAL tmp_241                          : std_logic;  -- ufix1
  SIGNAL tmp_242                          : std_logic;
  SIGNAL tmp_243                          : std_logic;
  SIGNAL tmp_244                          : std_logic;
  SIGNAL tmp_245                          : std_logic;
  SIGNAL tmp_246                          : std_logic;
  SIGNAL tmp_247                          : std_logic;
  SIGNAL tmp_248                          : std_logic;
  SIGNAL alpha_relop1_5                   : std_logic;
  SIGNAL dir_en_out_1                     : std_logic;  -- ufix1
  SIGNAL tmp_249                          : std_logic;
  SIGNAL alpha_relop1_6                   : std_logic;
  SIGNAL delayMatch_reg_12                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_2                     : std_logic;  -- ufix1
  SIGNAL tmp_250                          : std_logic;  -- ufix1
  SIGNAL tmp_251                          : std_logic;  -- ufix1
  SIGNAL rd_14_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_252                          : std_logic;
  SIGNAL rd_6_reg                         : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_253                          : std_logic;
  SIGNAL delayMatch_reg_13                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_3                     : std_logic;  -- ufix1
  SIGNAL tmp_254                          : std_logic;  -- ufix1
  SIGNAL tmp_255                          : std_logic;  -- ufix1
  SIGNAL tmp_256                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_14                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_4                     : std_logic;  -- ufix1
  SIGNAL tmp_257                          : std_logic;  -- ufix1
  SIGNAL tmp_258                          : std_logic;
  SIGNAL delayMatch_reg_15                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_5                     : std_logic;  -- ufix1
  SIGNAL tmp_259                          : std_logic;  -- ufix1
  SIGNAL rd_28_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_260                          : std_logic;  -- ufix1
  SIGNAL rd_10_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL tmp_261                          : std_logic;
  SIGNAL delayMatch_reg_16                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_6                     : std_logic;  -- ufix1
  SIGNAL tmp_263                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_17                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_7                     : std_logic;  -- ufix1
  SIGNAL tmp_264                          : std_logic;  -- ufix1
  SIGNAL dir_en_out_8                     : std_logic;  -- ufix1

BEGIN
  i_in_signed <= signed(i_in);

  enb <= ce;

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_in_1 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_in_1 <= i_in_signed;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  
  tmp <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_1 <= tmp;
      END IF;
    END IF;
  END PROCESS rd_49_process;


  alpha_in_unsigned <= unsigned(alpha_in);

  --update the q dc offset
  --update the i dc offset
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --        Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2      %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  p215alpha_cast <= alpha_in_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p215alpha_cast_1 <= p215alpha_cast srl 12;
  alpha <= p215alpha_cast_1(11 DOWNTO 0);

  p195tmp_sub_cast <= resize(alpha, 14);
  tmp_2 <= 4096 - p195tmp_sub_cast;

  
  tmp_3 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_4 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_4 <= tmp_3;
      END IF;
    END IF;
  END PROCESS rd_47_process;


  tmp_5 <= alpha;

  multiplier_cast <= signed(resize(tmp_5, 13));
  multiplier_mul_temp <= multiplier_cast * i_in_signed;
  tmp_6 <= multiplier_mul_temp(23 DOWNTO 0);

  tmp_7 <= resize(tmp_6 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_8 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_8 <= tmp_7;
      END IF;
    END IF;
  END PROCESS rd_54_process;


  rd_62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_10 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_10 <= tmp_9;
      END IF;
    END IF;
  END PROCESS rd_62_process;


  
  tmp_12 <= tmp_11 WHEN tmp_4 = '1' ELSE
      tmp_10;

  tmp_9 <= tmp_12;

  tmp_13 <= tmp_9;

  multiplier_cast_1 <= signed(resize(tmp_2, 15));
  multiplier_mul_temp_1 <= multiplier_cast_1 * tmp_13;
  tmp_14 <= multiplier_mul_temp_1(37 DOWNTO 0);

  tmp_15 <= resize(tmp_14, 39);

  rd_64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_16 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_16 <= tmp_15;
      END IF;
    END IF;
  END PROCESS rd_64_process;


  tmp_17 <= tmp_16 + tmp_8;

  tmp_11 <= tmp_17(35 DOWNTO 12);

  p207tmp_sub_cast <= resize(alpha, 14);
  tmp_18 <= 4096 - p207tmp_sub_cast;

  tmp_19 <= alpha;

  multiplier_cast_2 <= signed(resize(tmp_19, 13));
  multiplier_mul_temp_2 <= multiplier_cast_2 * i_in_signed;
  tmp_20 <= multiplier_mul_temp_2(23 DOWNTO 0);

  tmp_21 <= resize(tmp_20 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_22 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_22 <= tmp_21;
      END IF;
    END IF;
  END PROCESS rd_56_process;


  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- DC Correction section
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  tmp_23 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_24 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_24 <= tmp_23;
      END IF;
    END IF;
  END PROCESS rd_53_process;


  
  tmp_25 <= '1' WHEN tmp_9 < 0 ELSE
      '0';

  tmp_26 <= tmp_9;

  p171tmp_cast <= resize(tmp_9, 25);
  p171tmp_cast_1 <=  - (p171tmp_cast);
  tmp_27 <= p171tmp_cast_1(23 DOWNTO 0);

  
  tmp_28 <= tmp_27 WHEN tmp_25 = '1' ELSE
      tmp_26;

  tmp_29 <= resize(tmp_28, 34);

  rd_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_30 <= to_signed(0, 34);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_30 <= tmp_29;
      END IF;
    END IF;
  END PROCESS rd_46_process;


  
  tmp_31 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_32 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_32 <= tmp_31;
      END IF;
    END IF;
  END PROCESS rd_52_process;


  p201tmp_sub_cast <= resize(alpha, 14);
  tmp_33 <= 4096 - p201tmp_sub_cast;

  
  tmp_34 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_35 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_35 <= tmp_34;
      END IF;
    END IF;
  END PROCESS rd_48_process;


  tmp_36 <= alpha;

  q_in_signed <= signed(q_in);

  multiplier_cast_3 <= signed(resize(tmp_36, 13));
  multiplier_mul_temp_3 <= multiplier_cast_3 * q_in_signed;
  tmp_37 <= multiplier_mul_temp_3(23 DOWNTO 0);

  tmp_38 <= resize(tmp_37 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_39 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_39 <= tmp_38;
      END IF;
    END IF;
  END PROCESS rd_55_process;


  rd_65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_41 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_41 <= tmp_40;
      END IF;
    END IF;
  END PROCESS rd_65_process;


  
  tmp_43 <= tmp_42 WHEN tmp_35 = '1' ELSE
      tmp_41;

  tmp_40 <= tmp_43;

  tmp_44 <= tmp_40;

  multiplier_cast_4 <= signed(resize(tmp_33, 15));
  multiplier_mul_temp_4 <= multiplier_cast_4 * tmp_44;
  tmp_45 <= multiplier_mul_temp_4(37 DOWNTO 0);

  tmp_46 <= resize(tmp_45, 39);

  rd_66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_47 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_47 <= tmp_46;
      END IF;
    END IF;
  END PROCESS rd_66_process;


  tmp_48 <= tmp_47 + tmp_39;

  tmp_42 <= tmp_48(35 DOWNTO 12);

  --correct false positive/nagatives
  
  tmp_49 <= '1' WHEN tmp_9 < 0 ELSE
      '0';

  tmp_50 <= tmp_9;

  p169tmp_cast <= resize(tmp_9, 25);
  p169tmp_cast_1 <=  - (p169tmp_cast);
  tmp_51 <= p169tmp_cast_1(23 DOWNTO 0);

  
  tmp_52 <= tmp_51 WHEN tmp_49 = '1' ELSE
      tmp_50;

  
  tmp_53 <= '1' WHEN tmp_52 < 204800 ELSE
      '0';

  
  tmp_54 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_55 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_55 <= tmp_54;
      END IF;
    END IF;
  END PROCESS rd_51_process;


  --dc offset threshold is higher than needed
  tmp_57 <= tmp_56 + 10;

  rd_67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_59 <= to_unsigned(0, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_59 <= tmp_58;
      END IF;
    END IF;
  END PROCESS rd_67_process;


  p184_cast <= resize(tmp_11, 25);
  p184_cast_1 <=  - (p184_cast);
  
  p184_tmp <= p184_cast_1(23 DOWNTO 0) WHEN tmp_11 < 0 ELSE
      tmp_11;
  p184_cast_2 <= resize(p184_tmp, 34);
  p184_add_temp <= 50 + resize(tmp_56, 21);
  p184_cast_3 <= signed(resize(p184_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p184_tmp_1 <= tmp_60 WHEN p184_cast_2 > p184_cast_3 ELSE
      tmp_59;
  p184_cast_4 <= resize(tmp_42, 25);
  p184_cast_5 <=  - (p184_cast_4);
  
  p184_tmp_2 <= p184_cast_5(23 DOWNTO 0) WHEN tmp_42 < 0 ELSE
      tmp_42;
  p184_cast_6 <= resize(p184_tmp_2, 34);
  p184_add_temp_1 <= 50 + resize(tmp_56, 21);
  p184_cast_7 <= signed(resize(p184_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p184_tmp_3 <= p184_tmp_1 + 1 WHEN p184_cast_6 > p184_cast_7 ELSE
      p184_tmp_1;
  
  tmp_61 <= to_unsigned(0, 20) WHEN tmp_55 = '1' AND (p184_tmp_3 > 10) ELSE
      p184_tmp_3 WHEN tmp_55 = '1' ELSE
      tmp_59;

  
  tmp_62 <= to_unsigned(0, 20) WHEN tmp_53 = '1' ELSE
      tmp_61;

  tmp_58 <= tmp_62;

  --there is a high dc_offset value that needs to be corrected
  -- too much noise, raise cieling.
  tmp_63 <= tmp_58 + 1;

  rd_68_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_60 <= to_unsigned(0, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_60 <= tmp_63;
      END IF;
    END IF;
  END PROCESS rd_68_process;


  p186_cast <= resize(tmp_11, 25);
  p186_cast_1 <=  - (p186_cast);
  
  p186_tmp <= p186_cast_1(23 DOWNTO 0) WHEN tmp_11 < 0 ELSE
      tmp_11;
  p186_cast_2 <= resize(p186_tmp, 34);
  p186_add_temp <= 50 + resize(tmp_56, 21);
  p186_cast_3 <= signed(resize(p186_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p186_tmp_1 <= tmp_65 WHEN p186_cast_2 > p186_cast_3 ELSE
      tmp_64;
  p186_cast_4 <= resize(tmp_42, 25);
  p186_cast_5 <=  - (p186_cast_4);
  
  p186_tmp_2 <= p186_cast_5(23 DOWNTO 0) WHEN tmp_42 < 0 ELSE
      tmp_42;
  p186_cast_6 <= resize(p186_tmp_2, 34);
  p186_add_temp_1 <= 50 + resize(tmp_56, 21);
  p186_cast_7 <= signed(resize(p186_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p186_tmp_3 <= p186_tmp_1 WHEN p186_cast_6 > p186_cast_7 ELSE
      p186_tmp_1 + 1;
  
  tmp_66 <= to_unsigned(0, 20) WHEN tmp_32 = '1' AND (p186_tmp_3 > 100000) ELSE
      p186_tmp_3 WHEN tmp_32 = '1' ELSE
      tmp_65;

  rd_69_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_67 <= to_unsigned(0, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_67 <= tmp_66;
      END IF;
    END IF;
  END PROCESS rd_69_process;


  p157tmp_sub_temp <= resize(tmp_56, 21) - 10;
  tmp_68 <= signed(resize(p157tmp_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));

  
  alpha_relop1 <= '1' WHEN tmp_30 > tmp_68 ELSE
      '0';

  
  tmp_69 <= to_unsigned(0, 20) WHEN alpha_relop1 = '1' ELSE
      tmp_67;

  tmp_65 <= tmp_69;

  -- too much noise, raise cieling.
  tmp_64 <= tmp_65 + 1;

  p189_cast <= resize(tmp_11, 25);
  p189_cast_1 <=  - (p189_cast);
  
  p189_tmp <= p189_cast_1(23 DOWNTO 0) WHEN tmp_11 < 0 ELSE
      tmp_11;
  p189_cast_2 <= resize(p189_tmp, 34);
  p189_add_temp <= 50 + resize(tmp_56, 21);
  p189_cast_3 <= signed(resize(p189_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p189_tmp_2 <= tmp_65 WHEN p189_cast_2 > p189_cast_3 ELSE
      tmp_64;
  
  p189_tmp_1 <= tmp_60 WHEN p189_cast_2 > p189_cast_3 ELSE
      tmp_59;
  p189_cast_4 <= resize(tmp_42, 25);
  p189_cast_5 <=  - (p189_cast_4);
  
  p189_tmp_3 <= p189_cast_5(23 DOWNTO 0) WHEN tmp_42 < 0 ELSE
      tmp_42;
  p189_cast_6 <= resize(p189_tmp_3, 34);
  p189_add_temp_1 <= 50 + resize(tmp_56, 21);
  p189_cast_7 <= signed(resize(p189_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p189_tmp_5 <= p189_tmp_2 WHEN p189_cast_6 > p189_cast_7 ELSE
      p189_tmp_2 + 1;
  
  p189_tmp_4 <= p189_tmp_1 + 1 WHEN p189_cast_6 > p189_cast_7 ELSE
      p189_tmp_1;
  
  p189_tmp_6 <= tmp_57 WHEN p189_tmp_4 > 10 ELSE
      tmp_56;
  
  p189_tmp_7 <= p189_tmp_6 - 10 WHEN p189_tmp_5 > 100000 ELSE
      p189_tmp_6;
  
  tmp_70 <= p189_tmp_7 WHEN tmp_24 = '1' ELSE
      tmp_56;

  tmp_71 <= tmp_70;

  rd_70_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_56 <= to_unsigned(0, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_56 <= tmp_71;
      END IF;
    END IF;
  END PROCESS rd_70_process;


  rd_72_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_73 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_73 <= tmp_72;
      END IF;
    END IF;
  END PROCESS rd_72_process;


  tmp_74 <= tmp_72;

  multiplier_cast_5 <= signed(resize(tmp_18, 15));
  multiplier_mul_temp_5 <= multiplier_cast_5 * tmp_74;
  tmp_75 <= multiplier_mul_temp_5(37 DOWNTO 0);

  tmp_76 <= resize(tmp_75, 39);

  rd_71_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_77 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_77 <= tmp_76;
      END IF;
    END IF;
  END PROCESS rd_71_process;


  tmp_78 <= tmp_77 + tmp_22;

  i_dc <= tmp_78(35 DOWNTO 12);

  p179_cast <= resize(tmp_11, 25);
  p179_cast_1 <=  - (p179_cast);
  
  p179_tmp <= p179_cast_1(23 DOWNTO 0) WHEN tmp_11 < 0 ELSE
      tmp_11;
  p179_cast_2 <= resize(p179_tmp, 34);
  p179_add_temp <= 50 + resize(tmp_56, 21);
  p179_cast_3 <= signed(resize(p179_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p179_tmp_1 <= to_signed(0, 24) WHEN p179_cast_2 > p179_cast_3 ELSE
      i_dc;
  
  tmp_79 <= p179_tmp_1 WHEN tmp_1 = '1' ELSE
      tmp_73;

  tmp_72 <= tmp_79;

  p167i_out_sub_cast <= resize(i_in_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p167i_out_sub_cast_1 <= resize(tmp_72, 25);
  p167i_out_sub_temp <= p167i_out_sub_cast - p167i_out_sub_cast_1;
  i_out_1 <= p167i_out_sub_temp(23 DOWNTO 12);

  i_out_2 <= i_out_1;

  rd_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_58_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_58_reg(0) <= i_out_2;
        rd_58_reg(1 TO 2) <= rd_58_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_58_process;

  i_out_tmp <= rd_58_reg(2);

  i_out <= std_logic_vector(i_out_tmp);

  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_in_1 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_in_1 <= q_in_signed;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  
  tmp_80 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_81 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_81 <= tmp_80;
      END IF;
    END IF;
  END PROCESS rd_50_process;


  p213tmp_sub_cast <= resize(alpha, 14);
  tmp_82 <= 4096 - p213tmp_sub_cast;

  tmp_83 <= alpha;

  multiplier_cast_6 <= signed(resize(tmp_83, 13));
  multiplier_mul_temp_6 <= multiplier_cast_6 * q_in_signed;
  tmp_84 <= multiplier_mul_temp_6(23 DOWNTO 0);

  tmp_85 <= resize(tmp_84 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_86 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_86 <= tmp_85;
      END IF;
    END IF;
  END PROCESS rd_57_process;


  rd_74_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_88 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_88 <= tmp_87;
      END IF;
    END IF;
  END PROCESS rd_74_process;


  tmp_89 <= tmp_87;

  multiplier_cast_7 <= signed(resize(tmp_82, 15));
  multiplier_mul_temp_7 <= multiplier_cast_7 * tmp_89;
  tmp_90 <= multiplier_mul_temp_7(37 DOWNTO 0);

  tmp_91 <= resize(tmp_90, 39);

  rd_73_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_92 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_92 <= tmp_91;
      END IF;
    END IF;
  END PROCESS rd_73_process;


  tmp_93 <= tmp_92 + tmp_86;

  q_dc <= tmp_93(35 DOWNTO 12);

  p182_cast <= resize(tmp_42, 25);
  p182_cast_1 <=  - (p182_cast);
  
  p182_tmp <= p182_cast_1(23 DOWNTO 0) WHEN tmp_42 < 0 ELSE
      tmp_42;
  p182_cast_2 <= resize(p182_tmp, 34);
  p182_add_temp <= 50 + resize(tmp_56, 21);
  p182_cast_3 <= signed(resize(p182_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p182_tmp_1 <= to_signed(0, 24) WHEN p182_cast_2 > p182_cast_3 ELSE
      q_dc;
  
  tmp_94 <= p182_tmp_1 WHEN tmp_81 = '1' ELSE
      tmp_88;

  tmp_87 <= tmp_94;

  p166q_out_sub_cast <= resize(q_in_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p166q_out_sub_cast_1 <= resize(tmp_87, 25);
  p166q_out_sub_temp <= p166q_out_sub_cast - p166q_out_sub_cast_1;
  q_out_1 <= p166q_out_sub_temp(23 DOWNTO 12);

  q_out_2 <= q_out_1;

  rd_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_59_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_59_reg(0) <= q_out_2;
        rd_59_reg(1 TO 2) <= rd_59_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_59_process;

  q_out_tmp <= rd_59_reg(2);

  q_out <= std_logic_vector(q_out_tmp);

  
  tmp_95 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  
  tmp_96 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_30_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_30_reg(0) <= tmp_96;
        rd_30_reg(1 TO 2) <= rd_30_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_30_process;

  tmp_97 <= rd_30_reg(2);

  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- RSSI Estimation
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  tmp_98 <= i_out_1 * i_out_1;

  tmp_99 <= resize(tmp_98, 25);

  rd_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_100 <= to_signed(0, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_100 <= tmp_99;
      END IF;
    END IF;
  END PROCESS rd_45_process;


  tmp_101 <= q_out_1 * q_out_1;

  tmp_102 <= resize(tmp_101, 25);

  rd_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_103 <= to_signed(0, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_103 <= tmp_102;
      END IF;
    END IF;
  END PROCESS rd_44_process;


  tmp_104 <= tmp_100 + tmp_103;

  rssi_inst <= unsigned(tmp_104(22 DOWNTO 0));

  
  tmp_105 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_106 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_106 <= tmp_105;
      END IF;
    END IF;
  END PROCESS rd_35_process;


  rd_63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_107 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_107 <= tmp_10;
      END IF;
    END IF;
  END PROCESS rd_63_process;


  
  tmp_108 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  rd_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_109 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_109 <= tmp_108;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  rd_75_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_111 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_111 <= tmp_110;
      END IF;
    END IF;
  END PROCESS rd_75_process;


  counter <= tmp_112 + 1;

  
  p130_tmp <= to_unsigned(0, 9) WHEN (counter >= 256) AND (tmp_107 < 204800) ELSE
      counter;
  
  tmp_113 <= to_unsigned(0, 9) WHEN tmp_106 = '1' ELSE
      p130_tmp;

  
  tmp_114 <= '1' WHEN tmp_112 /= 0 ELSE
      '0';

  
  tmp_115 <= tmp_113 WHEN tmp_114 = '1' ELSE
      tmp_112;

  
  tmp_116 <= tmp_115 WHEN tmp_97 = '1' ELSE
      tmp_111;

  tmp_110 <= tmp_116;

  
  tmp_117 <= '1' WHEN tmp_110 = 0 ELSE
      '0';

  rd_76_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_118 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_118 <= tmp_117;
      END IF;
    END IF;
  END PROCESS rd_76_process;


  tmp_119 <= tmp_118 AND tmp_109;

  
  tmp_112 <= to_unsigned(1, 9) WHEN tmp_119 = '1' ELSE
      tmp_111;

  
  tmp_120 <= '1' WHEN tmp_112 /= 0 ELSE
      '0';

  
  tmp_121 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_122 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_122 <= tmp_121;
      END IF;
    END IF;
  END PROCESS rd_38_process;


  
  tmp_123 <= '1' WHEN tmp_110 = 0 ELSE
      '0';

  rd_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_124 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_124 <= tmp_123;
      END IF;
    END IF;
  END PROCESS rd_43_process;


  
  tmp_125 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  rd_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_126 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_126 <= tmp_125;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  tmp_127 <= tmp_124 AND tmp_126;

  
  tmp_128 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_31_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_31_reg(0) <= tmp_128;
        rd_31_reg(1 TO 2) <= rd_31_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_31_process;

  tmp_129 <= rd_31_reg(2);

  
  tmp_130 <= '1' WHEN tmp_112 /= 0 ELSE
      '0';

  
  tmp_131 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_132 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_132 <= tmp_131;
      END IF;
    END IF;
  END PROCESS rd_36_process;


  tmp_133 <= resize(rssi_inst, 33);

  rd_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_134 <= to_unsigned(0, 33);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_134 <= tmp_133;
      END IF;
    END IF;
  END PROCESS rd_40_process;


  
  tmp_137 <= tmp_136 WHEN tmp_132 = '1' ELSE
      tmp_135;

  
  tmp_138 <= tmp_137 WHEN tmp_130 = '1' ELSE
      tmp_136;

  
  tmp_139 <= tmp_138 WHEN tmp_129 = '1' ELSE
      rssi_sum;

  tmp_140 <= tmp_139;

  rssi_sum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_sum <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_sum <= tmp_140;
      END IF;
    END IF;
  END PROCESS rssi_sum_reg_process;


  
  tmp_136 <= to_unsigned(0, 32) WHEN tmp_127 = '1' ELSE
      rssi_sum;

  tmp_141 <= resize(tmp_136, 33);

  tmp_142 <= tmp_141 + tmp_134;

  tmp_135 <= tmp_142(31 DOWNTO 0);

  rssi_out_1 <= to_unsigned(0, 24);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= rssi_out_1;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  rssi_out_2 <= delayMatch_reg(1);

  p136_cast <= tmp_135 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p136_cast_1 <= p136_cast srl 8;
  p136_add_cast <= resize(p136_cast_1(39 DOWNTO 7), 34);
  p136_add_temp <= p136_add_cast + to_unsigned(1, 34);
  p136_cast_2 <= p136_add_temp(33 DOWNTO 1);
  
  p136_tmp <= p136_cast_2(23 DOWNTO 0) WHEN (counter >= 256) AND (tmp_107 < 204800) ELSE
      rssi_out_2;
  
  tmp_143 <= rssi_out_2 WHEN tmp_122 = '1' ELSE
      p136_tmp;

  rd_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_33_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_33_reg(0) <= tmp_95;
        rd_33_reg(1 TO 2) <= rd_33_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_33_process;

  tmp_144 <= rd_33_reg(2);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_1 <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_1(0) <= rssi_out_1;
        delayMatch_reg_1(1) <= delayMatch_reg_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;

  rssi_out_3 <= delayMatch_reg_1(1);

  
  tmp_145 <= tmp_143 WHEN tmp_120 = '1' ELSE
      rssi_out_3;

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_2 <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_2(0) <= rssi_out_1;
        delayMatch_reg_2(1) <= delayMatch_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;

  rssi_out_4 <= delayMatch_reg_2(1);

  
  tmp_146 <= tmp_145 WHEN tmp_144 = '1' ELSE
      rssi_out_4;

  rssi_out_5 <= tmp_146;

  rd_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_out_tmp <= to_unsigned(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_out_tmp <= rssi_out_5;
      END IF;
    END IF;
  END PROCESS rd_61_process;


  rssi_out <= std_logic_vector(rssi_out_tmp);

  
  tmp_147 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  
  tmp_148 <= '1' WHEN tmp_112 /= 0 ELSE
      '0';

  
  tmp_149 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_150 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_150 <= tmp_149;
      END IF;
    END IF;
  END PROCESS rd_37_process;


  rssi_en_out_1 <= '0';

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_3(0) <= rssi_en_out_1;
        delayMatch_reg_3(1) <= delayMatch_reg_3(0);
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;

  rssi_en_out_2 <= delayMatch_reg_3(1);

  
  p134_tmp <= '1' WHEN (counter >= 256) AND (tmp_107 < 204800) ELSE
      rssi_en_out_2;
  
  tmp_151 <= rssi_en_out_2 WHEN tmp_150 = '1' ELSE
      p134_tmp;

  rd_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_32_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_32_reg(0) <= tmp_147;
        rd_32_reg(1 TO 2) <= rd_32_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_32_process;

  tmp_152 <= rd_32_reg(2);

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_4 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_4(0) <= rssi_en_out_1;
        delayMatch_reg_4(1) <= delayMatch_reg_4(0);
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;

  rssi_en_out_3 <= delayMatch_reg_4(1);

  
  tmp_153 <= tmp_151 WHEN tmp_148 = '1' ELSE
      rssi_en_out_3;

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_5 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_5(0) <= rssi_en_out_1;
        delayMatch_reg_5(1) <= delayMatch_reg_5(0);
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;

  rssi_en_out_4 <= delayMatch_reg_5(1);

  
  tmp_154 <= tmp_153 WHEN tmp_152 = '1' ELSE
      rssi_en_out_4;

  rssi_en_out_5 <= tmp_154;

  rd_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_en_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_en_out <= rssi_en_out_5;
      END IF;
    END IF;
  END PROCESS rd_60_process;


  
  tmp_155 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  
  tmp_156 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_8_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_8_reg(0) <= tmp_156;
        rd_8_reg(1 TO 3) <= rd_8_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_8_process;

  tmp_157 <= rd_8_reg(3);

  
  tmp_158 <= '1' WHEN gain_en_in = '0' ELSE
      '0';

  rd_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_15_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_15_reg(0) <= tmp_158;
        rd_15_reg(1 TO 3) <= rd_15_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_15_process;

  tmp_159 <= rd_15_reg(3);

  -- dir_out = 0 - do nothing
  -- dir_out = 1 - increase
  -- dir_out = 2 - decrease
  
  tmp_160 <= '1' WHEN i_in_signed < 0 ELSE
      '0';

  tmp_161 <= i_in_signed;

  p220tmp_1 <=  - (resize(i_in_signed, 13));
  tmp_162 <= p220tmp_1(11 DOWNTO 0);

  
  tmp_163 <= tmp_162 WHEN tmp_160 = '1' ELSE
      tmp_161;

  ai <= unsigned(tmp_163(10 DOWNTO 0));

  
  tmp_164 <= '1' WHEN ai > 1500 ELSE
      '0';

  rd_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_165 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_165 <= tmp_164;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  
  tmp_166 <= '1' WHEN q_in_signed < 0 ELSE
      '0';

  tmp_167 <= q_in_signed;

  --spssa
  -- see if the MCU has done something and if so reset
  -- decrease
  -- this overrides anything else
  -- we're saturating the ADC so decrease gain
  --too high - decrease
  --too low - increase
  -- wait for some action and the processor is done (only runs when AGC function called)
  p222tmp_1 <=  - (resize(q_in_signed, 13));
  tmp_168 <= p222tmp_1(11 DOWNTO 0);

  
  tmp_169 <= tmp_168 WHEN tmp_166 = '1' ELSE
      tmp_167;

  aq <= unsigned(tmp_169(10 DOWNTO 0));

  
  tmp_170 <= '1' WHEN aq > 1500 ELSE
      '0';

  rd_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_171 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_171 <= tmp_170;
      END IF;
    END IF;
  END PROCESS rd_20_process;


  tmp_172 <= tmp_165 OR tmp_171;

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_5_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_5_reg(0) <= tmp_172;
        rd_5_reg(1 TO 2) <= rd_5_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_5_process;

  tmp_173 <= rd_5_reg(2);

  
  tmp_174 <= '1' WHEN tmp_154 = '1' ELSE
      '0';

  rd_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_175 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_175 <= tmp_174;
      END IF;
    END IF;
  END PROCESS rd_24_process;


  
  tmp_176 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  rd_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_34_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_34_reg(0) <= tmp_176;
        rd_34_reg(1 TO 2) <= rd_34_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_34_process;

  tmp_177 <= rd_34_reg(2);

  
  tmp_178 <= '1' WHEN tmp_112 /= 0 ELSE
      '0';

  
  tmp_179 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_180 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_180 <= tmp_179;
      END IF;
    END IF;
  END PROCESS rd_39_process;


  rssiHold_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssiHold <= to_unsigned(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssiHold <= tmp_181;
      END IF;
    END IF;
  END PROCESS rssiHold_reg_process;


  p138_cast <= tmp_135 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p138_cast_1 <= p138_cast srl 8;
  p138_add_cast <= resize(p138_cast_1(39 DOWNTO 7), 34);
  p138_add_temp <= p138_add_cast + to_unsigned(1, 34);
  p138_cast_2 <= p138_add_temp(33 DOWNTO 1);
  
  p138_tmp <= p138_cast_2(23 DOWNTO 0) WHEN (counter >= 256) AND (tmp_107 < 204800) ELSE
      rssiHold;
  
  tmp_182 <= rssiHold WHEN tmp_180 = '1' ELSE
      p138_tmp;

  
  tmp_183 <= tmp_182 WHEN tmp_178 = '1' ELSE
      rssiHold;

  
  tmp_184 <= tmp_183 WHEN tmp_177 = '1' ELSE
      rssiHold;

  tmp_181 <= tmp_184;

  tmp_185 <= tmp_9;

  tmp_186 <= tmp_40;

  tmp_187 <= tmp_9;

  tmp_188 <= tmp_185 * tmp_187;

  tmp_189 <= resize(tmp_188, 49);

  tmp_190 <= tmp_40;

  tmp_191 <= tmp_186 * tmp_190;

  tmp_192 <= resize(tmp_191, 49);

  tmp_193 <= tmp_189 + tmp_192;

  rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_4_reg <= (OTHERS => to_signed(0, 49));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_4_reg(0) <= tmp_193;
        rd_4_reg(1) <= rd_4_reg(0);
      END IF;
    END IF;
  END PROCESS rd_4_process;

  tmp_194 <= rd_4_reg(1);

  -- only increase power if the rssi is away from the mean
  p86c_sub_cast <= signed(resize(tmp_181 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 50));
  p86c_sub_cast_1 <= resize(tmp_194, 50);
  c <= p86c_sub_cast - p86c_sub_cast_1;

  rd_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_1 <= to_signed(0, 50);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        c_1 <= c;
      END IF;
    END IF;
  END PROCESS rd_26_process;


  
  tmp_195 <= '1' WHEN c_1 < to_signed(0, 50) ELSE
      '0';

  tmp_196 <= c;

  rd_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_197 <= to_signed(0, 50);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_197 <= tmp_196;
      END IF;
    END IF;
  END PROCESS rd_25_process;


  p85tmp_cast <= resize(c_1, 51);
  p85tmp_cast_1 <=  - (p85tmp_cast);
  tmp_198 <= p85tmp_cast_1(49 DOWNTO 0);

  
  tmp_199 <= tmp_198 WHEN tmp_195 = '1' ELSE
      tmp_197;

  rssi_diff <= unsigned(tmp_199(47 DOWNTO 24));

  rssi_high_goal_in_unsigned <= unsigned(rssi_high_goal_in);

  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_3_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_3_reg(0) <= rssi_high_goal_in_unsigned;
        rd_3_reg(1 TO 3) <= rd_3_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_3_process;

  rssi_high_goal_in_1 <= rd_3_reg(3);

  
  alpha_relop1_1 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  rssi_low_goal_in_unsigned <= unsigned(rssi_low_goal_in);

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_2_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_2_reg(0) <= rssi_low_goal_in_unsigned;
        rd_2_reg(1 TO 3) <= rd_2_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_2_process;

  rssi_low_goal_in_1 <= rd_2_reg(3);

  
  alpha_relop1_2 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  
  tmp_200 <= '1' WHEN gain_en_in = '1' ELSE
      '0';

  rd_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_29_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_29_reg(0) <= tmp_200;
        rd_29_reg(1 TO 2) <= rd_29_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_29_process;

  tmp_201 <= rd_29_reg(2);

  
  tmp_203 <= '0' WHEN tmp_201 = '1' ELSE
      tmp_202;

  rd_77_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_204 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_204 <= tmp_203;
      END IF;
    END IF;
  END PROCESS rd_77_process;


  rd_79_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_205 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_205 <= tmp_202;
      END IF;
    END IF;
  END PROCESS rd_79_process;


  
  tmp_206 <= '1' WHEN alpha_relop1_2 = '1' ELSE
      tmp_205;

  
  tmp_207 <= '1' WHEN alpha_relop1_1 = '1' ELSE
      tmp_206;

  
  tmp_208 <= tmp_207 WHEN tmp_175 = '1' ELSE
      tmp_205;

  
  tmp_209 <= '1' WHEN tmp_173 = '1' ELSE
      tmp_208;

  
  tmp_210 <= tmp_209 WHEN tmp_159 = '1' ELSE
      tmp_205;

  tmp_211 <= tmp_202;

  rd_78_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_212 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_212 <= tmp_211;
      END IF;
    END IF;
  END PROCESS rd_78_process;


  p48_output : PROCESS (tmp_212, tmp_210, tmp_204)
    VARIABLE tmp213 : std_logic;
  BEGIN

    CASE tmp_212 IS
      WHEN '0' =>
        tmp213 := tmp_210;
      WHEN '1' =>
        tmp213 := tmp_204;
      WHEN OTHERS => 
        tmp213 := '0';
    END CASE;

    tmp_214 <= tmp213;
  END PROCESS p48_output;


  
  tmp_215 <= tmp_214 WHEN tmp_157 = '1' ELSE
      tmp_205;

  tmp_202 <= tmp_215;

  tmp_216 <= tmp_202;

  
  tmp_217 <= '1' WHEN gain_en_in = '0' ELSE
      '0';

  
  tmp_218 <= '1' WHEN ai > 1500 ELSE
      '0';

  rd_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_219 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_219 <= tmp_218;
      END IF;
    END IF;
  END PROCESS rd_17_process;


  
  tmp_220 <= '1' WHEN aq > 1500 ELSE
      '0';

  rd_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_221 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_221 <= tmp_220;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  tmp_222 <= tmp_219 OR tmp_221;

  
  tmp_223 <= '1' WHEN tmp_154 = '1' ELSE
      '0';

  
  alpha_relop1_3 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- Gain Correction
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  dir_out_1 <= to_unsigned(0, 2);

  rd_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_224 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_224 <= tmp_223;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  
  alpha_relop1_4 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_6 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_6(0) <= dir_out_1;
        delayMatch_reg_6(1) <= delayMatch_reg_6(0);
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;

  dir_out_2 <= delayMatch_reg_6(1);

  
  tmp_225 <= to_unsigned(1, 2) WHEN alpha_relop1_3 = '1' ELSE
      dir_out_2;

  
  tmp_226 <= to_unsigned(2, 2) WHEN alpha_relop1_4 = '1' ELSE
      tmp_225;

  rd_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_13_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_13_reg(0) <= tmp_217;
        rd_13_reg(1 TO 3) <= rd_13_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_13_process;

  tmp_227 <= rd_13_reg(3);

  rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_7_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_7_reg(0) <= tmp_222;
        rd_7_reg(1 TO 2) <= rd_7_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_7_process;

  tmp_228 <= rd_7_reg(2);

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_7 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_7(0) <= dir_out_1;
        delayMatch_reg_7(1) <= delayMatch_reg_7(0);
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;

  dir_out_3 <= delayMatch_reg_7(1);

  
  tmp_229 <= tmp_226 WHEN tmp_224 = '1' ELSE
      dir_out_3;

  
  tmp_230 <= to_unsigned(2, 2) WHEN tmp_228 = '1' ELSE
      tmp_229;

  rd_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_231 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_231 <= tmp_216;
      END IF;
    END IF;
  END PROCESS rd_11_process;


  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_8 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_8(0) <= dir_out_1;
        delayMatch_reg_8(1) <= delayMatch_reg_8(0);
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;

  dir_out_4 <= delayMatch_reg_8(1);

  
  tmp_232 <= tmp_230 WHEN tmp_227 = '1' ELSE
      dir_out_4;

  
  tmp_233 <= '1' WHEN gain_en_in = '1' ELSE
      '0';

  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_9 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_9(0) <= dir_out_1;
        delayMatch_reg_9(1) <= delayMatch_reg_9(0);
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;

  dir_out_5 <= delayMatch_reg_9(1);

  
  tmp_234 <= to_unsigned(0, 2) WHEN tmp_233 = '1' ELSE
      dir_out_5;

  rd_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_27_reg <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_27_reg(0) <= tmp_234;
        rd_27_reg(1 TO 3) <= rd_27_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_27_process;

  tmp_235 <= rd_27_reg(3);

  rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_9_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_9_reg(0) <= tmp_155;
        rd_9_reg(1 TO 3) <= rd_9_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_9_process;

  tmp_236 <= rd_9_reg(3);

  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_10 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_10(0) <= dir_out_1;
        delayMatch_reg_10(1) <= delayMatch_reg_10(0);
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;

  dir_out_6 <= delayMatch_reg_10(1);

  p50_output : PROCESS (tmp_231, tmp_232, tmp_235, dir_out_6)
    VARIABLE tmp237 : unsigned(1 DOWNTO 0);
  BEGIN

    CASE tmp_231 IS
      WHEN '0' =>
        tmp237 := tmp_232;
      WHEN '1' =>
        tmp237 := tmp_235;
      WHEN OTHERS => 
        tmp237 := dir_out_6;
    END CASE;

    tmp_238 <= tmp237;
  END PROCESS p50_output;


  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_11 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_11(0) <= dir_out_1;
        delayMatch_reg_11(1) <= delayMatch_reg_11(0);
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;

  dir_out_7 <= delayMatch_reg_11(1);

  
  tmp_239 <= tmp_238 WHEN tmp_236 = '1' ELSE
      dir_out_7;

  dir_out_8 <= tmp_239;

  dir_out <= std_logic_vector(dir_out_8);

  
  tmp_240 <= '1' WHEN rx_en_in = '1' ELSE
      '0';

  tmp_241 <= tmp_202;

  
  tmp_242 <= '1' WHEN gain_en_in = '0' ELSE
      '0';

  
  tmp_243 <= '1' WHEN ai > 1500 ELSE
      '0';

  rd_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_244 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_244 <= tmp_243;
      END IF;
    END IF;
  END PROCESS rd_19_process;


  
  tmp_245 <= '1' WHEN aq > 1500 ELSE
      '0';

  rd_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_246 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_246 <= tmp_245;
      END IF;
    END IF;
  END PROCESS rd_18_process;


  tmp_247 <= tmp_244 OR tmp_246;

  
  tmp_248 <= '1' WHEN tmp_154 = '1' ELSE
      '0';

  
  alpha_relop1_5 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  dir_en_out_1 <= '0';

  rd_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_249 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_249 <= tmp_248;
      END IF;
    END IF;
  END PROCESS rd_23_process;


  
  alpha_relop1_6 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_12 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_12(0) <= dir_en_out_1;
        delayMatch_reg_12(1) <= delayMatch_reg_12(0);
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;

  dir_en_out_2 <= delayMatch_reg_12(1);

  
  tmp_250 <= '1' WHEN alpha_relop1_5 = '1' ELSE
      dir_en_out_2;

  
  tmp_251 <= '1' WHEN alpha_relop1_6 = '1' ELSE
      tmp_250;

  rd_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_14_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_14_reg(0) <= tmp_242;
        rd_14_reg(1 TO 3) <= rd_14_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_14_process;

  tmp_252 <= rd_14_reg(3);

  rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_6_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_6_reg(0) <= tmp_247;
        rd_6_reg(1 TO 2) <= rd_6_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  tmp_253 <= rd_6_reg(2);

  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_13 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_13(0) <= dir_en_out_1;
        delayMatch_reg_13(1) <= delayMatch_reg_13(0);
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;

  dir_en_out_3 <= delayMatch_reg_13(1);

  
  tmp_254 <= tmp_251 WHEN tmp_249 = '1' ELSE
      dir_en_out_3;

  
  tmp_255 <= '1' WHEN tmp_253 = '1' ELSE
      tmp_254;

  rd_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_256 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_256 <= tmp_241;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_14 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_14(0) <= dir_en_out_1;
        delayMatch_reg_14(1) <= delayMatch_reg_14(0);
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;

  dir_en_out_4 <= delayMatch_reg_14(1);

  
  tmp_257 <= tmp_255 WHEN tmp_252 = '1' ELSE
      dir_en_out_4;

  
  tmp_258 <= '1' WHEN gain_en_in = '1' ELSE
      '0';

  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_15 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_15(0) <= dir_en_out_1;
        delayMatch_reg_15(1) <= delayMatch_reg_15(0);
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;

  dir_en_out_5 <= delayMatch_reg_15(1);

  
  tmp_259 <= '1' WHEN tmp_258 = '1' ELSE
      dir_en_out_5;

  rd_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_28_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_28_reg(0) <= tmp_259;
        rd_28_reg(1 TO 3) <= rd_28_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_28_process;

  tmp_260 <= rd_28_reg(3);

  rd_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_10_reg(0) <= tmp_240;
        rd_10_reg(1 TO 3) <= rd_10_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_10_process;

  tmp_261 <= rd_10_reg(3);

  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_16 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_16(0) <= dir_en_out_1;
        delayMatch_reg_16(1) <= delayMatch_reg_16(0);
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;

  dir_en_out_6 <= delayMatch_reg_16(1);

  p52_output : PROCESS (tmp_256, tmp_257, tmp_260, dir_en_out_6)
    VARIABLE tmp262 : std_logic;
  BEGIN

    CASE tmp_256 IS
      WHEN '0' =>
        tmp262 := tmp_257;
      WHEN '1' =>
        tmp262 := tmp_260;
      WHEN OTHERS => 
        tmp262 := dir_en_out_6;
    END CASE;

    tmp_263 <= tmp262;
  END PROCESS p52_output;


  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_17 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_17(0) <= dir_en_out_1;
        delayMatch_reg_17(1) <= delayMatch_reg_17(0);
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;

  dir_en_out_7 <= delayMatch_reg_17(1);

  
  tmp_264 <= tmp_263 WHEN tmp_261 = '1' ELSE
      dir_en_out_7;

  dir_en_out_8 <= tmp_264;

  dir_en_out <= dir_en_out_8;

  ce_out <= ce;

END rtl;

