-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\Chilipepper\Labs\Lab_9\MATLAB\codegen\qpsk_tx\hdlsrc\qpsk_tx_FixPt.vhd
-- Created: 2013-05-30 16:57:41
-- 
-- Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- re_byte_out                   ce_out        1
-- tx_done_out                   ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: qpsk_tx_FixPt
-- Source Path: qpsk_tx_FixPt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.qpsk_tx_FixPt_pkg.ALL;

ENTITY qpsk_tx_FixPt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        ce                                :   IN    std_logic;
        data_in                           :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
        empty_in                          :   IN    std_logic;  -- ufix1
        clear_fifo_in                     :   IN    std_logic;  -- ufix1
        tx_en_in                          :   IN    std_logic;  -- ufix1
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        re_byte_out                       :   OUT   std_logic;  -- ufix1
        tx_done_out                       :   OUT   std_logic  -- ufix1
        );
END qpsk_tx_FixPt;


ARCHITECTURE rtl OF qpsk_tx_FixPt IS

  -- Component Declarations
  COMPONENT tx_fifo_ram
    PORT( clk                             :   IN    std_logic;
          enb                             :   IN    std_logic;
          wr_din                          :   IN    std_logic_vector(7 DOWNTO 0);  -- ufix8
          wr_addr                         :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          wr_en                           :   IN    std_logic;  -- ufix1
          rd_addr                         :   IN    std_logic_vector(9 DOWNTO 0);  -- ufix10
          rd_dout                         :   OUT   std_logic_vector(7 DOWNTO 0)  -- ufix8
          );
  END COMPONENT;

  -- Component Configuration Statements
  FOR ALL : tx_fifo_ram
    USE ENTITY work.tx_fifo_ram(rtl);

  -- Constants
  CONSTANT tbi                            : vector_of_signed2(0 TO 64) := ( to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2) );  -- sfix2 [65]
  CONSTANT tbq                            : vector_of_signed2(0 TO 64) := ( to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2) );  -- sfix2 [65]
  CONSTANT tbi_2                          : vector_of_signed2(0 TO 64) := ( to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2) );  -- sfix2 [65]
  CONSTANT tbq_2                          : vector_of_signed2(0 TO 64) := ( to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(1, 2), 
                                                                          to_signed(1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(-1, 2), to_signed(-1, 2), 
                                                                          to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2), to_signed(1, 2), to_signed(-1, 2) );  -- sfix2 [65]
  CONSTANT nc                             : vector_of_signed13(0 TO 16) := ( to_signed(27, 13), to_signed(-24, 13), to_signed(-49, 13), to_signed(84, 13), to_signed(68, 13), 
                                                                           to_signed(-220, 13), to_signed(-83, 13), to_signed(802, 13), to_signed(1379, 13), to_signed(802, 13), 
                                                                           to_signed(-83, 13), to_signed(-220, 13), to_signed(68, 13), to_signed(84, 13), to_signed(-49, 13), 
                                                                           to_signed(-24, 13), to_signed(27, 13) );  -- sfix13 [17]

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL c_re                             : signed(19 DOWNTO 0);  -- sfix20_En12
  SIGNAL c_im                             : signed(19 DOWNTO 0);  -- sfix20_En12
  SIGNAL c_re_1                           : signed(19 DOWNTO 0);  -- sfix20_En12
  SIGNAL c_im_1                           : signed(19 DOWNTO 0);  -- sfix20_En12
  SIGNAL c_re_2                           : signed(19 DOWNTO 0);  -- sfix20_En12
  SIGNAL c_im_2                           : signed(19 DOWNTO 0);  -- sfix20_En12
  SIGNAL tmp                              : vector_of_signed32(0 TO 15);  -- int32 [16]
  SIGNAL tmp_1                            : vector_of_signed32(0 TO 15);  -- int32 [16]
  SIGNAL tmp_2                            : vector_of_signed32(0 TO 15);  -- int32 [16]
  SIGNAL empty_in_1                       : std_logic;  -- ufix1
  SIGNAL empty_in_2                       : std_logic;  -- ufix1
  SIGNAL tx_en_in_1                       : std_logic;  -- ufix1
  SIGNAL tx_en_in_2                       : std_logic;  -- ufix1
  SIGNAL clear_fifo_in_1                  : std_logic;  -- ufix1
  SIGNAL tmp_3                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_4                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_5                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_6                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_7                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_8                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL reBuf                            : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_9                            : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_10                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_11                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_12                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL wrCount                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_13                           : std_logic;  -- ufix1
  SIGNAL count                            : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_14                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL rdCount                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL sentTrain                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_15                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p49_tmp                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p49_tmp_1                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p49_tmp_2                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_16                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_17                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_18                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_1                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_19                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_20                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_2                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_21                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_22                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p44_tmp                          : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p44_tmp_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_23                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_24                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_3                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_25                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_26                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_27                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p43_tmp                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p43_tmp_1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p43_tmp_2                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_28                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_29                           : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_30                           : std_logic;  -- ufix1
  SIGNAL p52_tmp                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL p52_tmp_1                        : std_logic;  -- ufix1
  SIGNAL p52_tmp_2                        : std_logic;  -- ufix1
  SIGNAL p52_tmp_3                        : std_logic;  -- ufix1
  SIGNAL tmp_31                           : std_logic;  -- ufix1
  SIGNAL tmp_32                           : std_logic;  -- ufix1
  SIGNAL txDone                           : std_logic;  -- ufix1
  SIGNAL tmp_33                           : std_logic;  -- ufix1
  SIGNAL iA                               : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_1                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL symIndex                         : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_34                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL tmp_35                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p51_tmp                          : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p51_tmp_1                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p51_tmp_2                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p51_tmp_3                        : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p51_div_temp                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p51_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p51_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p51_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p51_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p51_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p51_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_36                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL sym2                             : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL p73sym2_cast                     : unsigned(4 DOWNTO 0);  -- ufix5
  SIGNAL sym2_1                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL data_in_unsigned                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL wrIndex                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL wrIndex_1                        : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL data_in_1                        : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_37                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_38                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_39                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p115tmp_sub_cast                 : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig              : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tx_fifo_ram_wrenb                : std_logic;  -- ufix1
  SIGNAL rdIndex                          : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_40                           : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_41                           : signed(31 DOWNTO 0);  -- int32
  SIGNAL p87tmp_sub_cast                  : signed(31 DOWNTO 0);  -- int32
  SIGNAL indexLogic_fixptsig_1            : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL tx_fifo                          : std_logic_vector(7 DOWNTO 0);  -- ufix8
  SIGNAL tx_fifo_unsigned                 : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL data                             : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_42                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_43                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p57tmp_cast                      : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL p57tmp_cast_1                    : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL tmp_44                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p58tmp_cast                      : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL p58tmp_cast_1                    : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL tmp_45                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p59tmp_cast                      : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL p59tmp_cast_1                    : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL tmp_46                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p60tmp_cast                      : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL p60tmp_cast_1                    : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL tmp_47                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p61tmp_cast                      : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL p61tmp_cast_1                    : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL tmp_48                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p62tmp_cast                      : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL p62tmp_cast_1                    : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL tmp_49                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p63tmp_cast                      : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL p63tmp_cast_1                    : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL tmp_51                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL iA_2                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sym2_2                           : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL a                                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL c                                : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_52                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_1                              : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL c_1                              : unsigned(8 DOWNTO 0);  -- ufix9_En1
  SIGNAL tmp_53                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_2                              : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL c_2                              : unsigned(9 DOWNTO 0);  -- ufix10_En2
  SIGNAL tmp_54                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_3                              : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL c_3                              : unsigned(10 DOWNTO 0);  -- ufix11_En3
  SIGNAL tmp_55                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_4                              : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL c_4                              : unsigned(11 DOWNTO 0);  -- ufix12_En4
  SIGNAL tmp_56                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_5                              : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL c_5                              : unsigned(12 DOWNTO 0);  -- ufix13_En5
  SIGNAL tmp_57                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_6                              : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL c_6                              : unsigned(13 DOWNTO 0);  -- ufix14_En6
  SIGNAL tmp_58                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL a_7                              : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL c_7                              : unsigned(14 DOWNTO 0);  -- ufix15_En7
  SIGNAL tmp_59                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_61                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL iA_3                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL empty_in_3                       : std_logic;  -- ufix1
  SIGNAL tx_en_in_3                       : std_logic;  -- ufix1
  SIGNAL tmp_62                           : std_logic;  -- ufix1
  SIGNAL iA_4                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_5                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_6                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_1                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_4                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL diLatch                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_63                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p48_tmp                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p48_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p48_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p48_tmp_3                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p48_tmp_4                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p48_tmp_5                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p48_tmp_6                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p48_div_temp                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p48_div_temp_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p48_div_temp_2                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p48_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p48_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p48_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p48_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p48_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p48_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p48_sub_temp_1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p48_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p48_mul_temp_1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p48_sub_cast_3                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p48_sub_temp_2                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p48_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p48_cast_2                       : std_logic;  -- ufix1
  SIGNAL p48_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p48_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_64                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL empty_in_4                       : std_logic;  -- ufix1
  SIGNAL tx_en_in_4                       : std_logic;  -- ufix1
  SIGNAL tmp_65                           : std_logic;  -- ufix1
  SIGNAL iA_7                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_8                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_9                             : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL sentTrain_2                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_5                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL dqLatch                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL tmp_66                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p46_tmp                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p46_tmp_1                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p46_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p46_tmp_3                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p46_tmp_4                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p46_tmp_5                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p46_tmp_6                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p46_div_temp                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p46_div_temp_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p46_div_temp_2                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p46_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p46_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p46_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p46_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p46_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p46_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p46_sub_temp_1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p46_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p46_mul_temp_1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p46_sub_cast_3                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p46_sub_temp_2                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p46_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p46_cast_2                       : std_logic;  -- ufix1
  SIGNAL p46_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p46_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_67                           : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL iA_10                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL iA_11                            : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL fmo_1_re                         : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_im                         : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_re_1                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_im_1                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_re_2                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL fmo_1_im_2                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL sentTrain_3                      : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL count_6                          : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL tmp_re                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL tmp_im                           : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p42_tmp                          : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p42_tmp_1                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p42_tmp_2                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p42_tmp_3                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p42_tmp_4                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p42_tmp_5                        : signed(31 DOWNTO 0);  -- int32
  SIGNAL p42_tmp_6                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p42_tmp_7                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p42_tmp_8                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p42_tmp_9                        : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL p42_tmp_im                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p42_tmp_re                       : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p42_tmp_im_1                     : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p42_tmp_re_1                     : signed(2 DOWNTO 0);  -- sfix3
  SIGNAL p42_div_temp                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p42_div_temp_1                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p42_div_temp_2                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p42_div_temp_3                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p42_div_temp_4                   : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p42_cast                         : signed(8 DOWNTO 0);  -- sfix9
  SIGNAL p42_mul_temp                     : signed(40 DOWNTO 0);  -- sfix41
  SIGNAL p42_sub_cast                     : signed(31 DOWNTO 0);  -- int32
  SIGNAL p42_sub_cast_1                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p42_sub_temp                     : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p42_cast_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL p42_sub_temp_1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p42_sub_cast_2                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL p42_mul_temp_1                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p42_sub_cast_3                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p42_sub_temp_2                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p42_sub_temp_3                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p42_cast_2                       : std_logic;  -- ufix1
  SIGNAL p42_sub_cast_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p42_sub_temp_4                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p42_mul_temp_2                   : unsigned(9 DOWNTO 0);  -- ufix10
  SIGNAL p42_sub_cast_5                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p42_sub_temp_5                   : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p42_sub_temp_6                   : unsigned(7 DOWNTO 0);  -- uint8
  SIGNAL p42_cast_3                       : std_logic;  -- ufix1
  SIGNAL p42_sub_cast_6                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p42_sub_temp_7                   : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p42_sub_temp_8                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p42_sub_cast_7                   : signed(31 DOWNTO 0);  -- int32
  SIGNAL d_b2s_re                         : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL d_b2s_im                         : signed(1 DOWNTO 0);  -- sfix2
  SIGNAL buf_re                           : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL buf_im                           : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL buf_re_1                         : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL buf_im_1                         : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL tmp_re_1                         : vector_of_signed2(0 TO 15);  -- sfix2 [16]
  SIGNAL tmp_im_1                         : vector_of_signed2(0 TO 15);  -- sfix2 [16]
  SIGNAL tmp_re_2                         : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL tmp_im_2                         : vector_of_signed2(0 TO 16);  -- sfix2 [17]
  SIGNAL c_re_3                           : signed(19 DOWNTO 0);  -- sfix20_En12
  SIGNAL c_im_3                           : signed(19 DOWNTO 0);  -- sfix20_En12
  SIGNAL d_ssrc_re                        : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL d_ssrc_im                        : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL a0                               : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL c_8                              : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL tmp_68                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p18tmp_add_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p18tmp_add_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL tmp_69                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p19tmp_sub_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p19tmp_sub_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p19tmp_cast                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL tmp_70                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p17_cast                         : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL a0_1                             : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL c_9                              : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL tmp_71                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p12tmp_add_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p12tmp_add_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL tmp_72                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p13tmp_sub_cast                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p13tmp_sub_temp                  : signed(15 DOWNTO 0);  -- sfix16_En1
  SIGNAL p13tmp_cast                      : signed(15 DOWNTO 0);  -- sfix16
  SIGNAL tmp_73                           : signed(14 DOWNTO 0);  -- sfix15
  SIGNAL p11_cast                         : signed(25 DOWNTO 0);  -- sfix26_En12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL fmo_2                            : std_logic;  -- ufix1
  SIGNAL fmo_2_1                          : std_logic;  -- ufix1
  SIGNAL tmp_74                           : std_logic;  -- ufix1
  SIGNAL re_byte_b2s                      : std_logic;  -- ufix1
  SIGNAL re_byte_out_1                    : std_logic;  -- ufix1
  SIGNAL re_byte_out_2                    : std_logic;  -- ufix1
  SIGNAL re_byte_out_3                    : std_logic;  -- ufix1
  SIGNAL tmp_75                           : std_logic;  -- ufix1
  SIGNAL tx_done_b2s                      : std_logic;  -- ufix1
  SIGNAL tx_done_out_1                    : std_logic;  -- ufix1
  SIGNAL tx_done_out_2                    : std_logic;  -- ufix1
  SIGNAL tx_done_out_3                    : std_logic;  -- ufix1

BEGIN
  u_tx_fifo_ram : tx_fifo_ram
    PORT MAP( clk => clk,
              enb => ce,
              wr_din => std_logic_vector(tmp_37),  -- ufix8
              wr_addr => std_logic_vector(indexLogic_fixptsig),  -- ufix10
              wr_en => tx_fifo_ram_wrenb,  -- ufix1
              rd_addr => std_logic_vector(indexLogic_fixptsig_1),  -- ufix10
              rd_dout => tx_fifo  -- ufix8
              );

  c_re <= to_signed(0, 20);
  c_im <= to_signed(0, 20);

  enb <= ce;

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_re_1 <= to_signed(0, 20);
      c_im_1 <= to_signed(0, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        c_re_1 <= c_re;
        c_im_1 <= c_im;
      END IF;
    END IF;
  END PROCESS delayMatch_process;


  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      c_re_2 <= to_signed(0, 20);
      c_im_2 <= to_signed(0, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        c_re_2 <= c_re_1;
        c_im_2 <= c_im_1;
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;



  tmp_gen: FOR t_0 IN 0 TO 15 GENERATE
    tmp(t_0) <= to_signed(1 + t_0, 32);
  END GENERATE tmp_gen;


  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_1 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_1 <= tmp;
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;


  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_2 <= (OTHERS => to_signed(0, 32));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_2 <= tmp_1;
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;


  in_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      empty_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        empty_in_1 <= empty_in;
      END IF;
    END IF;
  END PROCESS in_1_pipe_process;


  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      empty_in_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        empty_in_2 <= empty_in_1;
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;


  in_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_1 <= tx_en_in;
      END IF;
    END IF;
  END PROCESS in_3_pipe_process;


  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_2 <= tx_en_in_1;
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;


  in_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      clear_fifo_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        clear_fifo_in_1 <= clear_fifo_in;
      END IF;
    END IF;
  END PROCESS in_2_pipe_process;


  tmp_4 <= tmp_3 - 1;

  
  tmp_3 <= to_unsigned(8, 4) WHEN (empty_in_1 = '0') AND (tmp_5 = 0) ELSE
      tmp_5;

  
  tmp_6 <= tmp_4 WHEN tmp_3 > 0 ELSE
      to_unsigned(0, 4);

  
  tmp_7 <= to_unsigned(0, 4) WHEN tmp_6 = 1 ELSE
      tmp_6;

  tmp_8 <= tmp_7;

  reBuf_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      reBuf <= to_unsigned(0, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        reBuf <= tmp_8;
      END IF;
    END IF;
  END PROCESS reBuf_reg_process;


  
  tmp_5 <= to_unsigned(0, 4) WHEN clear_fifo_in_1 = '1' ELSE
      reBuf;

  
  tmp_11 <= tmp_9 WHEN tmp_6 = 1 ELSE
      tmp_10;

  tmp_12 <= tmp_11;

  wrCount_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wrCount <= to_unsigned(0, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wrCount <= tmp_12;
      END IF;
    END IF;
  END PROCESS wrCount_reg_process;


  
  tmp_10 <= to_unsigned(0, 11) WHEN clear_fifo_in_1 = '1' ELSE
      wrCount;

  tmp_9 <= tmp_10 + 1;

  
  p49_tmp <= tmp_14 WHEN resize(count, 7) >= 32 ELSE
      rdCount;
  
  p49_tmp_1 <= rdCount WHEN sentTrain <= 89 ELSE
      p49_tmp;
  
  p49_tmp_2 <= rdCount WHEN sentTrain <= 24 ELSE
      p49_tmp_1;
  
  tmp_15 <= p49_tmp_2 WHEN ((empty_in_1 = '1') AND (tx_en_in_1 = '1')) AND (tmp_13 = '0') ELSE
      rdCount;

  
  tmp_16 <= tmp_9 WHEN tmp_6 = 1 ELSE
      tmp_15;

  tmp_17 <= tmp_16;

  rdCount_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rdCount <= to_unsigned(0, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rdCount <= tmp_17;
      END IF;
    END IF;
  END PROCESS rdCount_reg_process;


  tmp_14 <= rdCount - 1;

  --spssa
  --total number of bytes to send out
  tmp_18 <= sentTrain + 1;

  
  tmp_19 <= tmp_18 WHEN count_1 >= 8 ELSE
      sentTrain;

  tmp_20 <= sentTrain + 1;

  
  tmp_21 <= tmp_20 WHEN count_2 >= 8 ELSE
      sentTrain;

  
  p44_tmp <= tmp_21 WHEN sentTrain <= 89 ELSE
      sentTrain;
  
  p44_tmp_1 <= tmp_19 WHEN sentTrain <= 24 ELSE
      p44_tmp;
  
  tmp_22 <= p44_tmp_1 WHEN ((empty_in_1 = '1') AND (tx_en_in_1 = '1')) AND (tmp_13 = '0') ELSE
      sentTrain;

  
  tmp_23 <= to_unsigned(1, 8) WHEN tmp_6 = 1 ELSE
      tmp_22;

  tmp_24 <= tmp_23;

  sentTrain_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain <= tmp_24;
      END IF;
    END IF;
  END PROCESS sentTrain_reg_process;


  count_1 <= count_3 + 1;

  
  tmp_25 <= to_unsigned(0, 6) WHEN count_1 >= 8 ELSE
      count_1;

  count_2 <= count_3 + 1;

  
  tmp_26 <= to_unsigned(0, 6) WHEN count_2 >= 8 ELSE
      count_2;

  
  p43_tmp <= to_unsigned(0, 6) WHEN resize(count, 7) >= 32 ELSE
      count;
  
  p43_tmp_1 <= tmp_26 WHEN sentTrain <= 89 ELSE
      p43_tmp;
  
  p43_tmp_2 <= tmp_25 WHEN sentTrain <= 24 ELSE
      p43_tmp_1;
  
  tmp_27 <= p43_tmp_2 WHEN ((empty_in_1 = '1') AND (tx_en_in_1 = '1')) AND (tmp_13 = '0') ELSE
      count_3;

  
  tmp_28 <= to_unsigned(0, 6) WHEN tmp_6 = 1 ELSE
      tmp_27;

  tmp_29 <= tmp_28;

  count_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_3 <= to_unsigned(0, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_3 <= tmp_29;
      END IF;
    END IF;
  END PROCESS count_reg_process;


  count <= count_3 + 1;

  
  p52_tmp <= tmp_14 WHEN resize(count, 7) >= 32 ELSE
      rdCount;
  
  p52_tmp_1 <= '1' WHEN p52_tmp = 0 ELSE
      '0';
  
  p52_tmp_2 <= '0' WHEN sentTrain <= 89 ELSE
      p52_tmp_1;
  
  p52_tmp_3 <= '0' WHEN sentTrain <= 24 ELSE
      p52_tmp_2;
  
  tmp_30 <= p52_tmp_3 WHEN ((empty_in_1 = '1') AND (tx_en_in_1 = '1')) AND (tmp_13 = '0') ELSE
      tmp_13;

  
  tmp_31 <= '0' WHEN (empty_in_1 = '0') AND (tmp_5 = 0) ELSE
      tmp_30;

  tmp_32 <= tmp_31;

  txDone_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      txDone <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        txDone <= tmp_32;
      END IF;
    END IF;
  END PROCESS txDone_reg_process;


  
  tmp_13 <= '0' WHEN clear_fifo_in_1 = '1' ELSE
      txDone;

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_33 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_33 <= tmp_13;
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;


  iA <= resize(count_3, 8);

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_1 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_1 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;


  tmp_34 <= symIndex + 1;

  p51_div_temp <= iA / 8;
  p51_cast <= signed(resize(p51_div_temp, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p51_mul_temp <= resize(p51_cast & '0' & '0' & '0', 41);
  p51_sub_cast <= p51_mul_temp(31 DOWNTO 0);
  p51_sub_cast_1 <= unsigned(p51_sub_cast(7 DOWNTO 0));
  p51_sub_temp <= iA - p51_sub_cast_1;
  
  p51_cast_1 <= "111111" WHEN p51_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p51_sub_temp(5 DOWNTO 0);
  
  p51_tmp <= tmp_34 WHEN p51_cast_1 = 0 ELSE
      symIndex;
  
  p51_tmp_1 <= to_unsigned(0, 3) WHEN resize(count, 7) >= 32 ELSE
      p51_tmp;
  
  p51_tmp_2 <= symIndex WHEN sentTrain <= 89 ELSE
      p51_tmp_1;
  
  p51_tmp_3 <= symIndex WHEN sentTrain <= 24 ELSE
      p51_tmp_2;
  
  tmp_35 <= p51_tmp_3 WHEN ((empty_in_1 = '1') AND (tx_en_in_1 = '1')) AND (tmp_13 = '0') ELSE
      symIndex;

  tmp_36 <= tmp_35;

  symIndex_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      symIndex <= to_unsigned(0, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        symIndex <= tmp_36;
      END IF;
    END IF;
  END PROCESS symIndex_reg_process;


  p73sym2_cast <= resize(symIndex & '0', 5);
  sym2 <= p73sym2_cast(2 DOWNTO 0);

  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sym2_1 <= to_unsigned(0, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sym2_1 <= sym2;
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;


  data_in_unsigned <= unsigned(data_in);

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- transfer data from processor to internal buffer
  -- Because the core has a non-zero throughput we need to stale a bit for the
  -- requested data to make it to our input. So, I'm doing that we reBuf
  -- counter. There are definitely more efficient ways to do this but I'm
  -- gonna leave that for another day.
  wrIndex <= to_unsigned(1024, 11);

  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      wrIndex_1 <= to_unsigned(0, 11);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        wrIndex_1 <= wrIndex;
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;


  in_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      data_in_1 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        data_in_1 <= data_in_unsigned;
      END IF;
    END IF;
  END PROCESS in_0_pipe_process;


  tmp_37 <= data_in_1;

  
  tmp_38 <= tmp_9 WHEN tmp_6 = 1 ELSE
      wrIndex_1;

  p115tmp_sub_cast <= signed(resize(tmp_38, 32));
  tmp_39 <= p115tmp_sub_cast - 1;

  indexLogic_fixptsig <= unsigned(tmp_39(9 DOWNTO 0));

  tx_fifo_ram_wrenb <= '1';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- we are ready to transmit some data
  rdIndex <= resize(resize(resize(tmp_10, 12) - resize(rdCount, 12), 13) + 1, 11);

  
  tmp_40 <= to_unsigned(1024, 11) WHEN rdIndex <= 0 ELSE
      rdIndex;

  p87tmp_sub_cast <= signed(resize(tmp_40, 32));
  tmp_41 <= p87tmp_sub_cast - 1;

  indexLogic_fixptsig_1 <= unsigned(tmp_41(9 DOWNTO 0));

  tx_fifo_unsigned <= unsigned(tx_fifo);

  data <= tx_fifo_unsigned;

  tmp_42 <= data;

  p57tmp_cast <= data & '0';
  p57tmp_cast_1 <= p57tmp_cast srl 1;
  tmp_43 <= p57tmp_cast_1(8 DOWNTO 1);

  p58tmp_cast <= data & '0' & '0';
  p58tmp_cast_1 <= p58tmp_cast srl 2;
  tmp_44 <= p58tmp_cast_1(9 DOWNTO 2);

  p59tmp_cast <= data & '0' & '0' & '0';
  p59tmp_cast_1 <= p59tmp_cast srl 3;
  tmp_45 <= p59tmp_cast_1(10 DOWNTO 3);

  p60tmp_cast <= data & '0' & '0' & '0' & '0';
  p60tmp_cast_1 <= p60tmp_cast srl 4;
  tmp_46 <= p60tmp_cast_1(11 DOWNTO 4);

  p61tmp_cast <= data & '0' & '0' & '0' & '0' & '0';
  p61tmp_cast_1 <= p61tmp_cast srl 5;
  tmp_47 <= p61tmp_cast_1(12 DOWNTO 5);

  p62tmp_cast <= data & '0' & '0' & '0' & '0' & '0' & '0';
  p62tmp_cast_1 <= p62tmp_cast srl 6;
  tmp_48 <= p62tmp_cast_1(13 DOWNTO 6);

  p63tmp_cast <= data & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p63tmp_cast_1 <= p63tmp_cast srl 7;
  tmp_49 <= p63tmp_cast_1(14 DOWNTO 7);

  p55_output : PROCESS (sym2_1, tmp_42, tmp_43, tmp_44, tmp_45, tmp_46, tmp_47, tmp_48, tmp_49)
    VARIABLE tmp50 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp : unsigned(3 DOWNTO 0);
  BEGIN
    add_temp := resize(sym2_1, 4) + 1;

    CASE add_temp IS
      WHEN "0001" =>
        tmp50 := tmp_42;
      WHEN "0010" =>
        tmp50 := tmp_43;
      WHEN "0011" =>
        tmp50 := tmp_44;
      WHEN "0100" =>
        tmp50 := tmp_45;
      WHEN "0101" =>
        tmp50 := tmp_46;
      WHEN "0110" =>
        tmp50 := tmp_47;
      WHEN "0111" =>
        tmp50 := tmp_48;
      WHEN "1000" =>
        tmp50 := tmp_49;
      WHEN OTHERS => 
        tmp50 := to_unsigned(0, 8);
    END CASE;

    tmp_51 <= tmp50;
  END PROCESS p55_output;


  iA_2 <= tmp_51;

  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sym2_2 <= to_unsigned(0, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sym2_2 <= sym2;
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;


  a <= data;

  c <= a;

  tmp_52 <= c;

  a_1 <= data & '0';

  c_1 <= a_1 srl 1;

  tmp_53 <= c_1(8 DOWNTO 1);

  a_2 <= data & '0' & '0';

  c_2 <= a_2 srl 2;

  tmp_54 <= c_2(9 DOWNTO 2);

  a_3 <= data & '0' & '0' & '0';

  c_3 <= a_3 srl 3;

  tmp_55 <= c_3(10 DOWNTO 3);

  a_4 <= data & '0' & '0' & '0' & '0';

  c_4 <= a_4 srl 4;

  tmp_56 <= c_4(11 DOWNTO 4);

  a_5 <= data & '0' & '0' & '0' & '0' & '0';

  c_5 <= a_5 srl 5;

  tmp_57 <= c_5(12 DOWNTO 5);

  a_6 <= data & '0' & '0' & '0' & '0' & '0' & '0';

  c_6 <= a_6 srl 6;

  tmp_58 <= c_6(13 DOWNTO 6);

  a_7 <= data & '0' & '0' & '0' & '0' & '0' & '0' & '0';

  c_7 <= a_7 srl 7;

  tmp_59 <= c_7(14 DOWNTO 7);

  p65_output : PROCESS (sym2_2, tmp_52, tmp_53, tmp_54, tmp_55, tmp_56, tmp_57, tmp_58, tmp_59)
    VARIABLE tmp60 : unsigned(7 DOWNTO 0);
    VARIABLE add_temp1 : unsigned(3 DOWNTO 0);
  BEGIN
    add_temp1 := resize(sym2_2, 4) + 2;

    CASE add_temp1 IS
      WHEN "0001" =>
        tmp60 := tmp_52;
      WHEN "0010" =>
        tmp60 := tmp_53;
      WHEN "0011" =>
        tmp60 := tmp_54;
      WHEN "0100" =>
        tmp60 := tmp_55;
      WHEN "0101" =>
        tmp60 := tmp_56;
      WHEN "0110" =>
        tmp60 := tmp_57;
      WHEN "0111" =>
        tmp60 := tmp_58;
      WHEN "1000" =>
        tmp60 := tmp_59;
      WHEN OTHERS => 
        tmp60 := to_unsigned(0, 8);
    END CASE;

    tmp_61 <= tmp60;
  END PROCESS p65_output;


  iA_3 <= tmp_61;

  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      empty_in_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        empty_in_3 <= empty_in_1;
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;


  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_3 <= tx_en_in_1;
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;


  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_62 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_62 <= tmp_13;
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;


  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_4 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_4 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;


  iA_5 <= sentTrain;

  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_6 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_6 <= iA_5;
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;


  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_1 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_1 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;


  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_4 <= to_unsigned(0, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_4 <= count_3;
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;


  p48_div_temp_1 <= iA_6 / 2;
  p48_mul_temp_1 <= (iA_6 - resize(p48_div_temp_1 * 2, 8)) * to_unsigned(2, 2);
  p48_sub_cast_3 <= signed(resize(p48_mul_temp_1, 12));
  p48_sub_temp_2 <= p48_sub_cast_3 - 1;
  
  p48_tmp <= p48_sub_temp_2(1 DOWNTO 0) WHEN count_4 = 0 ELSE
      diLatch;
  p48_sub_temp_1 <= resize(sentTrain_1, 9) - 24;
  p48_sub_cast_2 <= signed(resize(p48_sub_temp_1, 32));
  p48_tmp_1 <= p48_sub_cast_2 - 1;
  
  p48_tmp_2 <= to_signed(0, 32) WHEN p48_tmp_1 < 0 ELSE
      p48_tmp_1;
  
  p48_tmp_3 <= tbi(to_integer(p48_tmp_2)) WHEN count_4 = 0 ELSE
      diLatch;
  p48_div_temp <= iA_4 / 8;
  p48_cast <= signed(resize(p48_div_temp, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p48_mul_temp <= resize(p48_cast & '0' & '0' & '0', 41);
  p48_sub_cast <= p48_mul_temp(31 DOWNTO 0);
  p48_sub_cast_1 <= unsigned(p48_sub_cast(7 DOWNTO 0));
  p48_sub_temp <= iA_4 - p48_sub_cast_1;
  
  p48_cast_1 <= "111111" WHEN p48_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p48_sub_temp(5 DOWNTO 0);
  p48_div_temp_2 <= iA_2 / 2;
  p48_sub_temp_3 <= iA_2 - resize(p48_div_temp_2 * 2, 8);
  p48_cast_2 <= p48_sub_temp_3(0);
  
  p48_sub_cast_4 <= to_unsigned(2, 4) WHEN p48_cast_2 = '1' ELSE
      to_unsigned(0, 4);
  p48_sub_temp_4 <= p48_sub_cast_4 - 1;
  
  p48_tmp_4 <= signed(p48_sub_temp_4(1 DOWNTO 0)) WHEN p48_cast_1 = 0 ELSE
      diLatch;
  
  p48_tmp_5 <= p48_tmp_3 WHEN sentTrain_1 <= 89 ELSE
      p48_tmp_4;
  
  p48_tmp_6 <= p48_tmp WHEN sentTrain_1 <= 24 ELSE
      p48_tmp_5;
  
  tmp_63 <= p48_tmp_6 WHEN ((empty_in_3 = '1') AND (tx_en_in_3 = '1')) AND (tmp_62 = '0') ELSE
      diLatch;

  tmp_64 <= tmp_63;

  diLatch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      diLatch <= to_signed(0, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        diLatch <= tmp_64;
      END IF;
    END IF;
  END PROCESS diLatch_reg_process;


  delayMatch_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      empty_in_4 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        empty_in_4 <= empty_in_1;
      END IF;
    END IF;
  END PROCESS delayMatch_18_process;


  delayMatch_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_en_in_4 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_en_in_4 <= tx_en_in_1;
      END IF;
    END IF;
  END PROCESS delayMatch_19_process;


  delayMatch_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_65 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_65 <= tmp_13;
      END IF;
    END IF;
  END PROCESS delayMatch_20_process;


  delayMatch_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_7 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_7 <= iA;
      END IF;
    END IF;
  END PROCESS delayMatch_21_process;


  iA_8 <= sentTrain;

  delayMatch_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_9 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_9 <= iA_8;
      END IF;
    END IF;
  END PROCESS delayMatch_22_process;


  delayMatch_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_2 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_2 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_23_process;


  delayMatch_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_5 <= to_unsigned(0, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_5 <= count_3;
      END IF;
    END IF;
  END PROCESS delayMatch_24_process;


  p46_div_temp_1 <= iA_9 / 2;
  p46_mul_temp_1 <= (iA_9 - resize(p46_div_temp_1 * 2, 8)) * to_unsigned(2, 2);
  p46_sub_cast_3 <= signed(resize(p46_mul_temp_1, 12));
  p46_sub_temp_2 <= p46_sub_cast_3 - 1;
  
  p46_tmp <= p46_sub_temp_2(1 DOWNTO 0) WHEN count_5 = 0 ELSE
      dqLatch;
  p46_sub_temp_1 <= resize(sentTrain_2, 9) - 24;
  p46_sub_cast_2 <= signed(resize(p46_sub_temp_1, 32));
  p46_tmp_1 <= p46_sub_cast_2 - 1;
  
  p46_tmp_2 <= to_signed(0, 32) WHEN p46_tmp_1 < 0 ELSE
      p46_tmp_1;
  
  p46_tmp_3 <= tbq(to_integer(p46_tmp_2)) WHEN count_5 = 0 ELSE
      dqLatch;
  p46_div_temp <= iA_7 / 8;
  p46_cast <= signed(resize(p46_div_temp, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p46_mul_temp <= resize(p46_cast & '0' & '0' & '0', 41);
  p46_sub_cast <= p46_mul_temp(31 DOWNTO 0);
  p46_sub_cast_1 <= unsigned(p46_sub_cast(7 DOWNTO 0));
  p46_sub_temp <= iA_7 - p46_sub_cast_1;
  
  p46_cast_1 <= "111111" WHEN p46_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p46_sub_temp(5 DOWNTO 0);
  p46_div_temp_2 <= iA_3 / 2;
  p46_sub_temp_3 <= iA_3 - resize(p46_div_temp_2 * 2, 8);
  p46_cast_2 <= p46_sub_temp_3(0);
  
  p46_sub_cast_4 <= to_unsigned(2, 4) WHEN p46_cast_2 = '1' ELSE
      to_unsigned(0, 4);
  p46_sub_temp_4 <= p46_sub_cast_4 - 1;
  
  p46_tmp_4 <= signed(p46_sub_temp_4(1 DOWNTO 0)) WHEN p46_cast_1 = 0 ELSE
      dqLatch;
  
  p46_tmp_5 <= p46_tmp_3 WHEN sentTrain_2 <= 89 ELSE
      p46_tmp_4;
  
  p46_tmp_6 <= p46_tmp WHEN sentTrain_2 <= 24 ELSE
      p46_tmp_5;
  
  tmp_66 <= p46_tmp_6 WHEN ((empty_in_4 = '1') AND (tx_en_in_4 = '1')) AND (tmp_65 = '0') ELSE
      dqLatch;

  tmp_67 <= tmp_66;

  dqLatch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dqLatch <= to_signed(0, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dqLatch <= tmp_67;
      END IF;
    END IF;
  END PROCESS dqLatch_reg_process;


  delayMatch_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_10 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_10 <= iA_5;
      END IF;
    END IF;
  END PROCESS delayMatch_25_process;


  delayMatch_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      iA_11 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        iA_11 <= iA_8;
      END IF;
    END IF;
  END PROCESS delayMatch_26_process;


  fmo_1_re <= to_signed(0, 3);
  fmo_1_im <= to_signed(0, 3);

  delayMatch_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fmo_1_re_1 <= to_signed(0, 3);
      fmo_1_im_1 <= to_signed(0, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fmo_1_re_1 <= fmo_1_re;
        fmo_1_im_1 <= fmo_1_im;
      END IF;
    END IF;
  END PROCESS delayMatch_27_process;


  delayMatch_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fmo_1_re_2 <= to_signed(0, 3);
      fmo_1_im_2 <= to_signed(0, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fmo_1_re_2 <= fmo_1_re_1;
        fmo_1_im_2 <= fmo_1_im_1;
      END IF;
    END IF;
  END PROCESS delayMatch_28_process;


  delayMatch_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      sentTrain_3 <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        sentTrain_3 <= sentTrain;
      END IF;
    END IF;
  END PROCESS delayMatch_29_process;


  delayMatch_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      count_6 <= to_unsigned(0, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        count_6 <= count_3;
      END IF;
    END IF;
  END PROCESS delayMatch_30_process;


  p42_div_temp_1 <= iA_11 / 2;
  p42_mul_temp_1 <= (iA_11 - resize(p42_div_temp_1 * 2, 8)) * to_unsigned(2, 2);
  p42_sub_cast_3 <= signed(resize(p42_mul_temp_1, 12));
  p42_sub_temp_2 <= p42_sub_cast_3 - 1;
  p42_div_temp_3 <= iA_10 / 2;
  p42_mul_temp_2 <= (iA_10 - resize(p42_div_temp_3 * 2, 8)) * to_unsigned(2, 2);
  p42_sub_cast_5 <= signed(resize(p42_mul_temp_2, 12));
  p42_sub_temp_5 <= p42_sub_cast_5 - 1;
  
  p42_tmp_1 <= p42_sub_temp_2(1 DOWNTO 0) WHEN count_6 = 0 ELSE
      dqLatch;
  
  p42_tmp <= p42_sub_temp_5(1 DOWNTO 0) WHEN count_6 = 0 ELSE
      diLatch;
  p42_sub_temp_1 <= resize(sentTrain_3, 9) - 24;
  p42_sub_cast_2 <= signed(resize(p42_sub_temp_1, 32));
  p42_tmp_2 <= p42_sub_cast_2 - 1;
  
  p42_tmp_3 <= to_signed(0, 32) WHEN p42_tmp_2 < 0 ELSE
      p42_tmp_2;
  p42_sub_temp_8 <= resize(sentTrain_3, 9) - 24;
  p42_sub_cast_7 <= signed(resize(p42_sub_temp_8, 32));
  p42_tmp_4 <= p42_sub_cast_7 - 1;
  
  p42_tmp_5 <= to_signed(0, 32) WHEN p42_tmp_4 < 0 ELSE
      p42_tmp_4;
  
  p42_tmp_7 <= tbq_2(to_integer(p42_tmp_5)) WHEN count_6 = 0 ELSE
      dqLatch;
  
  p42_tmp_6 <= tbi_2(to_integer(p42_tmp_3)) WHEN count_6 = 0 ELSE
      diLatch;
  p42_div_temp <= iA_1 / 8;
  p42_cast <= signed(resize(p42_div_temp, 9));
  -- CSD Encoding (8) : 1000; Cost (Adders) = 0
  p42_mul_temp <= resize(p42_cast & '0' & '0' & '0', 41);
  p42_sub_cast <= p42_mul_temp(31 DOWNTO 0);
  p42_sub_cast_1 <= unsigned(p42_sub_cast(7 DOWNTO 0));
  p42_sub_temp <= iA_1 - p42_sub_cast_1;
  
  p42_cast_1 <= "111111" WHEN p42_sub_temp(7 DOWNTO 6) /= "00" ELSE
      p42_sub_temp(5 DOWNTO 0);
  p42_div_temp_2 <= iA_3 / 2;
  p42_sub_temp_3 <= iA_3 - resize(p42_div_temp_2 * 2, 8);
  p42_cast_2 <= p42_sub_temp_3(0);
  
  p42_sub_cast_4 <= to_unsigned(2, 4) WHEN p42_cast_2 = '1' ELSE
      to_unsigned(0, 4);
  p42_sub_temp_4 <= p42_sub_cast_4 - 1;
  p42_div_temp_4 <= iA_2 / 2;
  p42_sub_temp_6 <= iA_2 - resize(p42_div_temp_4 * 2, 8);
  p42_cast_3 <= p42_sub_temp_6(0);
  
  p42_sub_cast_6 <= to_unsigned(2, 4) WHEN p42_cast_3 = '1' ELSE
      to_unsigned(0, 4);
  p42_sub_temp_7 <= p42_sub_cast_6 - 1;
  
  p42_tmp_9 <= signed(p42_sub_temp_4(1 DOWNTO 0)) WHEN p42_cast_1 = 0 ELSE
      dqLatch;
  
  p42_tmp_8 <= signed(p42_sub_temp_7(1 DOWNTO 0)) WHEN p42_cast_1 = 0 ELSE
      diLatch;
  
  p42_tmp_re <= resize(p42_tmp_6, 3) WHEN sentTrain_3 <= 89 ELSE
      resize(p42_tmp_8, 3);
  
  p42_tmp_im <= resize(p42_tmp_7, 3) WHEN sentTrain_3 <= 89 ELSE
      resize(p42_tmp_9, 3);
  
  p42_tmp_re_1 <= resize(p42_tmp, 3) WHEN sentTrain_3 <= 24 ELSE
      p42_tmp_re;
  
  p42_tmp_im_1 <= resize(p42_tmp_1, 3) WHEN sentTrain_3 <= 24 ELSE
      p42_tmp_im;
  
  tmp_re <= p42_tmp_re_1 WHEN ((empty_in_2 = '1') AND (tx_en_in_2 = '1')) AND (tmp_33 = '0') ELSE
      fmo_1_re_2;
  
  tmp_im <= p42_tmp_im_1 WHEN ((empty_in_2 = '1') AND (tx_en_in_2 = '1')) AND (tmp_33 = '0') ELSE
      fmo_1_im_2;

  d_b2s_re <= tmp_re(1 DOWNTO 0);
  d_b2s_im <= tmp_im(1 DOWNTO 0);

  buf_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      buf_re_1 <= (OTHERS => to_signed(0, 2));
      buf_im_1 <= (OTHERS => to_signed(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        buf_re_1 <= buf_re;
        buf_im_1 <= buf_im;
      END IF;
    END IF;
  END PROCESS buf_reg_process;



  tmp_im_1_gen: FOR t_01 IN 0 TO 15 GENERATE
    tmp_re_1(t_01) <= buf_re_1(to_integer(tmp_2(t_01)));
    tmp_im_1(t_01) <= buf_im_1(to_integer(tmp_2(t_01)));
  END GENERATE tmp_im_1_gen;


  tmp_re_2(0 TO 15) <= tmp_re_1(0 TO 15);
  tmp_im_2(0 TO 15) <= tmp_im_1(0 TO 15);
  tmp_re_2(16) <= d_b2s_re;
  tmp_im_2(16) <= d_b2s_im;

  buf_re <= tmp_re_2;
  buf_im <= tmp_im_2;

  p23_output : PROCESS (c_re_2, c_im_2, buf_re, buf_im)
    VARIABLE tmp_im1 : signed(19 DOWNTO 0);
    VARIABLE c_im1 : signed(19 DOWNTO 0);
    VARIABLE tmp_re1 : signed(19 DOWNTO 0);
    VARIABLE c_re1 : signed(19 DOWNTO 0);
    VARIABLE tmp_re_0 : signed(19 DOWNTO 0);
    VARIABLE tmp_im_0 : signed(19 DOWNTO 0);
    VARIABLE add_cast : vector_of_signed21(0 TO 16);
    VARIABLE mul_temp : vector_of_signed15(0 TO 16);
    VARIABLE add_cast_0 : vector_of_signed21(0 TO 16);
    VARIABLE add_temp2 : vector_of_signed21(0 TO 16);
    VARIABLE add_cast_1 : vector_of_signed21(0 TO 16);
    VARIABLE mul_temp_0 : vector_of_signed15(0 TO 16);
    VARIABLE add_cast_2 : vector_of_signed21(0 TO 16);
    VARIABLE add_temp_0 : vector_of_signed21(0 TO 16);
  BEGIN
    c_re1 := c_re_2;
    tmp_re1 := c_re_2;
    c_im1 := c_im_2;
    tmp_im1 := c_im_2;

    FOR k IN 0 TO 16 LOOP
      add_cast(k) := resize(tmp_re1, 21);
      mul_temp(k) := buf_re(k) * nc(k);
      add_cast_0(k) := resize(mul_temp(k), 21);
      add_temp2(k) := add_cast(k) + add_cast_0(k);
      tmp_re_0 := add_temp2(k)(19 DOWNTO 0);
      add_cast_1(k) := resize(tmp_im1, 21);
      mul_temp_0(k) := buf_im(k) * nc(k);
      add_cast_2(k) := resize(mul_temp_0(k), 21);
      add_temp_0(k) := add_cast_1(k) + add_cast_2(k);
      tmp_im_0 := add_temp_0(k)(19 DOWNTO 0);
      c_re1 := tmp_re_0;
      tmp_re1 := tmp_re_0;
      c_im1 := tmp_im_0;
      tmp_im1 := tmp_im_0;
    END LOOP;

    c_re_3 <= c_re1;
    c_im_3 <= c_im1;
  END PROCESS p23_output;


  d_ssrc_re <= c_re_3(12 DOWNTO 0);
  d_ssrc_im <= c_im_3(12 DOWNTO 0);

  -- make i/q discrete ports and scale to the full 12-bit range of the DAC
  -- (one bit is for sign)
  a0 <= d_ssrc_re;

  c_8 <= resize(a0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);

  p18tmp_add_cast <= resize(c_8(25 DOWNTO 11), 16);
  p18tmp_add_temp <= p18tmp_add_cast + 1;
  tmp_68 <= p18tmp_add_temp(15 DOWNTO 1);

  p19tmp_sub_cast <= (resize(c_8(25 DOWNTO 11), 16)) + ('0' & (c_8(10) OR c_8(9) OR c_8(8) OR c_8(7) OR c_8(6) OR c_8(5) OR c_8(4) OR c_8(3) OR c_8(2) OR c_8(1) OR c_8(0)));
  p19tmp_sub_temp <= p19tmp_sub_cast - 1;
  p19tmp_cast <= (resize(p19tmp_sub_temp(15 DOWNTO 1), 16)) + ('0' & p19tmp_sub_temp(0));
  tmp_69 <= p19tmp_cast(14 DOWNTO 0);

  p17_cast <= resize(a0 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  
  tmp_70 <= tmp_69 WHEN p17_cast < 0 ELSE
      tmp_68;

  i_out_1 <= tmp_70(11 DOWNTO 0);

  i_out_2 <= i_out_1;

  out_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_out_tmp <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_out_tmp <= i_out_2;
      END IF;
    END IF;
  END PROCESS out_0_pipe_process;


  i_out <= std_logic_vector(i_out_tmp);

  a0_1 <= d_ssrc_im;

  c_9 <= resize(a0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);

  p12tmp_add_cast <= resize(c_9(25 DOWNTO 11), 16);
  p12tmp_add_temp <= p12tmp_add_cast + 1;
  tmp_71 <= p12tmp_add_temp(15 DOWNTO 1);

  p13tmp_sub_cast <= (resize(c_9(25 DOWNTO 11), 16)) + ('0' & (c_9(10) OR c_9(9) OR c_9(8) OR c_9(7) OR c_9(6) OR c_9(5) OR c_9(4) OR c_9(3) OR c_9(2) OR c_9(1) OR c_9(0)));
  p13tmp_sub_temp <= p13tmp_sub_cast - 1;
  p13tmp_cast <= (resize(p13tmp_sub_temp(15 DOWNTO 1), 16)) + ('0' & p13tmp_sub_temp(0));
  tmp_72 <= p13tmp_cast(14 DOWNTO 0);

  p11_cast <= resize(a0_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 26);
  
  tmp_73 <= tmp_72 WHEN p11_cast < 0 ELSE
      tmp_71;

  q_out_1 <= tmp_73(11 DOWNTO 0);

  q_out_2 <= q_out_1;

  out_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_out_tmp <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_out_tmp <= q_out_2;
      END IF;
    END IF;
  END PROCESS out_1_pipe_process;


  q_out <= std_logic_vector(q_out_tmp);

  fmo_2 <= '0';

  delayMatch_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      fmo_2_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        fmo_2_1 <= fmo_2;
      END IF;
    END IF;
  END PROCESS delayMatch_31_process;


  
  tmp_74 <= '1' WHEN (empty_in_1 = '0') AND (tmp_5 = 0) ELSE
      fmo_2_1;

  re_byte_b2s <= tmp_74;

  re_byte_out_1 <= re_byte_b2s;

  re_byte_out_2 <= re_byte_out_1;

  delayMatch_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      re_byte_out_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        re_byte_out_3 <= re_byte_out_2;
      END IF;
    END IF;
  END PROCESS delayMatch_32_process;


  out_2_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      re_byte_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        re_byte_out <= re_byte_out_3;
      END IF;
    END IF;
  END PROCESS out_2_pipe_process;


  tmp_75 <= tmp_32;

  tx_done_b2s <= tmp_75;

  tx_done_out_1 <= tx_done_b2s;

  tx_done_out_2 <= tx_done_out_1;

  delayMatch_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_done_out_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_done_out_3 <= tx_done_out_2;
      END IF;
    END IF;
  END PROCESS delayMatch_33_process;


  out_3_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tx_done_out <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tx_done_out <= tx_done_out_3;
      END IF;
    END IF;
  END PROCESS out_3_pipe_process;


  ce_out <= ce;

END rtl;

