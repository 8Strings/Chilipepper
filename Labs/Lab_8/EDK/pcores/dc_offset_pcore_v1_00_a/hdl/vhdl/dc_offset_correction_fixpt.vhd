-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\Chilipepper_Labs\Labs\Lab_9\MATLAB\codegen\dc_offset_correction\hdlsrc\dc_offset_correction_fixpt.vhd
-- Created: 2014-03-15 17:13:24
-- 
-- Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- rssi_out                      ce_out        1
-- dir_out                       ce_out        1
-- blinky                        ce_out        1
-- d1                            ce_out        1
-- d2                            ce_out        1
-- d3                            ce_out        1
-- d4                            ce_out        1
-- d5                            ce_out        1
-- d6                            ce_out        1
-- d7                            ce_out        1
-- d8                            ce_out        1
-- gain_out                      ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dc_offset_correction_fixpt
-- Source Path: dc_offset_correction_fixpt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.dc_offset_correction_fixpt_pkg.ALL;

ENTITY dc_offset_correction_fixpt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        clk_enable                        :   IN    std_logic;
        i_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        gain_en_in                        :   IN    std_logic;  -- ufix1
        rssi_low_goal_in                  :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
        rssi_high_goal_in                 :   IN    std_logic_vector(29 DOWNTO 0);  -- ufix30
        rx_en_in                          :   IN    std_logic;  -- ufix1
        gain_in                           :   IN    std_logic_vector(5 DOWNTO 0);  -- ufix6
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        rssi_out                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        dir_out                           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        blinky                            :   OUT   std_logic;  -- ufix1
        d1                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d2                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d3                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d4                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d5                                :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        d6                                :   OUT   std_logic_vector(29 DOWNTO 0);  -- ufix30
        d7                                :   OUT   std_logic;  -- ufix1
        d8                                :   OUT   std_logic;  -- ufix1
        gain_out                          :   OUT   std_logic_vector(5 DOWNTO 0)  -- ufix6
        );
END dc_offset_correction_fixpt;


ARCHITECTURE rtl OF dc_offset_correction_fixpt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL i_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rx_en_in_1                       : std_logic;  -- ufix1
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p209tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p209tmp_cast_1                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_2                            : std_logic;
  SIGNAL tmp_3                            : std_logic;
  SIGNAL tmp_4                            : std_logic;
  SIGNAL tmp_5                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p202tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p202tmp_cast_1                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_6                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_7                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_8                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p203tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p203tmp_cast                     : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_9                            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_10                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_11                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_12                           : std_logic;
  SIGNAL tmp_13                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p181tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p181tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_14                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_15                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_16                           : std_logic;
  SIGNAL tmp_17                           : std_logic;
  SIGNAL tmp_18                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_19                           : std_logic;
  SIGNAL q_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_20                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p205tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p205tmp_cast_1                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_21                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_22                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_23                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_24                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p206tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p206tmp_cast                     : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_25                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_26                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_27                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_28                           : std_logic;
  SIGNAL tmp_29                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p213tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p213tmp_cast_1                   : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_30                           : std_logic;
  SIGNAL tmp_31                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p179tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p179tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_32                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_33                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_34                           : std_logic;
  SIGNAL tmp_35                           : std_logic;
  SIGNAL tmp_36                           : std_logic;
  SIGNAL noise_offset                     : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_37                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_38                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL noise_inc                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL i_dc                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_dc                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_39                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p199_tmp                         : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p199_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p199_sub_cast                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p199_sub_cast_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p199_sub_temp                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p199_cast                        : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p199_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p199_cast_1                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p199_sub_cast_2                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p199_sub_cast_3                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p199_sub_temp_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p199_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p199_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p199_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_40                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_41                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_42                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_dc_1                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_43                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p211tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL p211tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL tmp_44                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p183_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p183_sub_cast                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p183_sub_cast_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p183_sub_temp                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p183_cast                        : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p183_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p183_cast_1                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_45                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p214tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p214tmp_cast                     : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_46                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_47                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL i_dc_1                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_48                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL noise_dec                        : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL tmp_49                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p194_tmp                         : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p194_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p194_sub_cast                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p194_sub_cast_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p194_sub_temp                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p194_cast                        : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p194_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p194_cast_1                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p194_sub_cast_2                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p194_sub_cast_3                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p194_sub_temp_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p194_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p194_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p194_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_50                           : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL alpha_1_cast                     : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL alpha_1_cast_1                   : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL alpha_relop1                     : std_logic;
  SIGNAL tmp_51                           : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p197_tmp                         : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p197_tmp_1                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p197_tmp_2                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p197_tmp_3                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p197_tmp_4                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p197_tmp_5                       : unsigned(19 DOWNTO 0);  -- ufix20
  SIGNAL p197_sub_cast                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p197_sub_cast_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p197_sub_temp                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p197_cast                        : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p197_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p197_cast_1                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p197_sub_cast_2                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p197_sub_cast_3                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p197_sub_temp_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p197_cast_2                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p197_add_temp_1                  : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p197_cast_3                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL tmp_52                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_53                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_54                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p210tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p210tmp_cast                     : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_55                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_56                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_57                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p207tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL p207tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En13
  SIGNAL p186_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p186_sub_cast                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_sub_cast_1                  : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_sub_temp                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p186_cast                        : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL p186_add_temp                    : unsigned(20 DOWNTO 0);  -- ufix21
  SIGNAL p186_cast_1                      : signed(33 DOWNTO 0);  -- sfix34_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p177i_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p177i_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p177i_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL rd_38_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL i_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p176q_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p176q_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p176q_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL rd_31_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL q_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_58                           : std_logic;
  SIGNAL tmp_59                           : std_logic;
  SIGNAL tmp_60                           : std_logic;
  SIGNAL tmp_61                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_62                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_63                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_64                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_65                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_66                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_67                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL rssi_inst                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_68                           : std_logic;
  SIGNAL tmp_69                           : std_logic;
  SIGNAL counter                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_70                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_71                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter_1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_72                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p133_tmp                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_73                           : std_logic;
  SIGNAL tmp_74                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_75                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_76                           : std_logic;
  SIGNAL tmp_77                           : std_logic;
  SIGNAL tmp_78                           : std_logic;
  SIGNAL tmp_79                           : std_logic;
  SIGNAL tmp_80                           : std_logic;
  SIGNAL tmp_81                           : std_logic;
  SIGNAL tmp_82                           : std_logic;
  SIGNAL tmp_83                           : std_logic;
  SIGNAL timeout                          : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_84                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_85                           : std_logic;
  SIGNAL tmp_86                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_87                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_88                           : std_logic;
  SIGNAL tmp_89                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_90                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_91                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_92                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_93                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_94                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_95                           : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL p135_tmp                         : unsigned(27 DOWNTO 0);  -- ufix28
  SIGNAL tmp_96                           : std_logic;
  SIGNAL tmp_97                           : std_logic;
  SIGNAL tmp_98                           : std_logic;
  SIGNAL rssi_en_out                      : std_logic;  -- ufix1
  SIGNAL rd_14_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_1                    : std_logic;  -- ufix1
  SIGNAL tmp_99                           : std_logic;  -- ufix1
  SIGNAL p137_tmp                         : std_logic;  -- ufix1
  SIGNAL tmp_100                          : std_logic;
  SIGNAL tmp_101                          : std_logic;  -- ufix1
  SIGNAL tmp_102                          : std_logic;  -- ufix1
  SIGNAL tmp_103                          : std_logic;  -- ufix1
  SIGNAL tmp_104                          : std_logic;  -- ufix1
  SIGNAL tmp_105                          : std_logic;
  SIGNAL tmp_106                          : std_logic;
  SIGNAL tmp_107                          : std_logic;
  SIGNAL tmp_108                          : std_logic;
  SIGNAL tmp_109                          : std_logic;
  SIGNAL tmp_110                          : std_logic;
  SIGNAL tmp_111                          : std_logic;
  SIGNAL tmp_112                          : std_logic;
  SIGNAL tmp_113                          : std_logic;
  SIGNAL tmp_114                          : std_logic;
  SIGNAL tmp_115                          : std_logic;
  SIGNAL tmp_116                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_117                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_118                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_119                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_120                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL rssi_sum                         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_121                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_122                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_123                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_124                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL rssi_out_1                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_1_reg                         : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_2                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_125                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p141_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p141_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p141_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p141_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p141_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p141_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_126                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_127                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_128                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_129                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_latch                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_out_tmp                     : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_130                          : std_logic;
  SIGNAL tmp_131                          : std_logic;
  SIGNAL tmp_132                          : std_logic;
  SIGNAL rd_62_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_133                          : std_logic;
  SIGNAL tmp_134                          : std_logic;
  SIGNAL tmp_135                          : std_logic;
  SIGNAL tmp_136                          : std_logic;
  SIGNAL rd_61_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_137                          : std_logic;
  SIGNAL gain_en_in_1                     : std_logic;  -- ufix1
  SIGNAL gain_en_in_2                     : std_logic;  -- ufix1
  SIGNAL tmp_138                          : std_logic;
  SIGNAL tmp_139                          : std_logic;
  SIGNAL tmp_140                          : std_logic;
  SIGNAL tmp_141                          : std_logic;
  SIGNAL tmp_142                          : std_logic;
  SIGNAL tmp_143                          : std_logic;
  SIGNAL tmp_144                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_145                          : std_logic;
  SIGNAL tmp_146                          : std_logic;
  SIGNAL tmp_147                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_148                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p139_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p139_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p139_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p139_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p139_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p139_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_149                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_150                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_151                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_152                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_153                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_154                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_155                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_156                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL rd_52_reg                        : vector_of_signed49(0 TO 1);  -- sfix49 [2]
  SIGNAL tmp_157                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL c                                : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p83c_sub_cast                    : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p83c_sub_cast_1                  : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_158                          : std_logic;
  SIGNAL tmp_159                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p82tmp_cast                      : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL p82tmp_cast_1                    : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL tmp_160                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL rssi_diff                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_high_goal_in_unsigned       : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rd_10_reg                        : vector_of_unsigned30(0 TO 2);  -- ufix30 [3]
  SIGNAL rssi_high_goal_in_1              : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL alpha_relop1_1                   : std_logic;
  SIGNAL rssi_low_goal_in_unsigned        : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL rd_11_reg                        : vector_of_unsigned30(0 TO 2);  -- ufix30 [3]
  SIGNAL rssi_low_goal_in_1               : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL alpha_relop1_2                   : std_logic;
  SIGNAL tmp_161                          : std_logic;
  SIGNAL tmp_162                          : std_logic;
  SIGNAL tmp_163                          : std_logic;  -- ufix1
  SIGNAL tmp_164                          : std_logic;  -- ufix1
  SIGNAL tmp_165                          : std_logic;  -- ufix1
  SIGNAL tmp_166                          : std_logic;  -- ufix1
  SIGNAL tmp_167                          : std_logic;  -- ufix1
  SIGNAL tmp_168                          : std_logic;  -- ufix1
  SIGNAL tmp_169                          : std_logic;  -- ufix1
  SIGNAL tmp_170                          : std_logic;  -- ufix1
  SIGNAL tmp_171                          : std_logic;  -- ufix1
  SIGNAL tmp_172                          : std_logic;  -- ufix1
  SIGNAL tmp_174                          : std_logic;  -- ufix1
  SIGNAL tmp_175                          : std_logic;  -- ufix1
  SIGNAL tmp_176                          : std_logic;  -- ufix1
  SIGNAL tmp_177                          : std_logic;  -- ufix1
  SIGNAL tmp_178                          : std_logic;  -- ufix1
  SIGNAL tmp_179                          : std_logic;
  SIGNAL tmp_180                          : std_logic;
  SIGNAL alpha_relop1_3                   : std_logic;
  SIGNAL alpha_relop1_4                   : std_logic;
  SIGNAL dir_en_out                       : std_logic;  -- ufix1
  SIGNAL dir_en_out_1                     : std_logic;  -- ufix1
  SIGNAL rd_4_reg                         : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_2                     : std_logic;  -- ufix1
  SIGNAL tmp_181                          : std_logic;
  SIGNAL tmp_182                          : std_logic;  -- ufix1
  SIGNAL tmp_183                          : std_logic;  -- ufix1
  SIGNAL tmp_184                          : std_logic;  -- ufix1
  SIGNAL tmp_185                          : std_logic;  -- ufix1
  SIGNAL tmp_186                          : std_logic;
  SIGNAL tmp_187                          : std_logic;  -- ufix1
  SIGNAL rd_28_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_188                          : std_logic;  -- ufix1
  SIGNAL tmp_190                          : std_logic;  -- ufix1
  SIGNAL tmp_191                          : std_logic;
  SIGNAL tmp_192                          : std_logic;
  SIGNAL tmp_193                          : std_logic;
  SIGNAL rd_63_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_194                          : std_logic;
  SIGNAL tmp_195                          : std_logic;  -- ufix1
  SIGNAL tmp_196                          : std_logic;  -- ufix1
  SIGNAL tmp_197                          : std_logic;
  SIGNAL tmp_198                          : std_logic;
  SIGNAL alpha_relop1_5                   : std_logic;
  SIGNAL alpha_relop1_6                   : std_logic;
  SIGNAL dir_out_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_out_2                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_8_reg                         : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_3                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_199                          : std_logic;
  SIGNAL tmp_200                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_201                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_202                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_203                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_204                          : std_logic;
  SIGNAL tmp_205                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_29_reg                        : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL tmp_206                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_208                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_209                          : std_logic;  -- ufix1
  SIGNAL tmp_210                          : std_logic;  -- ufix1
  SIGNAL tmp_211                          : std_logic;
  SIGNAL tmp_212                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_213                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_214                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_latch                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_out_tmp                      : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_215                          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL blinky_cnt                       : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_216                          : unsigned(13 DOWNTO 0);  -- ufix14
  SIGNAL tmp_217                          : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tmp_218                          : unsigned(14 DOWNTO 0);  -- ufix15
  SIGNAL tmp_219                          : unsigned(27 DOWNTO 0);  -- ufix28_En37
  SIGNAL blinky_1                         : std_logic;  -- ufix1
  SIGNAL blinky_2                         : std_logic;  -- ufix1
  SIGNAL blinky_3                         : std_logic;  -- ufix1
  SIGNAL blinky_4                         : std_logic;  -- ufix1
  SIGNAL delayMatch_reg                   : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL d1_tmp                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d2_1                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d2_2                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d2_tmp                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d3_1                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d3_tmp                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d4_tmp                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d5_tmp                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL d6_1                             : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL d6_2                             : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL d6_tmp                           : unsigned(29 DOWNTO 0);  -- ufix30
  SIGNAL d7_1                             : std_logic;  -- ufix1
  SIGNAL d7_2                             : std_logic;  -- ufix1
  SIGNAL d7_3                             : std_logic;  -- ufix1
  SIGNAL d8_1                             : std_logic;  -- ufix1
  SIGNAL d8_2                             : std_logic;  -- ufix1
  SIGNAL rd_19_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL gain_in_unsigned                 : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL gain_in_1                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL gain_in_2                        : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL gain_out_1                       : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL gain_out_tmp                     : unsigned(5 DOWNTO 0);  -- ufix6

BEGIN
  i_in_signed <= signed(i_in);

  enb <= clk_enable;

  rd_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_in_1 <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_in_1 <= i_in_signed;
      END IF;
    END IF;
  END PROCESS rd_12_process;


  rd_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rx_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rx_en_in_1 <= rx_en_in;
      END IF;
    END IF;
  END PROCESS rd_15_process;


  
  tmp <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  p209tmp_cast <= resize(i_in_1, 25);
  p209tmp_cast_1 <= p209tmp_cast(23 DOWNTO 0);
  tmp_1 <= resize(p209tmp_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  
  tmp_2 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_3 <= tmp_2;
      END IF;
    END IF;
  END PROCESS rd_36_process;


  
  tmp_4 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  p202tmp_cast <= resize(i_in_1, 25);
  p202tmp_cast_1 <= p202tmp_cast(23 DOWNTO 0);
  tmp_5 <= resize(p202tmp_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_7 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_7 <= tmp_6;
      END IF;
    END IF;
  END PROCESS rd_51_process;


  p203tmp_mul_temp <= to_signed(2#000111111111111#, 15) * tmp_6;
  p203tmp_cast <= p203tmp_mul_temp(37 DOWNTO 0);
  tmp_8 <= resize(p203tmp_cast, 39);

  rd_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_9 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_9 <= tmp_8;
      END IF;
    END IF;
  END PROCESS rd_43_process;


  tmp_10 <= tmp_9 + tmp_5;

  tmp_11 <= tmp_10(35 DOWNTO 12);

  
  tmp_6 <= tmp_11 WHEN tmp_4 = '1' ELSE
      tmp_7;

  
  tmp_12 <= '1' WHEN tmp_6 < 0 ELSE
      '0';

  p181tmp_cast <= resize(tmp_6, 25);
  p181tmp_cast_1 <=  - (p181tmp_cast);
  tmp_13 <= p181tmp_cast_1(23 DOWNTO 0);

  
  tmp_14 <= tmp_6 WHEN tmp_12 = '0' ELSE
      tmp_13;

  rd_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_15 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_15 <= tmp_14;
      END IF;
    END IF;
  END PROCESS rd_49_process;


  
  tmp_16 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_17 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_17 <= tmp_16;
      END IF;
    END IF;
  END PROCESS rd_30_process;


  rd_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_18 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_18 <= tmp_11;
      END IF;
    END IF;
  END PROCESS rd_44_process;


  
  tmp_19 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  q_in_signed <= signed(q_in);

  rd_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_in_1 <= to_signed(2#000000000000#, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_in_1 <= q_in_signed;
      END IF;
    END IF;
  END PROCESS rd_13_process;


  p205tmp_cast <= resize(q_in_1, 25);
  p205tmp_cast_1 <= p205tmp_cast(23 DOWNTO 0);
  tmp_20 <= resize(p205tmp_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_22 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_22 <= tmp_21;
      END IF;
    END IF;
  END PROCESS rd_34_process;


  
  tmp_21 <= tmp_23 WHEN tmp_19 = '1' ELSE
      tmp_22;

  p206tmp_mul_temp <= to_signed(2#000111111111111#, 15) * tmp_21;
  p206tmp_cast <= p206tmp_mul_temp(37 DOWNTO 0);
  tmp_24 <= resize(p206tmp_cast, 39);

  rd_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_25 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_25 <= tmp_24;
      END IF;
    END IF;
  END PROCESS rd_33_process;


  tmp_26 <= tmp_25 + tmp_20;

  tmp_23 <= tmp_26(35 DOWNTO 12);

  rd_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_27 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_27 <= tmp_23;
      END IF;
    END IF;
  END PROCESS rd_47_process;


  
  tmp_28 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  p213tmp_cast <= resize(q_in_1, 25);
  p213tmp_cast_1 <= p213tmp_cast(23 DOWNTO 0);
  tmp_29 <= resize(p213tmp_cast_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  --correct false positive/nagatives
  
  tmp_30 <= '1' WHEN tmp_6 < 0 ELSE
      '0';

  p179tmp_cast <= resize(tmp_6, 25);
  p179tmp_cast_1 <=  - (p179tmp_cast);
  tmp_31 <= p179tmp_cast_1(23 DOWNTO 0);

  
  tmp_32 <= tmp_6 WHEN tmp_30 = '0' ELSE
      tmp_31;

  rd_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_33 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_33 <= tmp_32;
      END IF;
    END IF;
  END PROCESS rd_50_process;


  
  tmp_34 <= '1' WHEN tmp_33 < 204800 ELSE
      '0';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --       Generated by MATLAB 8.3, MATLAB Coder 2.6 and HDL Coder 3.4        %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --alpha = alpha_in/2^12;
  --1700*1700*2;
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- DC Correction section
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  tmp_35 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_36 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_36 <= tmp_35;
      END IF;
    END IF;
  END PROCESS rd_37_process;


  --dc offset threshold is higher than needed
  tmp_37 <= noise_offset + 10;

  p199_sub_cast <= resize(tmp_18, 25);
  p199_sub_cast_1 <= resize(i_dc, 25);
  p199_sub_temp <= p199_sub_cast - p199_sub_cast_1;
  p199_cast <= resize(p199_sub_temp, 34);
  p199_add_temp <= 50 + resize(noise_offset, 21);
  p199_cast_1 <= signed(resize(p199_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p199_tmp <= tmp_38 WHEN p199_cast > p199_cast_1 ELSE
      noise_inc;
  p199_sub_cast_2 <= resize(tmp_27, 25);
  p199_sub_cast_3 <= resize(q_dc, 25);
  p199_sub_temp_1 <= p199_sub_cast_2 - p199_sub_cast_3;
  p199_cast_2 <= resize(p199_sub_temp_1, 34);
  p199_add_temp_1 <= 50 + resize(noise_offset, 21);
  p199_cast_3 <= signed(resize(p199_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p199_tmp_1 <= p199_tmp + 1 WHEN p199_cast_2 > p199_cast_3 ELSE
      p199_tmp;
  
  tmp_39 <= to_unsigned(16#00000#, 20) WHEN tmp_36 = '1' AND (p199_tmp_1 > 10) ELSE
      p199_tmp_1 WHEN tmp_36 = '1' ELSE
      noise_inc;

  
  tmp_40 <= to_unsigned(16#00000#, 20) WHEN tmp_34 = '1' ELSE
      tmp_39;

  noise_inc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_inc <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_inc <= tmp_40;
      END IF;
    END IF;
  END PROCESS noise_inc_reg_process;


  --there is a high dc_offset value that needs to be corrected
  -- too much noise, raise cieling.
  tmp_38 <= noise_inc + 1;

  rd_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_42 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_42 <= tmp_41;
      END IF;
    END IF;
  END PROCESS rd_48_process;


  p211tmp_cast <= q_dc_1 & '0';
  p211tmp_cast_1 <= p211tmp_cast srl 1;
  tmp_43 <= p211tmp_cast_1(24 DOWNTO 1);

  p183_sub_cast <= resize(tmp_23, 25);
  p183_sub_cast_1 <= resize(q_dc_1, 25);
  p183_sub_temp <= p183_sub_cast - p183_sub_cast_1;
  p183_cast <= resize(p183_sub_temp, 34);
  p183_add_temp <= 50 + resize(tmp_44, 21);
  p183_cast_1 <= signed(resize(p183_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p183_tmp <= tmp_43 WHEN p183_cast > p183_cast_1 ELSE
      q_dc_1;
  
  tmp_41 <= p183_tmp WHEN tmp_28 = '1' ELSE
      tmp_42;

  --update the q dc offset
  p214tmp_mul_temp <= to_signed(2#000111111111111#, 15) * tmp_41;
  p214tmp_cast <= p214tmp_mul_temp(37 DOWNTO 0);
  tmp_45 <= resize(p214tmp_cast, 39);

  rd_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_46 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_46 <= tmp_45;
      END IF;
    END IF;
  END PROCESS rd_45_process;


  tmp_47 <= tmp_46 + tmp_29;

  q_dc_1 <= tmp_47(35 DOWNTO 12);

  rd_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_dc <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_dc <= q_dc_1;
      END IF;
    END IF;
  END PROCESS rd_46_process;


  rd_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_dc <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_dc <= i_dc_1;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  rd_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_offset <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_offset <= tmp_44;
      END IF;
    END IF;
  END PROCESS rd_35_process;


  p194_sub_cast <= resize(tmp_18, 25);
  p194_sub_cast_1 <= resize(i_dc, 25);
  p194_sub_temp <= p194_sub_cast - p194_sub_cast_1;
  p194_cast <= resize(p194_sub_temp, 34);
  p194_add_temp <= 50 + resize(noise_offset, 21);
  p194_cast_1 <= signed(resize(p194_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p194_tmp <= noise_dec WHEN p194_cast > p194_cast_1 ELSE
      tmp_48;
  p194_sub_cast_2 <= resize(tmp_27, 25);
  p194_sub_cast_3 <= resize(q_dc, 25);
  p194_sub_temp_1 <= p194_sub_cast_2 - p194_sub_cast_3;
  p194_cast_2 <= resize(p194_sub_temp_1, 34);
  p194_add_temp_1 <= 50 + resize(noise_offset, 21);
  p194_cast_3 <= signed(resize(p194_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p194_tmp_1 <= p194_tmp WHEN p194_cast_2 > p194_cast_3 ELSE
      p194_tmp + 1;
  
  tmp_49 <= to_unsigned(16#00000#, 20) WHEN tmp_17 = '1' AND (p194_tmp_1 > 100000) ELSE
      p194_tmp_1 WHEN tmp_17 = '1' ELSE
      noise_dec;

  tmp_50 <= resize(tmp_44, 21) - 10;

  alpha_1_cast <= resize(tmp_15, 34);
  alpha_1_cast_1 <= signed(resize(tmp_50 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  alpha_relop1 <= '1' WHEN alpha_1_cast > alpha_1_cast_1 ELSE
      '0';

  
  tmp_51 <= to_unsigned(16#00000#, 20) WHEN alpha_relop1 = '1' ELSE
      tmp_49;

  noise_dec_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_dec <= to_unsigned(16#00000#, 20);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_dec <= tmp_51;
      END IF;
    END IF;
  END PROCESS noise_dec_reg_process;


  -- too much noise, raise cieling.
  tmp_48 <= noise_dec + 1;

  p197_sub_cast <= resize(tmp_18, 25);
  p197_sub_cast_1 <= resize(i_dc, 25);
  p197_sub_temp <= p197_sub_cast - p197_sub_cast_1;
  p197_cast <= resize(p197_sub_temp, 34);
  p197_add_temp <= 50 + resize(noise_offset, 21);
  p197_cast_1 <= signed(resize(p197_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p197_tmp_1 <= noise_dec WHEN p197_cast > p197_cast_1 ELSE
      tmp_48;
  
  p197_tmp <= tmp_38 WHEN p197_cast > p197_cast_1 ELSE
      noise_inc;
  p197_sub_cast_2 <= resize(tmp_27, 25);
  p197_sub_cast_3 <= resize(q_dc, 25);
  p197_sub_temp_1 <= p197_sub_cast_2 - p197_sub_cast_3;
  p197_cast_2 <= resize(p197_sub_temp_1, 34);
  p197_add_temp_1 <= 50 + resize(noise_offset, 21);
  p197_cast_3 <= signed(resize(p197_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p197_tmp_3 <= p197_tmp_1 WHEN p197_cast_2 > p197_cast_3 ELSE
      p197_tmp_1 + 1;
  
  p197_tmp_2 <= p197_tmp + 1 WHEN p197_cast_2 > p197_cast_3 ELSE
      p197_tmp;
  
  p197_tmp_4 <= tmp_37 WHEN p197_tmp_2 > 10 ELSE
      noise_offset;
  
  p197_tmp_5 <= p197_tmp_4 - 10 WHEN p197_tmp_3 > 100000 ELSE
      p197_tmp_4;
  
  tmp_44 <= p197_tmp_5 WHEN tmp_3 = '1' ELSE
      noise_offset;

  rd_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_53 <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_53 <= tmp_52;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  --update the i dc offset
  p210tmp_mul_temp <= to_signed(2#000111111111111#, 15) * tmp_52;
  p210tmp_cast <= p210tmp_mul_temp(37 DOWNTO 0);
  tmp_54 <= resize(p210tmp_cast, 39);

  rd_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_55 <= to_signed(0, 39);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_55 <= tmp_54;
      END IF;
    END IF;
  END PROCESS rd_40_process;


  tmp_56 <= tmp_55 + tmp_1;

  i_dc_1 <= tmp_56(35 DOWNTO 12);

  p207tmp_cast <= i_dc_1 & '0';
  p207tmp_cast_1 <= p207tmp_cast srl 1;
  tmp_57 <= p207tmp_cast_1(24 DOWNTO 1);

  p186_sub_cast <= resize(tmp_11, 25);
  p186_sub_cast_1 <= resize(i_dc_1, 25);
  p186_sub_temp <= p186_sub_cast - p186_sub_cast_1;
  p186_cast <= resize(p186_sub_temp, 34);
  p186_add_temp <= 50 + resize(tmp_44, 21);
  p186_cast_1 <= signed(resize(p186_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 34));
  
  p186_tmp <= tmp_57 WHEN p186_cast > p186_cast_1 ELSE
      i_dc_1;
  
  tmp_52 <= p186_tmp WHEN tmp = '1' ELSE
      tmp_53;

  p177i_out_sub_cast <= resize(i_in_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p177i_out_sub_cast_1 <= resize(tmp_52, 25);
  p177i_out_sub_temp <= p177i_out_sub_cast - p177i_out_sub_cast_1;
  i_out_1 <= p177i_out_sub_temp(23 DOWNTO 12);

  rd_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_38_reg <= (OTHERS => to_signed(2#000000000000#, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_38_reg(0) <= i_out_1;
        rd_38_reg(1 TO 2) <= rd_38_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_38_process;

  i_out_tmp <= rd_38_reg(2);

  i_out <= std_logic_vector(i_out_tmp);

  p176q_out_sub_cast <= resize(q_in_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p176q_out_sub_cast_1 <= resize(tmp_41, 25);
  p176q_out_sub_temp <= p176q_out_sub_cast - p176q_out_sub_cast_1;
  q_out_1 <= p176q_out_sub_temp(23 DOWNTO 12);

  rd_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_31_reg <= (OTHERS => to_signed(2#000000000000#, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_31_reg(0) <= q_out_1;
        rd_31_reg(1 TO 2) <= rd_31_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_31_process;

  q_out_tmp <= rd_31_reg(2);

  q_out <= std_logic_vector(q_out_tmp);

  
  tmp_58 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  
  tmp_59 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_60 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_60 <= tmp_59;
      END IF;
    END IF;
  END PROCESS rd_57_process;


  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- RSSI Estimation
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  tmp_61 <= i_out_1 * i_out_1;

  tmp_62 <= resize(tmp_61, 25);

  rd_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_63 <= to_signed(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_63 <= tmp_62;
      END IF;
    END IF;
  END PROCESS rd_39_process;


  tmp_64 <= q_out_1 * q_out_1;

  tmp_65 <= resize(tmp_64, 25);

  rd_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_66 <= to_signed(2#0000000000000000000000000#, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_66 <= tmp_65;
      END IF;
    END IF;
  END PROCESS rd_32_process;


  tmp_67 <= tmp_63 + tmp_66;

  rssi_inst <= unsigned(tmp_67(22 DOWNTO 0));

  
  tmp_68 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  
  tmp_69 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  
  tmp_70 <= to_unsigned(2#000000001#, 9) WHEN tmp_69 = '1' ELSE
      counter;

  counter_1 <= tmp_71 + 1;

  
  p133_tmp <= to_unsigned(2#000000000#, 9) WHEN counter_1 >= 256 ELSE
      counter_1;
  
  tmp_72 <= to_unsigned(2#000000000#, 9) WHEN tmp_68 = '1' ELSE
      p133_tmp;

  
  tmp_73 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_74 <= tmp_72 WHEN tmp_73 = '1' ELSE
      tmp_71;

  
  tmp_75 <= tmp_74 WHEN tmp_60 = '1' ELSE
      counter;

  counter_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counter <= to_unsigned(2#000000000#, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        counter <= tmp_75;
      END IF;
    END IF;
  END PROCESS counter_reg_process;


  
  tmp_76 <= '1' WHEN counter = 0 ELSE
      '0';

  
  tmp_71 <= tmp_70 WHEN tmp_76 = '1' ELSE
      counter;

  
  tmp_77 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_78 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  
  tmp_79 <= '1' WHEN counter = 0 ELSE
      '0';

  
  tmp_80 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  --this overrides everything. If we're saturating, back off the gain
  
  tmp_81 <= '1' WHEN rssi_inst > 5780000 ELSE
      '0';

  
  tmp_82 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_83 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_83 <= tmp_82;
      END IF;
    END IF;
  END PROCESS rd_55_process;


  --HDL code generation from MATLAB function: dc_offset_correction_fixpt
  -- decrease by a factor of 10
  -- see if the MCU has done something and if so reset
  --end
  --    dir_state = 1;
  --    dir_en_out = 1;
  --    dir_out = 2; % decrease
  --if (ai > 1500) || (aq > 1500)
  -- this overrides anything else
  -- we're saturating the ADC so decrease gain
  --too high - decrease
  --too low - increase
  -- wait for some action and the processor is done
  -- false alarm, reset the counter
  -- yay, data
  -- if its data, accumulate it
  tmp_84 <= timeout - 1;

  
  tmp_85 <= '1' WHEN timeout > 0 ELSE
      '0';

  
  tmp_86 <= tmp_84 WHEN tmp_85 = '1' ELSE
      timeout;

  
  tmp_88 <= '1' WHEN tmp_87 > 33554432 ELSE
      '0';

  
  tmp_89 <= to_unsigned(16#0000000#, 28) WHEN tmp_88 = '1' ELSE
      tmp_87;

  
  tmp_90 <= tmp_89 WHEN tmp_83 = '1' ELSE
      timeout;

  
  tmp_91 <= to_unsigned(16#0000000#, 28) WHEN tmp_81 = '1' ELSE
      tmp_90;

  timeout_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      timeout <= to_unsigned(16#0000000#, 28);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        timeout <= tmp_91;
      END IF;
    END IF;
  END PROCESS timeout_reg_process;


  -- we think we have data
  tmp_92 <= timeout + 1;

  
  tmp_93 <= tmp_92 WHEN tmp_80 = '0' ELSE
      tmp_86;

  
  tmp_94 <= tmp_93 WHEN tmp_79 = '1' ELSE
      timeout;

  
  p135_tmp <= to_unsigned(16#0000000#, 28) WHEN counter_1 >= 256 ELSE
      tmp_94;
  
  tmp_95 <= tmp_94 WHEN tmp_78 = '1' ELSE
      p135_tmp;

  
  tmp_87 <= tmp_95 WHEN tmp_77 = '1' ELSE
      tmp_94;

  
  tmp_96 <= '1' WHEN tmp_87 > 33554432 ELSE
      '0';

  
  tmp_97 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_98 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rssi_en_out <= '0';

  rd_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_14_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_14_reg(0) <= rssi_en_out;
        rd_14_reg(1) <= rd_14_reg(0);
      END IF;
    END IF;
  END PROCESS rd_14_process;

  rssi_en_out_1 <= rd_14_reg(1);

  
  p137_tmp <= '1' WHEN counter_1 >= 256 ELSE
      rssi_en_out_1;
  
  tmp_99 <= rssi_en_out_1 WHEN tmp_98 = '1' ELSE
      p137_tmp;

  rd_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_100 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_100 <= tmp_58;
      END IF;
    END IF;
  END PROCESS rd_59_process;


  
  tmp_101 <= tmp_99 WHEN tmp_97 = '1' ELSE
      rssi_en_out_1;

  
  tmp_102 <= '1' WHEN tmp_96 = '1' ELSE
      tmp_101;

  
  tmp_103 <= tmp_102 WHEN tmp_100 = '1' ELSE
      rssi_en_out_1;

  rd_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_104 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_104 <= tmp_103;
      END IF;
    END IF;
  END PROCESS rd_60_process;


  
  tmp_105 <= '1' WHEN tmp_104 = '1' ELSE
      '0';

  
  tmp_106 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_107 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_107 <= tmp_106;
      END IF;
    END IF;
  END PROCESS rd_23_process;


  
  tmp_108 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_109 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  
  tmp_110 <= '1' WHEN counter = 0 ELSE
      '0';

  
  tmp_111 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  
  tmp_112 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_113 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_113 <= tmp_112;
      END IF;
    END IF;
  END PROCESS rd_56_process;


  
  tmp_114 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_115 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  tmp_116 <= resize(rssi_inst, 33);

  
  tmp_119 <= tmp_118 WHEN tmp_115 = '1' ELSE
      tmp_117;

  
  tmp_120 <= tmp_119 WHEN tmp_114 = '1' ELSE
      tmp_118;

  
  tmp_121 <= tmp_120 WHEN tmp_113 = '1' ELSE
      rssi_sum;

  rssi_sum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_sum <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_sum <= tmp_121;
      END IF;
    END IF;
  END PROCESS rssi_sum_reg_process;


  
  tmp_122 <= to_unsigned(0, 32) WHEN tmp_111 = '1' ELSE
      rssi_sum;

  
  tmp_118 <= tmp_122 WHEN tmp_110 = '1' ELSE
      rssi_sum;

  tmp_123 <= resize(tmp_118, 33);

  tmp_124 <= tmp_123 + tmp_116;

  tmp_117 <= tmp_124(31 DOWNTO 0);

  rssi_out_1 <= to_unsigned(16#000000#, 24);

  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_1_reg <= (OTHERS => to_unsigned(16#000000#, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_1_reg(0) <= rssi_out_1;
        rd_1_reg(1) <= rd_1_reg(0);
      END IF;
    END IF;
  END PROCESS rd_1_process;

  rssi_out_2 <= rd_1_reg(1);

  p141_cast <= tmp_117 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p141_cast_1 <= p141_cast srl 8;
  p141_add_cast <= resize(p141_cast_1(39 DOWNTO 7), 34);
  p141_add_temp <= p141_add_cast + to_unsigned(1, 34);
  p141_cast_2 <= p141_add_temp(33 DOWNTO 1);
  
  p141_tmp <= p141_cast_2(23 DOWNTO 0) WHEN counter_1 >= 256 ELSE
      rssi_out_2;
  
  tmp_125 <= rssi_out_2 WHEN tmp_109 = '1' ELSE
      p141_tmp;

  
  tmp_126 <= tmp_125 WHEN tmp_108 = '1' ELSE
      rssi_out_2;

  
  tmp_127 <= tmp_126 WHEN tmp_107 = '1' ELSE
      rssi_out_2;

  rd_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_128 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_128 <= tmp_127;
      END IF;
    END IF;
  END PROCESS rd_58_process;


  rssi_latch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_latch <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_latch <= tmp_129;
      END IF;
    END IF;
  END PROCESS rssi_latch_reg_process;


  
  tmp_129 <= tmp_128 WHEN tmp_105 = '1' ELSE
      rssi_latch;

  rd_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_out_tmp <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_out_tmp <= tmp_129;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  rssi_out <= std_logic_vector(rssi_out_tmp);

  
  tmp_130 <= '1' WHEN rssi_inst > 5780000 ELSE
      '0';

  rd_64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_131 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_131 <= tmp_130;
      END IF;
    END IF;
  END PROCESS rd_64_process;


  
  tmp_132 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_62_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_62_reg(0) <= tmp_132;
        rd_62_reg(1) <= rd_62_reg(0);
      END IF;
    END IF;
  END PROCESS rd_62_process;

  tmp_133 <= rd_62_reg(1);

  
  tmp_134 <= '1' WHEN rssi_inst > 5780000 ELSE
      '0';

  rd_67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_135 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_135 <= tmp_134;
      END IF;
    END IF;
  END PROCESS rd_67_process;


  
  tmp_136 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_61_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_61_reg(0) <= tmp_136;
        rd_61_reg(1) <= rd_61_reg(0);
      END IF;
    END IF;
  END PROCESS rd_61_process;

  tmp_137 <= rd_61_reg(1);

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_en_in_1 <= gain_en_in;
      END IF;
    END IF;
  END PROCESS rd_5_process;


  rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_en_in_2 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_en_in_2 <= gain_en_in_1;
      END IF;
    END IF;
  END PROCESS rd_6_process;


  
  tmp_138 <= '1' WHEN gain_en_in_2 = '0' ELSE
      '0';

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_139 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_139 <= tmp_138;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  
  tmp_140 <= '1' WHEN tmp_104 = '1' ELSE
      '0';

  
  tmp_141 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_142 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_142 <= tmp_141;
      END IF;
    END IF;
  END PROCESS rd_54_process;


  
  tmp_143 <= '1' WHEN tmp_87 > 33554432 ELSE
      '0';

  tmp_144 <= resize(rssi_inst, 24);

  
  tmp_145 <= '1' WHEN tmp_71 /= 0 ELSE
      '0';

  
  tmp_146 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  p139_cast <= tmp_117 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p139_cast_1 <= p139_cast srl 8;
  p139_add_cast <= resize(p139_cast_1(39 DOWNTO 7), 34);
  p139_add_temp <= p139_add_cast + to_unsigned(1, 34);
  p139_cast_2 <= p139_add_temp(33 DOWNTO 1);
  
  p139_tmp <= p139_cast_2(23 DOWNTO 0) WHEN counter_1 >= 256 ELSE
      tmp_147;
  
  tmp_148 <= tmp_147 WHEN tmp_146 = '1' ELSE
      p139_tmp;

  
  tmp_149 <= tmp_148 WHEN tmp_145 = '1' ELSE
      tmp_147;

  
  tmp_150 <= tmp_144 WHEN tmp_143 = '1' ELSE
      tmp_149;

  
  tmp_151 <= tmp_150 WHEN tmp_142 = '1' ELSE
      tmp_147;

  rd_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_147 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_147 <= tmp_151;
      END IF;
    END IF;
  END PROCESS rd_53_process;


  tmp_152 <= tmp_6 * tmp_6;

  tmp_153 <= resize(tmp_152, 49);

  tmp_154 <= tmp_21 * tmp_21;

  tmp_155 <= resize(tmp_154, 49);

  tmp_156 <= tmp_153 + tmp_155;

  rd_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_52_reg <= (OTHERS => to_signed(0, 49));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_52_reg(0) <= tmp_156;
        rd_52_reg(1) <= rd_52_reg(0);
      END IF;
    END IF;
  END PROCESS rd_52_process;

  tmp_157 <= rd_52_reg(1);

  -- dir_out = 0 - do nothing
  -- dir_out = 1 - increase
  -- dir_out = 2 - decrease
  --ai = abs(i_in);
  --aq = abs(q_in);
  -- only increase power if the rssi is away from the mean
  p83c_sub_cast <= signed(resize(tmp_147 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 50));
  p83c_sub_cast_1 <= resize(tmp_157, 50);
  c <= p83c_sub_cast - p83c_sub_cast_1;

  
  tmp_158 <= '1' WHEN c < to_signed(0, 50) ELSE
      '0';

  p82tmp_cast <= resize(c, 51);
  p82tmp_cast_1 <=  - (p82tmp_cast);
  tmp_159 <= p82tmp_cast_1(49 DOWNTO 0);

  
  tmp_160 <= c WHEN tmp_158 = '0' ELSE
      tmp_159;

  rssi_diff <= unsigned(tmp_160(47 DOWNTO 24));

  rssi_high_goal_in_unsigned <= unsigned(rssi_high_goal_in);

  rd_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_10_reg <= (OTHERS => to_unsigned(2#000000000000000000000000000000#, 30));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_10_reg(0) <= rssi_high_goal_in_unsigned;
        rd_10_reg(1 TO 2) <= rd_10_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_10_process;

  rssi_high_goal_in_1 <= rd_10_reg(2);

  
  alpha_relop1_1 <= '1' WHEN resize(rssi_diff, 30) > rssi_high_goal_in_1 ELSE
      '0';

  rssi_low_goal_in_unsigned <= unsigned(rssi_low_goal_in);

  rd_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_11_reg <= (OTHERS => to_unsigned(2#000000000000000000000000000000#, 30));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_11_reg(0) <= rssi_low_goal_in_unsigned;
        rd_11_reg(1 TO 2) <= rd_11_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_11_process;

  rssi_low_goal_in_1 <= rd_11_reg(2);

  
  alpha_relop1_2 <= '1' WHEN resize(rssi_diff, 30) < rssi_low_goal_in_1 ELSE
      '0';

  
  tmp_161 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  rd_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_162 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_162 <= tmp_161;
      END IF;
    END IF;
  END PROCESS rd_27_process;


  
  tmp_164 <= '0' WHEN tmp_162 = '1' ELSE
      tmp_163;

  rd_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_165 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_165 <= tmp_164;
      END IF;
    END IF;
  END PROCESS rd_26_process;


  rd_66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_166 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_166 <= tmp_163;
      END IF;
    END IF;
  END PROCESS rd_66_process;


  
  tmp_167 <= '1' WHEN alpha_relop1_2 = '1' ELSE
      tmp_166;

  
  tmp_168 <= '1' WHEN alpha_relop1_1 = '1' ELSE
      tmp_167;

  
  tmp_169 <= tmp_168 WHEN tmp_140 = '1' ELSE
      tmp_166;

  
  tmp_170 <= tmp_169 WHEN tmp_139 = '1' ELSE
      tmp_166;

  tmp_171 <= tmp_163;

  rd_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_172 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_172 <= tmp_171;
      END IF;
    END IF;
  END PROCESS rd_20_process;


  p54_output : PROCESS (tmp_172, tmp_170, tmp_165)
    VARIABLE tmp173 : std_logic;
  BEGIN

    CASE tmp_172 IS
      WHEN '0' =>
        tmp173 := tmp_170;
      WHEN '1' =>
        tmp173 := tmp_165;
      WHEN OTHERS => 
        tmp173 := '0';
    END CASE;

    tmp_174 <= tmp173;
  END PROCESS p54_output;


  
  tmp_175 <= tmp_174 WHEN tmp_137 = '1' ELSE
      tmp_166;

  
  tmp_176 <= '1' WHEN tmp_135 = '1' ELSE
      tmp_175;

  tmp_163 <= tmp_176;

  tmp_177 <= tmp_163;

  rd_65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_178 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_178 <= tmp_177;
      END IF;
    END IF;
  END PROCESS rd_65_process;


  
  tmp_179 <= '1' WHEN gain_en_in_2 = '0' ELSE
      '0';

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_180 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_180 <= tmp_179;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  
  alpha_relop1_3 <= '1' WHEN resize(rssi_diff, 30) > rssi_high_goal_in_1 ELSE
      '0';

  
  alpha_relop1_4 <= '1' WHEN resize(rssi_diff, 30) < rssi_low_goal_in_1 ELSE
      '0';

  dir_en_out <= '0';

  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_en_out_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_en_out_1 <= dir_en_out;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_4_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_4_reg(0) <= dir_en_out_1;
        rd_4_reg(1) <= rd_4_reg(0);
      END IF;
    END IF;
  END PROCESS rd_4_process;

  dir_en_out_2 <= rd_4_reg(1);

  
  tmp_181 <= '1' WHEN tmp_104 = '1' ELSE
      '0';

  
  tmp_182 <= '1' WHEN alpha_relop1_4 = '1' ELSE
      dir_en_out_2;

  
  tmp_183 <= '1' WHEN alpha_relop1_3 = '1' ELSE
      tmp_182;

  
  tmp_184 <= tmp_183 WHEN tmp_181 = '1' ELSE
      dir_en_out_2;

  
  tmp_185 <= tmp_184 WHEN tmp_180 = '1' ELSE
      dir_en_out_2;

  
  tmp_186 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  
  tmp_187 <= '1' WHEN tmp_186 = '1' ELSE
      dir_en_out_1;

  rd_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_28_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_28_reg(0) <= tmp_187;
        rd_28_reg(1) <= rd_28_reg(0);
      END IF;
    END IF;
  END PROCESS rd_28_process;

  tmp_188 <= rd_28_reg(1);

  p56_output : PROCESS (tmp_178, tmp_185, tmp_188, dir_en_out_2)
    VARIABLE tmp189 : std_logic;
  BEGIN

    CASE tmp_178 IS
      WHEN '0' =>
        tmp189 := tmp_185;
      WHEN '1' =>
        tmp189 := tmp_188;
      WHEN OTHERS => 
        tmp189 := dir_en_out_2;
    END CASE;

    tmp_190 <= tmp189;
  END PROCESS p56_output;


  
  tmp_191 <= '1' WHEN rssi_inst > 5780000 ELSE
      '0';

  rd_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_192 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_192 <= tmp_191;
      END IF;
    END IF;
  END PROCESS rd_18_process;


  
  tmp_193 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_63_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_63_reg(0) <= tmp_193;
        rd_63_reg(1) <= rd_63_reg(0);
      END IF;
    END IF;
  END PROCESS rd_63_process;

  tmp_194 <= rd_63_reg(1);

  tmp_195 <= tmp_163;

  rd_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_196 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_196 <= tmp_195;
      END IF;
    END IF;
  END PROCESS rd_25_process;


  
  tmp_197 <= '1' WHEN gain_en_in_2 = '0' ELSE
      '0';

  rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_198 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_198 <= tmp_197;
      END IF;
    END IF;
  END PROCESS rd_9_process;


  
  alpha_relop1_5 <= '1' WHEN resize(rssi_diff, 30) > rssi_high_goal_in_1 ELSE
      '0';

  
  alpha_relop1_6 <= '1' WHEN resize(rssi_diff, 30) < rssi_low_goal_in_1 ELSE
      '0';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- Gain Correction
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  dir_out_1 <= to_unsigned(2#00#, 2);

  rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_out_2 <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_out_2 <= dir_out_1;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  rd_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_8_reg <= (OTHERS => to_unsigned(2#00#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_8_reg(0) <= dir_out_2;
        rd_8_reg(1) <= rd_8_reg(0);
      END IF;
    END IF;
  END PROCESS rd_8_process;

  dir_out_3 <= rd_8_reg(1);

  
  tmp_199 <= '1' WHEN tmp_104 = '1' ELSE
      '0';

  
  tmp_200 <= to_unsigned(2#01#, 2) WHEN alpha_relop1_6 = '1' ELSE
      dir_out_3;

  
  tmp_201 <= to_unsigned(2#10#, 2) WHEN alpha_relop1_5 = '1' ELSE
      tmp_200;

  
  tmp_202 <= tmp_201 WHEN tmp_199 = '1' ELSE
      dir_out_3;

  
  tmp_203 <= tmp_202 WHEN tmp_198 = '1' ELSE
      dir_out_3;

  
  tmp_204 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  
  tmp_205 <= to_unsigned(2#00#, 2) WHEN tmp_204 = '1' ELSE
      dir_out_2;

  rd_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_29_reg <= (OTHERS => to_unsigned(2#00#, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_29_reg(0) <= tmp_205;
        rd_29_reg(1) <= rd_29_reg(0);
      END IF;
    END IF;
  END PROCESS rd_29_process;

  tmp_206 <= rd_29_reg(1);

  p58_output : PROCESS (tmp_196, tmp_203, tmp_206, dir_out_3)
    VARIABLE tmp207 : unsigned(1 DOWNTO 0);
  BEGIN

    CASE tmp_196 IS
      WHEN '0' =>
        tmp207 := tmp_203;
      WHEN '1' =>
        tmp207 := tmp_206;
      WHEN OTHERS => 
        tmp207 := dir_out_3;
    END CASE;

    tmp_208 <= tmp207;
  END PROCESS p58_output;


  
  tmp_209 <= tmp_190 WHEN tmp_133 = '1' ELSE
      dir_en_out_2;

  
  tmp_210 <= '1' WHEN tmp_131 = '1' ELSE
      tmp_209;

  
  tmp_211 <= '1' WHEN tmp_210 = '1' ELSE
      '0';

  
  tmp_212 <= tmp_208 WHEN tmp_194 = '1' ELSE
      dir_out_3;

  
  tmp_213 <= to_unsigned(2#11#, 2) WHEN tmp_192 = '1' ELSE
      tmp_212;

  dir_latch_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_latch <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_latch <= tmp_214;
      END IF;
    END IF;
  END PROCESS dir_latch_reg_process;


  
  tmp_214 <= tmp_213 WHEN tmp_211 = '1' ELSE
      dir_latch;

  rd_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_out_tmp <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_out_tmp <= tmp_214;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  dir_out <= std_logic_vector(dir_out_tmp);

  blinky_cnt_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_cnt <= to_unsigned(2#00000000000000#, 14);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_cnt <= tmp_215;
      END IF;
    END IF;
  END PROCESS blinky_cnt_reg_process;


  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  tmp_216 <= blinky_cnt;

  tmp_217 <= resize(tmp_216, 15);

  tmp_218 <= tmp_217 + 1;

  tmp_215 <= tmp_218(13 DOWNTO 0);

  tmp_219 <= tmp_215 * 13743;

  blinky_1 <= '0';

  blinky_2 <= blinky_1;

  out_4_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_3 <= blinky_2;
      END IF;
    END IF;
  END PROCESS out_4_pipe_process;


  out_4_pipe_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      blinky_4 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        blinky_4 <= blinky_3;
      END IF;
    END IF;
  END PROCESS out_4_pipe_1_process;


  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= blinky_4;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  blinky <= delayMatch_reg(1);

  rd_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d1_tmp <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d1_tmp <= rssi_diff;
      END IF;
    END IF;
  END PROCESS rd_24_process;


  d1 <= std_logic_vector(d1_tmp);

  d2_1 <= resize(rssi_inst, 24);

  out_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d2_2 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d2_2 <= d2_1;
      END IF;
    END IF;
  END PROCESS out_6_pipe_process;


  out_6_pipe_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d2_tmp <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d2_tmp <= d2_2;
      END IF;
    END IF;
  END PROCESS out_6_pipe_1_process;


  d2 <= std_logic_vector(d2_tmp);

  out_7_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d3_1 <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d3_1 <= tmp_151;
      END IF;
    END IF;
  END PROCESS out_7_pipe_process;


  out_7_pipe_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d3_tmp <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d3_tmp <= d3_1;
      END IF;
    END IF;
  END PROCESS out_7_pipe_1_process;


  d3 <= std_logic_vector(d3_tmp);

  rd_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d4_tmp <= to_unsigned(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d4_tmp <= tmp_129;
      END IF;
    END IF;
  END PROCESS rd_22_process;


  d4 <= std_logic_vector(d4_tmp);

  rd_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d5_tmp <= to_unsigned(2#00#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d5_tmp <= tmp_214;
      END IF;
    END IF;
  END PROCESS rd_17_process;


  d5 <= std_logic_vector(d5_tmp);

  d6_1 <= resize(tmp_91, 30);

  out_10_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d6_2 <= to_unsigned(2#000000000000000000000000000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d6_2 <= d6_1;
      END IF;
    END IF;
  END PROCESS out_10_pipe_process;


  out_10_pipe_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d6_tmp <= to_unsigned(2#000000000000000000000000000000#, 30);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d6_tmp <= d6_2;
      END IF;
    END IF;
  END PROCESS out_10_pipe_1_process;


  d6 <= std_logic_vector(d6_tmp);

  d7_1 <= tmp_103;

  d7_2 <= d7_1;

  out_11_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d7_3 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d7_3 <= d7_2;
      END IF;
    END IF;
  END PROCESS out_11_pipe_process;


  out_11_pipe_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      d7 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        d7 <= d7_3;
      END IF;
    END IF;
  END PROCESS out_11_pipe_1_process;


  d8_1 <= rx_en_in_1;

  d8_2 <= d8_1;

  rd_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_19_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_19_reg(0) <= d8_2;
        rd_19_reg(1 TO 2) <= rd_19_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_19_process;

  d8 <= rd_19_reg(2);

  gain_in_unsigned <= unsigned(gain_in);

  in_6_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_in_1 <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_in_1 <= gain_in_unsigned;
      END IF;
    END IF;
  END PROCESS in_6_pipe_process;


  in_6_pipe_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_in_2 <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_in_2 <= gain_in_1;
      END IF;
    END IF;
  END PROCESS in_6_pipe_1_process;


  out_13_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_out_1 <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_out_1 <= gain_in_2;
      END IF;
    END IF;
  END PROCESS out_13_pipe_process;


  out_13_pipe_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_out_tmp <= to_unsigned(2#000000#, 6);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_out_tmp <= gain_out_1;
      END IF;
    END IF;
  END PROCESS out_13_pipe_1_process;


  gain_out <= std_logic_vector(gain_out_tmp);

  ce_out <= clk_enable;

END rtl;

