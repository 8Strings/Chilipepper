-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\Chilipepper\Labs\Lab_4_A\MATLAB\codegen\dc_offset_correction\hdlsrc\dc_offset_correction_FixPt.vhd
-- Created: 2013-04-19 14:35:52
-- 
-- Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- rssi_out                      ce_out        1
-- rssi_en_out                   ce_out        1
-- dir_out                       ce_out        1
-- dir_en_out                    ce_out        1
-- d1                            ce_out        1
-- d2                            ce_out        1
-- d3                            ce_out        1
-- d4                            ce_out        1
-- d5                            ce_out        1
-- d6                            ce_out        1
-- d7                            ce_out        1
-- d8                            ce_out        1
-- d9                            ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dc_offset_correction_FixPt
-- Source Path: dc_offset_correction_FixPt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.dc_offset_correction_FixPt_pkg.ALL;

ENTITY dc_offset_correction_FixPt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        ce                                :   IN    std_logic;
        i_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        alpha_in                          :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        gain_en_in                        :   IN    std_logic;  -- ufix1
        rssi_low_goal_in                  :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_high_goal_in                 :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rx_en_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        rssi_out                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_en_out                       :   OUT   std_logic;  -- ufix1
        dir_out                           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        dir_en_out                        :   OUT   std_logic;  -- ufix1
        d1                                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        d2                                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        d3                                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        d4                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d5                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d6                                :   OUT   std_logic;  -- ufix1
        d7                                :   OUT   std_logic;  -- ufix1
        d8                                :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        d9                                :   OUT   std_logic  -- ufix1
        );
END dc_offset_correction_FixPt;


ARCHITECTURE rtl OF dc_offset_correction_FixPt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL i_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL i_in_2                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rx_en_in_1                       : std_logic;
  SIGNAL tmp                              : std_logic;
  SIGNAL tmp_1                            : std_logic;
  SIGNAL tmp_2                            : std_logic;
  SIGNAL tmp_3                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_4                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL alpha_in_unsigned                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL alpha                            : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL p205alpha_cast                   : unsigned(23 DOWNTO 0);  -- ufix24_En12
  SIGNAL p205alpha_cast_1                 : unsigned(23 DOWNTO 0);  -- ufix24_En12
  SIGNAL alpha_1                          : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_5                            : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p189tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_6                            : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_7                            : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_8                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p209tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_9                            : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_10                           : std_logic;
  SIGNAL multiplier_cast                  : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_11                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_12                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_13                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_14                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_15                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_16                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p182tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p182tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_17                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_18                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_19                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_20                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_1                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_1            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_21                           : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_22                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_23                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_24                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_25                           : std_logic;
  SIGNAL tmp_26                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_27                           : std_logic;
  SIGNAL tmp_28                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_29                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p152i_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p152i_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p152i_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL i_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL out_0_pipe_reg                   : vector_of_signed12(0 TO 1);  -- sfix12 [2]
  SIGNAL i_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_in_1                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL q_in_2                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_30                           : std_logic;
  SIGNAL tmp_31                           : std_logic;
  SIGNAL tmp_32                           : std_logic;
  SIGNAL tmp_33                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_34                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_35                           : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p203tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_36                           : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_37                           : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_38                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p213tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_39                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_40                           : std_logic;
  SIGNAL multiplier_cast_2                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_2            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_41                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_42                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_43                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_44                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_45                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_46                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p196tmp_cast                     : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p196tmp_cast_1                   : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_47                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_48                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_49                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_50                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_3                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_3            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_51                           : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_52                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_53                           : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_54                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_55                           : std_logic;
  SIGNAL tmp_56                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_57                           : std_logic;
  SIGNAL tmp_58                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_59                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p151q_out_sub_cast               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p151q_out_sub_cast_1             : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p151q_out_sub_temp               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL q_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL out_1_pipe_reg                   : vector_of_signed12(0 TO 1);  -- sfix12 [2]
  SIGNAL q_out_tmp                        : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_60                           : std_logic;
  SIGNAL tmp_61                           : std_logic;
  SIGNAL rd_25_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_62                           : std_logic;
  SIGNAL tmp_63                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_64                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_65                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_66                           : signed(23 DOWNTO 0);  -- sfix24
  SIGNAL tmp_67                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_68                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_69                           : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL rssi_inst                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL tmp_70                           : std_logic;
  SIGNAL tmp_71                           : std_logic;
  SIGNAL tmp_72                           : std_logic;
  SIGNAL tmp_73                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_74                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_75                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_76                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter_1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_77                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p126_tmp                         : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_78                           : std_logic;
  SIGNAL tmp_79                           : std_logic;
  SIGNAL tmp_80                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_81                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_82                           : std_logic;
  SIGNAL tmp_83                           : std_logic;
  SIGNAL tmp_84                           : std_logic;
  SIGNAL tmp_85                           : std_logic;
  SIGNAL tmp_86                           : std_logic;
  SIGNAL tmp_87                           : std_logic;
  SIGNAL tmp_88                           : std_logic;
  SIGNAL tmp_89                           : std_logic;
  SIGNAL tmp_90                           : std_logic;
  SIGNAL tmp_91                           : std_logic;
  SIGNAL rd_26_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_92                           : std_logic;
  SIGNAL tmp_93                           : std_logic;
  SIGNAL tmp_94                           : std_logic;
  SIGNAL tmp_95                           : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_96                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_97                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_98                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_99                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL rssi_sum                         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_100                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_101                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_102                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_103                          : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_104                          : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL rssi_out_1                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL delayMatch_reg                   : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_2                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_105                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p132_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p132_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p132_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p132_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p132_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p132_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL rd_28_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_106                          : std_logic;
  SIGNAL delayMatch_reg_1                 : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_3                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_107                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL delayMatch_reg_2                 : vector_of_unsigned24(0 TO 1);  -- ufix24 [2]
  SIGNAL rssi_out_4                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_108                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_out_5                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_109                          : std_logic;
  SIGNAL tmp_110                          : std_logic;
  SIGNAL tmp_111                          : std_logic;
  SIGNAL tmp_112                          : std_logic;
  SIGNAL tmp_113                          : std_logic;
  SIGNAL rssi_en_out_1                    : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_3                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_2                    : std_logic;  -- ufix1
  SIGNAL tmp_114                          : std_logic;  -- ufix1
  SIGNAL p130_tmp                         : std_logic;  -- ufix1
  SIGNAL rd_27_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_115                          : std_logic;
  SIGNAL delayMatch_reg_4                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_3                    : std_logic;  -- ufix1
  SIGNAL tmp_116                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_5                 : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL rssi_en_out_4                    : std_logic;  -- ufix1
  SIGNAL tmp_117                          : std_logic;  -- ufix1
  SIGNAL rssi_en_out_5                    : std_logic;  -- ufix1
  SIGNAL tmp_118                          : std_logic;
  SIGNAL tmp_119                          : std_logic;
  SIGNAL rd_12_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_120                          : std_logic;
  SIGNAL gain_en_in_1                     : std_logic;  -- ufix1
  SIGNAL tmp_121                          : std_logic;
  SIGNAL rd_19_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_122                          : std_logic;
  SIGNAL tmp_123                          : std_logic;
  SIGNAL tmp_124                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_125                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_126                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p215tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_127                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL ai                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_128                          : std_logic;
  SIGNAL tmp_129                          : std_logic;
  SIGNAL tmp_130                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_131                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_132                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p217tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_133                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL aq                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_134                          : std_logic;
  SIGNAL tmp_135                          : std_logic;
  SIGNAL rd_9_reg                         : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_136                          : std_logic;
  SIGNAL tmp_137                          : std_logic;
  SIGNAL tmp_138                          : std_logic;
  SIGNAL rd_29_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_139                          : std_logic;
  SIGNAL tmp_140                          : std_logic;
  SIGNAL tmp_141                          : std_logic;
  SIGNAL tmp_142                          : std_logic;
  SIGNAL tmp_143                          : std_logic;
  SIGNAL tmp_144                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssiHold                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_145                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p134_tmp                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p134_cast                        : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p134_cast_1                      : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p134_add_cast                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p134_add_temp                    : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p134_cast_2                      : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_146                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_147                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_148                          : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p169tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_149                          : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_150                          : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_151                          : std_logic;
  SIGNAL multiplier_cast_4                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_4            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_152                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_153                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_154                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_155                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_156                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_157                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_5                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_5            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_158                          : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_159                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_160                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_161                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_162                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_163                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_164                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_165                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_166                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_167                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_168                          : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p175tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL tmp_169                          : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_170                          : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL tmp_171                          : std_logic;
  SIGNAL multiplier_cast_6                : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL multiplier_mul_temp_6            : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_172                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_173                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_174                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_175                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_176                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_177                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL multiplier_cast_7                : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL multiplier_mul_temp_7            : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_178                          : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL tmp_179                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_180                          : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_181                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_182                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_183                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_184                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_185                          : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL tmp_186                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_187                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL tmp_188                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL rd_8_reg                         : vector_of_signed49(0 TO 1);  -- sfix49 [2]
  SIGNAL tmp_189                          : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL c                                : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p82c_sub_cast                    : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p82c_sub_cast_1                  : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_190                          : std_logic;
  SIGNAL tmp_191                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_192                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p81tmp_cast                      : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL p81tmp_cast_1                    : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL tmp_193                          : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL rssi_diff                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_high_goal_in_unsigned       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_6_reg                         : vector_of_unsigned24(0 TO 3);  -- ufix24 [4]
  SIGNAL rssi_high_goal_in_1              : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha_relop1                     : std_logic;
  SIGNAL rssi_low_goal_in_unsigned        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rd_5_reg                         : vector_of_unsigned24(0 TO 3);  -- ufix24 [4]
  SIGNAL rssi_low_goal_in_1               : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL alpha_relop1_1                   : std_logic;
  SIGNAL tmp_194                          : std_logic;
  SIGNAL rd_24_reg                        : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL tmp_195                          : std_logic;
  SIGNAL tmp_196                          : std_logic;  -- ufix1
  SIGNAL tmp_197                          : std_logic;  -- ufix1
  SIGNAL tmp_198                          : std_logic;  -- ufix1
  SIGNAL tmp_199                          : std_logic;  -- ufix1
  SIGNAL tmp_200                          : std_logic;  -- ufix1
  SIGNAL tmp_201                          : std_logic;  -- ufix1
  SIGNAL tmp_202                          : std_logic;  -- ufix1
  SIGNAL tmp_203                          : std_logic;  -- ufix1
  SIGNAL tmp_204                          : std_logic;  -- ufix1
  SIGNAL tmp_205                          : std_logic;  -- ufix1
  SIGNAL tmp_206                          : std_logic;  -- ufix1
  SIGNAL tmp_208                          : std_logic;  -- ufix1
  SIGNAL tmp_209                          : std_logic;  -- ufix1
  SIGNAL tmp_210                          : std_logic;  -- ufix1
  SIGNAL tmp_211                          : std_logic;
  SIGNAL tmp_212                          : std_logic;
  SIGNAL tmp_213                          : std_logic;
  SIGNAL tmp_214                          : std_logic;
  SIGNAL alpha_relop1_2                   : std_logic;
  SIGNAL dir_out_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_215                          : std_logic;
  SIGNAL alpha_relop1_3                   : std_logic;
  SIGNAL delayMatch_reg_6                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_2                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_216                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_217                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_17_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_218                          : std_logic;
  SIGNAL rd_11_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_219                          : std_logic;
  SIGNAL delayMatch_reg_7                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_3                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_220                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_221                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_222                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_8                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_4                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_223                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_224                          : std_logic;
  SIGNAL delayMatch_reg_9                 : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_5                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_225                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_22_reg                        : vector_of_unsigned2(0 TO 2);  -- ufix2 [3]
  SIGNAL tmp_226                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL rd_13_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_227                          : std_logic;
  SIGNAL delayMatch_reg_10                : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_6                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_229                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL delayMatch_reg_11                : vector_of_unsigned2(0 TO 1);  -- ufix2 [2]
  SIGNAL dir_out_7                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_230                          : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_out_8                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_231                          : std_logic;
  SIGNAL tmp_232                          : std_logic;  -- ufix1
  SIGNAL tmp_233                          : std_logic;
  SIGNAL tmp_234                          : std_logic;
  SIGNAL tmp_235                          : std_logic;
  SIGNAL tmp_236                          : std_logic;
  SIGNAL alpha_relop1_4                   : std_logic;
  SIGNAL dir_en_out_1                     : std_logic;  -- ufix1
  SIGNAL tmp_237                          : std_logic;
  SIGNAL alpha_relop1_5                   : std_logic;
  SIGNAL delayMatch_reg_12                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_2                     : std_logic;  -- ufix1
  SIGNAL tmp_238                          : std_logic;  -- ufix1
  SIGNAL tmp_239                          : std_logic;  -- ufix1
  SIGNAL rd_18_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_240                          : std_logic;
  SIGNAL rd_10_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_241                          : std_logic;
  SIGNAL delayMatch_reg_13                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_3                     : std_logic;  -- ufix1
  SIGNAL tmp_242                          : std_logic;  -- ufix1
  SIGNAL tmp_243                          : std_logic;  -- ufix1
  SIGNAL tmp_244                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_14                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_4                     : std_logic;  -- ufix1
  SIGNAL tmp_245                          : std_logic;  -- ufix1
  SIGNAL tmp_246                          : std_logic;
  SIGNAL delayMatch_reg_15                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_5                     : std_logic;  -- ufix1
  SIGNAL tmp_247                          : std_logic;  -- ufix1
  SIGNAL rd_23_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_248                          : std_logic;  -- ufix1
  SIGNAL rd_14_reg                        : std_logic_vector(0 TO 2);  -- ufix1 [3]
  SIGNAL tmp_249                          : std_logic;
  SIGNAL delayMatch_reg_16                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_6                     : std_logic;  -- ufix1
  SIGNAL tmp_251                          : std_logic;  -- ufix1
  SIGNAL delayMatch_reg_17                : std_logic_vector(0 TO 1);  -- ufix1 [2]
  SIGNAL dir_en_out_7                     : std_logic;  -- ufix1
  SIGNAL tmp_252                          : std_logic;  -- ufix1
  SIGNAL dir_en_out_8                     : std_logic;  -- ufix1
  SIGNAL d1_1                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL d1_2                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rd_50_reg                        : vector_of_signed12(0 TO 3);  -- sfix12 [4]
  SIGNAL d1_tmp                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_253                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL d2_1                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL d2_2                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rd_51_reg                        : vector_of_signed12(0 TO 2);  -- sfix12 [3]
  SIGNAL d2_tmp                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_254                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL d3_1                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL d3_2                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL out_8_pipe_reg                   : vector_of_signed12(0 TO 1);  -- sfix12 [2]
  SIGNAL d3_tmp                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_255                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d4_1                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d4_2                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d5_1                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d5_2                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_256                          : std_logic;  -- ufix1
  SIGNAL d6_1                             : std_logic;  -- ufix1
  SIGNAL d6_2                             : std_logic;  -- ufix1
  SIGNAL d7_1                             : std_logic;  -- ufix1
  SIGNAL d7_2                             : std_logic;  -- ufix1
  SIGNAL rd_52_reg                        : std_logic_vector(0 TO 3);  -- ufix1 [4]
  SIGNAL d8_1                             : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL d8_2                             : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL d9_1                             : std_logic;  -- ufix1
  SIGNAL d9_2                             : std_logic;  -- ufix1

BEGIN
  i_in_signed <= signed(i_in);

  enb <= ce;

  rd_0_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_in_1 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_in_1 <= i_in_signed;
      END IF;
    END IF;
  END PROCESS rd_0_process;


  rd_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_in_2 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_in_2 <= i_in_1;
      END IF;
    END IF;
  END PROCESS rd_1_process;


  rd_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rx_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rx_en_in_1 <= rx_en_in;
      END IF;
    END IF;
  END PROCESS rd_7_process;


  
  tmp <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_39_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_1 <= tmp;
      END IF;
    END IF;
  END PROCESS rd_39_process;


  
  tmp_2 <= '1' WHEN i_in_1 < 0 ELSE
      '0';

  tmp_3 <= i_in_signed;

  rd_46_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_4 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_4 <= tmp_3;
      END IF;
    END IF;
  END PROCESS rd_46_process;


  alpha_in_unsigned <= unsigned(alpha_in);

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --        Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2      %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  p205alpha_cast <= alpha_in_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p205alpha_cast_1 <= p205alpha_cast srl 12;
  alpha <= p205alpha_cast_1(11 DOWNTO 0);

  rd_45_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      alpha_1 <= to_unsigned(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        alpha_1 <= alpha;
      END IF;
    END IF;
  END PROCESS rd_45_process;


  p189tmp_sub_cast <= resize(alpha_1, 14);
  tmp_5 <= 4096 - p189tmp_sub_cast;

  tmp_6 <= alpha;

  rd_43_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_7 <= to_unsigned(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_7 <= tmp_6;
      END IF;
    END IF;
  END PROCESS rd_43_process;


  p209tmp_1 <=  - (resize(i_in_1, 13));
  tmp_8 <= p209tmp_1(11 DOWNTO 0);

  
  tmp_9 <= tmp_8 WHEN tmp_2 = '1' ELSE
      tmp_4;

  
  tmp_10 <= '1' WHEN tmp_9 < 250 ELSE
      '0';

  multiplier_cast <= signed(resize(tmp_7, 13));
  multiplier_mul_temp <= multiplier_cast * i_in_1;
  tmp_11 <= multiplier_mul_temp(23 DOWNTO 0);

  tmp_12 <= resize(tmp_11 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_55_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_14 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_14 <= tmp_13;
      END IF;
    END IF;
  END PROCESS rd_55_process;


  p182tmp_cast <= resize(tmp_15, 25);
  p182tmp_cast_1 <=  - (p182tmp_cast);
  tmp_16 <= p182tmp_cast_1(23 DOWNTO 0);

  tmp_18 <= tmp_17;

  rd_53_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_19 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_19 <= tmp_18;
      END IF;
    END IF;
  END PROCESS rd_53_process;


  tmp_20 <= tmp_13;

  multiplier_cast_1 <= signed(resize(tmp_5, 15));
  multiplier_mul_temp_1 <= multiplier_cast_1 * tmp_20;
  tmp_21 <= multiplier_mul_temp_1(37 DOWNTO 0);

  tmp_22 <= resize(tmp_21, 39);

  tmp_23 <= tmp_22 + tmp_12;

  tmp_24 <= tmp_23(35 DOWNTO 12);

  
  tmp_17 <= tmp_24 WHEN tmp_10 = '1' ELSE
      tmp_13;

  rd_54_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_15 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_15 <= tmp_17;
      END IF;
    END IF;
  END PROCESS rd_54_process;


  
  tmp_25 <= '1' WHEN tmp_15 < 0 ELSE
      '0';

  
  tmp_26 <= tmp_16 WHEN tmp_25 = '1' ELSE
      tmp_19;

  
  tmp_27 <= '1' WHEN tmp_26 > 204800 ELSE
      '0';

  
  tmp_28 <= to_signed(0, 24) WHEN tmp_27 = '1' ELSE
      tmp_15;

  
  tmp_29 <= tmp_28 WHEN tmp_1 = '1' ELSE
      tmp_14;

  tmp_13 <= tmp_29;

  p152i_out_sub_cast <= resize(i_in_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p152i_out_sub_cast_1 <= resize(tmp_13, 25);
  p152i_out_sub_temp <= p152i_out_sub_cast - p152i_out_sub_cast_1;
  i_out_1 <= p152i_out_sub_temp(23 DOWNTO 12);

  i_out_2 <= i_out_1;

  out_0_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_0_pipe_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        out_0_pipe_reg(0) <= i_out_2;
        out_0_pipe_reg(1) <= out_0_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS out_0_pipe_process;

  i_out_tmp <= out_0_pipe_reg(1);

  i_out <= std_logic_vector(i_out_tmp);

  q_in_signed <= signed(q_in);

  rd_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_in_1 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_in_1 <= q_in_signed;
      END IF;
    END IF;
  END PROCESS rd_2_process;


  rd_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_in_2 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_in_2 <= q_in_1;
      END IF;
    END IF;
  END PROCESS rd_3_process;


  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- DC Correction section
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  
  tmp_30 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_40_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_31 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_31 <= tmp_30;
      END IF;
    END IF;
  END PROCESS rd_40_process;


  
  tmp_32 <= '1' WHEN q_in_1 < 0 ELSE
      '0';

  tmp_33 <= q_in_signed;

  rd_47_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_34 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_34 <= tmp_33;
      END IF;
    END IF;
  END PROCESS rd_47_process;


  p203tmp_sub_cast <= resize(alpha_1, 14);
  tmp_35 <= 4096 - p203tmp_sub_cast;

  tmp_36 <= alpha;

  rd_44_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_37 <= to_unsigned(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_37 <= tmp_36;
      END IF;
    END IF;
  END PROCESS rd_44_process;


  p213tmp_1 <=  - (resize(q_in_1, 13));
  tmp_38 <= p213tmp_1(11 DOWNTO 0);

  
  tmp_39 <= tmp_38 WHEN tmp_32 = '1' ELSE
      tmp_34;

  
  tmp_40 <= '1' WHEN tmp_39 < 250 ELSE
      '0';

  multiplier_cast_2 <= signed(resize(tmp_37, 13));
  multiplier_mul_temp_2 <= multiplier_cast_2 * q_in_1;
  tmp_41 <= multiplier_mul_temp_2(23 DOWNTO 0);

  tmp_42 <= resize(tmp_41 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_58_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_44 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_44 <= tmp_43;
      END IF;
    END IF;
  END PROCESS rd_58_process;


  p196tmp_cast <= resize(tmp_45, 25);
  p196tmp_cast_1 <=  - (p196tmp_cast);
  tmp_46 <= p196tmp_cast_1(23 DOWNTO 0);

  tmp_48 <= tmp_47;

  rd_56_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_49 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_49 <= tmp_48;
      END IF;
    END IF;
  END PROCESS rd_56_process;


  tmp_50 <= tmp_43;

  multiplier_cast_3 <= signed(resize(tmp_35, 15));
  multiplier_mul_temp_3 <= multiplier_cast_3 * tmp_50;
  tmp_51 <= multiplier_mul_temp_3(37 DOWNTO 0);

  tmp_52 <= resize(tmp_51, 39);

  tmp_53 <= tmp_52 + tmp_42;

  tmp_54 <= tmp_53(35 DOWNTO 12);

  
  tmp_47 <= tmp_54 WHEN tmp_40 = '1' ELSE
      tmp_43;

  rd_57_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_45 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_45 <= tmp_47;
      END IF;
    END IF;
  END PROCESS rd_57_process;


  
  tmp_55 <= '1' WHEN tmp_45 < 0 ELSE
      '0';

  
  tmp_56 <= tmp_46 WHEN tmp_55 = '1' ELSE
      tmp_49;

  
  tmp_57 <= '1' WHEN tmp_56 > 204800 ELSE
      '0';

  
  tmp_58 <= to_signed(0, 24) WHEN tmp_57 = '1' ELSE
      tmp_45;

  
  tmp_59 <= tmp_58 WHEN tmp_31 = '1' ELSE
      tmp_44;

  tmp_43 <= tmp_59;

  p151q_out_sub_cast <= resize(q_in_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p151q_out_sub_cast_1 <= resize(tmp_43, 25);
  p151q_out_sub_temp <= p151q_out_sub_cast - p151q_out_sub_cast_1;
  q_out_1 <= p151q_out_sub_temp(23 DOWNTO 12);

  q_out_2 <= q_out_1;

  out_1_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_1_pipe_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        out_1_pipe_reg(0) <= q_out_2;
        out_1_pipe_reg(1) <= out_1_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS out_1_pipe_process;

  q_out_tmp <= out_1_pipe_reg(1);

  q_out <= std_logic_vector(q_out_tmp);

  
  tmp_60 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  
  tmp_61 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_25_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_25_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_25_reg(0) <= tmp_61;
        rd_25_reg(1 TO 2) <= rd_25_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_25_process;

  tmp_62 <= rd_25_reg(2);

  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- 
  -- RSSI Estimation
  -- 
  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  tmp_63 <= i_out_1 * i_out_1;

  tmp_64 <= resize(tmp_63, 25);

  rd_38_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_65 <= to_signed(0, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_65 <= tmp_64;
      END IF;
    END IF;
  END PROCESS rd_38_process;


  tmp_66 <= q_out_1 * q_out_1;

  tmp_67 <= resize(tmp_66, 25);

  rd_37_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_68 <= to_signed(0, 25);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_68 <= tmp_67;
      END IF;
    END IF;
  END PROCESS rd_37_process;


  tmp_69 <= tmp_65 + tmp_68;

  rssi_inst <= unsigned(tmp_69(22 DOWNTO 0));

  
  tmp_70 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_33_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_71 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_71 <= tmp_70;
      END IF;
    END IF;
  END PROCESS rd_33_process;


  
  tmp_72 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  rd_61_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_74 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_74 <= tmp_73;
      END IF;
    END IF;
  END PROCESS rd_61_process;


  rd_62_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_76 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_76 <= tmp_75;
      END IF;
    END IF;
  END PROCESS rd_62_process;


  counter <= tmp_75 + 1;

  rd_59_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counter_1 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        counter_1 <= counter;
      END IF;
    END IF;
  END PROCESS rd_59_process;


  
  p126_tmp <= to_unsigned(0, 9) WHEN counter_1 >= 256 ELSE
      counter_1;
  
  tmp_77 <= to_unsigned(0, 9) WHEN tmp_71 = '1' ELSE
      p126_tmp;

  
  tmp_78 <= '1' WHEN tmp_75 /= 0 ELSE
      '0';

  rd_60_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_79 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_79 <= tmp_78;
      END IF;
    END IF;
  END PROCESS rd_60_process;


  
  tmp_80 <= tmp_77 WHEN tmp_79 = '1' ELSE
      tmp_76;

  
  tmp_81 <= tmp_80 WHEN tmp_62 = '1' ELSE
      tmp_74;

  tmp_73 <= tmp_81;

  
  tmp_82 <= '1' WHEN tmp_73 = 0 ELSE
      '0';

  tmp_83 <= tmp_82 AND tmp_72;

  
  tmp_75 <= to_unsigned(1, 9) WHEN tmp_83 = '1' ELSE
      tmp_73;

  
  tmp_84 <= '1' WHEN tmp_75 /= 0 ELSE
      '0';

  rd_31_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_85 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_85 <= tmp_84;
      END IF;
    END IF;
  END PROCESS rd_31_process;


  
  tmp_86 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_35_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_87 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_87 <= tmp_86;
      END IF;
    END IF;
  END PROCESS rd_35_process;


  
  tmp_88 <= '1' WHEN tmp_73 = 0 ELSE
      '0';

  
  tmp_89 <= '1' WHEN rssi_inst > 5000 ELSE
      '0';

  tmp_90 <= tmp_88 AND tmp_89;

  
  tmp_91 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_26_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_26_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_26_reg(0) <= tmp_91;
        rd_26_reg(1) <= rd_26_reg(0);
      END IF;
    END IF;
  END PROCESS rd_26_process;

  tmp_92 <= rd_26_reg(1);

  
  tmp_93 <= '1' WHEN tmp_75 /= 0 ELSE
      '0';

  
  tmp_94 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  tmp_95 <= resize(rssi_inst, 33);

  
  tmp_98 <= tmp_97 WHEN tmp_94 = '1' ELSE
      tmp_96;

  
  tmp_99 <= tmp_98 WHEN tmp_93 = '1' ELSE
      tmp_97;

  
  tmp_100 <= tmp_99 WHEN tmp_92 = '1' ELSE
      rssi_sum;

  tmp_101 <= tmp_100;

  rssi_sum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_sum <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_sum <= tmp_101;
      END IF;
    END IF;
  END PROCESS rssi_sum_reg_process;


  
  tmp_97 <= to_unsigned(0, 32) WHEN tmp_90 = '1' ELSE
      rssi_sum;

  tmp_102 <= resize(tmp_97, 33);

  tmp_103 <= tmp_102 + tmp_95;

  tmp_96 <= tmp_103(31 DOWNTO 0);

  rd_63_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_104 <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_104 <= tmp_96;
      END IF;
    END IF;
  END PROCESS rd_63_process;


  rssi_out_1 <= to_unsigned(0, 24);

  delayMatch_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg(0) <= rssi_out_1;
        delayMatch_reg(1) <= delayMatch_reg(0);
      END IF;
    END IF;
  END PROCESS delayMatch_process;

  rssi_out_2 <= delayMatch_reg(1);

  p132_cast <= tmp_104 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p132_cast_1 <= p132_cast srl 8;
  p132_add_cast <= resize(p132_cast_1(39 DOWNTO 7), 34);
  p132_add_temp <= p132_add_cast + to_unsigned(1, 34);
  p132_cast_2 <= p132_add_temp(33 DOWNTO 1);
  
  p132_tmp <= p132_cast_2(23 DOWNTO 0) WHEN counter_1 >= 256 ELSE
      rssi_out_2;
  
  tmp_105 <= rssi_out_2 WHEN tmp_87 = '1' ELSE
      p132_tmp;

  rd_28_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_28_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_28_reg(0) <= tmp_60;
        rd_28_reg(1 TO 2) <= rd_28_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_28_process;

  tmp_106 <= rd_28_reg(2);

  delayMatch_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_1 <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_1(0) <= rssi_out_1;
        delayMatch_reg_1(1) <= delayMatch_reg_1(0);
      END IF;
    END IF;
  END PROCESS delayMatch_1_process;

  rssi_out_3 <= delayMatch_reg_1(1);

  
  tmp_107 <= tmp_105 WHEN tmp_85 = '1' ELSE
      rssi_out_3;

  delayMatch_2_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_2 <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_2(0) <= rssi_out_1;
        delayMatch_reg_2(1) <= delayMatch_reg_2(0);
      END IF;
    END IF;
  END PROCESS delayMatch_2_process;

  rssi_out_4 <= delayMatch_reg_2(1);

  
  tmp_108 <= tmp_107 WHEN tmp_106 = '1' ELSE
      rssi_out_4;

  rssi_out_5 <= tmp_108;

  rssi_out <= std_logic_vector(rssi_out_5);

  
  tmp_109 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  
  tmp_110 <= '1' WHEN tmp_75 /= 0 ELSE
      '0';

  rd_30_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_111 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_111 <= tmp_110;
      END IF;
    END IF;
  END PROCESS rd_30_process;


  
  tmp_112 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_34_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_113 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_113 <= tmp_112;
      END IF;
    END IF;
  END PROCESS rd_34_process;


  rssi_en_out_1 <= '0';

  delayMatch_3_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_3 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_3(0) <= rssi_en_out_1;
        delayMatch_reg_3(1) <= delayMatch_reg_3(0);
      END IF;
    END IF;
  END PROCESS delayMatch_3_process;

  rssi_en_out_2 <= delayMatch_reg_3(1);

  
  p130_tmp <= '1' WHEN counter_1 >= 256 ELSE
      rssi_en_out_2;
  
  tmp_114 <= rssi_en_out_2 WHEN tmp_113 = '1' ELSE
      p130_tmp;

  rd_27_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_27_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_27_reg(0) <= tmp_109;
        rd_27_reg(1 TO 2) <= rd_27_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_27_process;

  tmp_115 <= rd_27_reg(2);

  delayMatch_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_4 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_4(0) <= rssi_en_out_1;
        delayMatch_reg_4(1) <= delayMatch_reg_4(0);
      END IF;
    END IF;
  END PROCESS delayMatch_4_process;

  rssi_en_out_3 <= delayMatch_reg_4(1);

  
  tmp_116 <= tmp_114 WHEN tmp_111 = '1' ELSE
      rssi_en_out_3;

  delayMatch_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_5 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_5(0) <= rssi_en_out_1;
        delayMatch_reg_5(1) <= delayMatch_reg_5(0);
      END IF;
    END IF;
  END PROCESS delayMatch_5_process;

  rssi_en_out_4 <= delayMatch_reg_5(1);

  
  tmp_117 <= tmp_116 WHEN tmp_115 = '1' ELSE
      rssi_en_out_4;

  rssi_en_out_5 <= tmp_117;

  rssi_en_out <= rssi_en_out_5;

  
  tmp_118 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  
  tmp_119 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_12_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_12_reg(0) <= tmp_119;
        rd_12_reg(1 TO 2) <= rd_12_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_12_process;

  tmp_120 <= rd_12_reg(2);

  rd_4_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      gain_en_in_1 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        gain_en_in_1 <= gain_en_in;
      END IF;
    END IF;
  END PROCESS rd_4_process;


  
  tmp_121 <= '1' WHEN gain_en_in_1 = '0' ELSE
      '0';

  rd_19_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_19_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_19_reg(0) <= tmp_121;
        rd_19_reg(1 TO 2) <= rd_19_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_19_process;

  tmp_122 <= rd_19_reg(2);

  -- dir_out = 0 - do nothing
  -- dir_out = 1 - increase
  -- dir_out = 2 - decrease
  
  tmp_123 <= '1' WHEN i_in_1 < 0 ELSE
      '0';

  tmp_124 <= i_in_signed;

  rd_48_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_125 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_125 <= tmp_124;
      END IF;
    END IF;
  END PROCESS rd_48_process;


  p215tmp_1 <=  - (resize(i_in_1, 13));
  tmp_126 <= p215tmp_1(11 DOWNTO 0);

  
  tmp_127 <= tmp_126 WHEN tmp_123 = '1' ELSE
      tmp_125;

  ai <= unsigned(tmp_127(10 DOWNTO 0));

  
  tmp_128 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_129 <= '1' WHEN q_in_1 < 0 ELSE
      '0';

  tmp_130 <= q_in_signed;

  rd_49_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_131 <= to_signed(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_131 <= tmp_130;
      END IF;
    END IF;
  END PROCESS rd_49_process;


  --spssa
  -- see if the MCU has done something and if so reset
  -- decrease
  -- this overrides anything else
  -- we're saturating the ADC so decrease gain
  --too high - decrease
  --too low - increase
  -- wait for some action and the processor is done
  p217tmp_1 <=  - (resize(q_in_1, 13));
  tmp_132 <= p217tmp_1(11 DOWNTO 0);

  
  tmp_133 <= tmp_132 WHEN tmp_129 = '1' ELSE
      tmp_131;

  aq <= unsigned(tmp_133(10 DOWNTO 0));

  
  tmp_134 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_135 <= tmp_128 OR tmp_134;

  rd_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_9_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_9_reg(0) <= tmp_135;
        rd_9_reg(1 TO 2) <= rd_9_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_9_process;

  tmp_136 <= rd_9_reg(2);

  
  tmp_137 <= '1' WHEN tmp_117 = '1' ELSE
      '0';

  
  tmp_138 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  rd_29_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_29_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_29_reg(0) <= tmp_138;
        rd_29_reg(1 TO 2) <= rd_29_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_29_process;

  tmp_139 <= rd_29_reg(2);

  
  tmp_140 <= '1' WHEN tmp_75 /= 0 ELSE
      '0';

  rd_32_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_141 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_141 <= tmp_140;
      END IF;
    END IF;
  END PROCESS rd_32_process;


  
  tmp_142 <= '1' WHEN rssi_inst < 5000 ELSE
      '0';

  rd_36_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_143 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_143 <= tmp_142;
      END IF;
    END IF;
  END PROCESS rd_36_process;


  rssiHold_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssiHold <= to_unsigned(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssiHold <= tmp_144;
      END IF;
    END IF;
  END PROCESS rssiHold_reg_process;


  p134_cast <= tmp_104 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p134_cast_1 <= p134_cast srl 8;
  p134_add_cast <= resize(p134_cast_1(39 DOWNTO 7), 34);
  p134_add_temp <= p134_add_cast + to_unsigned(1, 34);
  p134_cast_2 <= p134_add_temp(33 DOWNTO 1);
  
  p134_tmp <= p134_cast_2(23 DOWNTO 0) WHEN counter_1 >= 256 ELSE
      rssiHold;
  
  tmp_145 <= rssiHold WHEN tmp_143 = '1' ELSE
      p134_tmp;

  
  tmp_146 <= tmp_145 WHEN tmp_141 = '1' ELSE
      rssiHold;

  
  tmp_147 <= tmp_146 WHEN tmp_139 = '1' ELSE
      rssiHold;

  tmp_144 <= tmp_147;

  p169tmp_sub_cast <= resize(alpha_1, 14);
  tmp_148 <= 4096 - p169tmp_sub_cast;

  tmp_149 <= alpha;

  rd_41_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_150 <= to_unsigned(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_150 <= tmp_149;
      END IF;
    END IF;
  END PROCESS rd_41_process;


  
  tmp_151 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  multiplier_cast_4 <= signed(resize(tmp_150, 13));
  multiplier_mul_temp_4 <= multiplier_cast_4 * i_in_1;
  tmp_152 <= multiplier_mul_temp_4(23 DOWNTO 0);

  tmp_153 <= resize(tmp_152 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_65_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_155 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_155 <= tmp_154;
      END IF;
    END IF;
  END PROCESS rd_65_process;


  tmp_156 <= tmp_154;

  rd_64_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_157 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_157 <= tmp_156;
      END IF;
    END IF;
  END PROCESS rd_64_process;


  multiplier_cast_5 <= signed(resize(tmp_148, 15));
  multiplier_mul_temp_5 <= multiplier_cast_5 * tmp_157;
  tmp_158 <= multiplier_mul_temp_5(37 DOWNTO 0);

  tmp_159 <= resize(tmp_158, 39);

  tmp_160 <= tmp_159 + tmp_153;

  tmp_161 <= tmp_160(35 DOWNTO 12);

  
  tmp_162 <= tmp_161 WHEN tmp_151 = '1' ELSE
      tmp_155;

  tmp_154 <= tmp_162;

  tmp_163 <= tmp_154;

  tmp_164 <= tmp_154;

  tmp_165 <= tmp_163 * tmp_164;

  tmp_166 <= resize(tmp_165, 49);

  rd_21_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_167 <= to_signed(0, 49);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_167 <= tmp_166;
      END IF;
    END IF;
  END PROCESS rd_21_process;


  p175tmp_sub_cast <= resize(alpha_1, 14);
  tmp_168 <= 4096 - p175tmp_sub_cast;

  tmp_169 <= alpha;

  rd_42_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_170 <= to_unsigned(0, 12);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_170 <= tmp_169;
      END IF;
    END IF;
  END PROCESS rd_42_process;


  
  tmp_171 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  multiplier_cast_6 <= signed(resize(tmp_170, 13));
  multiplier_mul_temp_6 <= multiplier_cast_6 * q_in_1;
  tmp_172 <= multiplier_mul_temp_6(23 DOWNTO 0);

  tmp_173 <= resize(tmp_172 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);

  rd_67_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_175 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_175 <= tmp_174;
      END IF;
    END IF;
  END PROCESS rd_67_process;


  tmp_176 <= tmp_174;

  rd_66_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_177 <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_177 <= tmp_176;
      END IF;
    END IF;
  END PROCESS rd_66_process;


  multiplier_cast_7 <= signed(resize(tmp_168, 15));
  multiplier_mul_temp_7 <= multiplier_cast_7 * tmp_177;
  tmp_178 <= multiplier_mul_temp_7(37 DOWNTO 0);

  tmp_179 <= resize(tmp_178, 39);

  tmp_180 <= tmp_179 + tmp_173;

  tmp_181 <= tmp_180(35 DOWNTO 12);

  
  tmp_182 <= tmp_181 WHEN tmp_171 = '1' ELSE
      tmp_175;

  tmp_174 <= tmp_182;

  tmp_183 <= tmp_174;

  tmp_184 <= tmp_174;

  tmp_185 <= tmp_183 * tmp_184;

  tmp_186 <= resize(tmp_185, 49);

  rd_20_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_187 <= to_signed(0, 49);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_187 <= tmp_186;
      END IF;
    END IF;
  END PROCESS rd_20_process;


  tmp_188 <= tmp_167 + tmp_187;

  rd_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_8_reg <= (OTHERS => to_signed(0, 49));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_8_reg(0) <= tmp_188;
        rd_8_reg(1) <= rd_8_reg(0);
      END IF;
    END IF;
  END PROCESS rd_8_process;

  tmp_189 <= rd_8_reg(1);

  -- only increase power if the rssi is away from the mean
  p82c_sub_cast <= signed(resize(tmp_144 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 50));
  p82c_sub_cast_1 <= resize(tmp_189, 50);
  c <= p82c_sub_cast - p82c_sub_cast_1;

  
  tmp_190 <= '1' WHEN c < to_signed(0, 50) ELSE
      '0';

  tmp_191 <= c;

  p81tmp_cast <= resize(c, 51);
  p81tmp_cast_1 <=  - (p81tmp_cast);
  tmp_192 <= p81tmp_cast_1(49 DOWNTO 0);

  
  tmp_193 <= tmp_192 WHEN tmp_190 = '1' ELSE
      tmp_191;

  rssi_diff <= unsigned(tmp_193(47 DOWNTO 24));

  rssi_high_goal_in_unsigned <= unsigned(rssi_high_goal_in);

  rd_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_6_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_6_reg(0) <= rssi_high_goal_in_unsigned;
        rd_6_reg(1 TO 3) <= rd_6_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_6_process;

  rssi_high_goal_in_1 <= rd_6_reg(3);

  
  alpha_relop1 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  rssi_low_goal_in_unsigned <= unsigned(rssi_low_goal_in);

  rd_5_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_5_reg <= (OTHERS => to_unsigned(0, 24));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_5_reg(0) <= rssi_low_goal_in_unsigned;
        rd_5_reg(1 TO 3) <= rd_5_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_5_process;

  rssi_low_goal_in_1 <= rd_5_reg(3);

  
  alpha_relop1_1 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  
  tmp_194 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  rd_24_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_24_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_24_reg(0) <= tmp_194;
        rd_24_reg(1) <= rd_24_reg(0);
      END IF;
    END IF;
  END PROCESS rd_24_process;

  tmp_195 <= rd_24_reg(1);

  
  tmp_197 <= '0' WHEN tmp_195 = '1' ELSE
      tmp_196;

  rd_68_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_198 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_198 <= tmp_197;
      END IF;
    END IF;
  END PROCESS rd_68_process;


  rd_70_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_199 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_199 <= tmp_196;
      END IF;
    END IF;
  END PROCESS rd_70_process;


  
  tmp_200 <= '1' WHEN alpha_relop1_1 = '1' ELSE
      tmp_199;

  
  tmp_201 <= '1' WHEN alpha_relop1 = '1' ELSE
      tmp_200;

  
  tmp_202 <= tmp_201 WHEN tmp_137 = '1' ELSE
      tmp_199;

  
  tmp_203 <= '1' WHEN tmp_136 = '1' ELSE
      tmp_202;

  
  tmp_204 <= tmp_203 WHEN tmp_122 = '1' ELSE
      tmp_199;

  tmp_205 <= tmp_196;

  rd_69_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_206 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_206 <= tmp_205;
      END IF;
    END IF;
  END PROCESS rd_69_process;


  p44_output : PROCESS (tmp_206, tmp_204, tmp_198)
    VARIABLE tmp207 : std_logic;
  BEGIN

    CASE tmp_206 IS
      WHEN '0' =>
        tmp207 := tmp_204;
      WHEN '1' =>
        tmp207 := tmp_198;
      WHEN OTHERS => 
        tmp207 := '0';
    END CASE;

    tmp_208 <= tmp207;
  END PROCESS p44_output;


  
  tmp_209 <= tmp_208 WHEN tmp_120 = '1' ELSE
      tmp_199;

  tmp_196 <= tmp_209;

  tmp_210 <= tmp_196;

  
  tmp_211 <= '1' WHEN gain_en_in_1 = '0' ELSE
      '0';

  
  tmp_212 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_213 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_214 <= tmp_212 OR tmp_213;

  
  alpha_relop1_2 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- Gain Correction
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  dir_out_1 <= to_unsigned(0, 2);

  
  tmp_215 <= '1' WHEN tmp_117 = '1' ELSE
      '0';

  
  alpha_relop1_3 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  delayMatch_6_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_6 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_6(0) <= dir_out_1;
        delayMatch_reg_6(1) <= delayMatch_reg_6(0);
      END IF;
    END IF;
  END PROCESS delayMatch_6_process;

  dir_out_2 <= delayMatch_reg_6(1);

  
  tmp_216 <= to_unsigned(1, 2) WHEN alpha_relop1_2 = '1' ELSE
      dir_out_2;

  
  tmp_217 <= to_unsigned(2, 2) WHEN alpha_relop1_3 = '1' ELSE
      tmp_216;

  rd_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_17_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_17_reg(0) <= tmp_211;
        rd_17_reg(1 TO 2) <= rd_17_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_17_process;

  tmp_218 <= rd_17_reg(2);

  rd_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_11_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_11_reg(0) <= tmp_214;
        rd_11_reg(1 TO 2) <= rd_11_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_11_process;

  tmp_219 <= rd_11_reg(2);

  delayMatch_7_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_7 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_7(0) <= dir_out_1;
        delayMatch_reg_7(1) <= delayMatch_reg_7(0);
      END IF;
    END IF;
  END PROCESS delayMatch_7_process;

  dir_out_3 <= delayMatch_reg_7(1);

  
  tmp_220 <= tmp_217 WHEN tmp_215 = '1' ELSE
      dir_out_3;

  
  tmp_221 <= to_unsigned(2, 2) WHEN tmp_219 = '1' ELSE
      tmp_220;

  rd_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_222 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_222 <= tmp_210;
      END IF;
    END IF;
  END PROCESS rd_15_process;


  delayMatch_8_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_8 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_8(0) <= dir_out_1;
        delayMatch_reg_8(1) <= delayMatch_reg_8(0);
      END IF;
    END IF;
  END PROCESS delayMatch_8_process;

  dir_out_4 <= delayMatch_reg_8(1);

  
  tmp_223 <= tmp_221 WHEN tmp_218 = '1' ELSE
      dir_out_4;

  
  tmp_224 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  delayMatch_9_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_9 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_9(0) <= dir_out_1;
        delayMatch_reg_9(1) <= delayMatch_reg_9(0);
      END IF;
    END IF;
  END PROCESS delayMatch_9_process;

  dir_out_5 <= delayMatch_reg_9(1);

  
  tmp_225 <= to_unsigned(0, 2) WHEN tmp_224 = '1' ELSE
      dir_out_5;

  rd_22_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_22_reg <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_22_reg(0) <= tmp_225;
        rd_22_reg(1 TO 2) <= rd_22_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_22_process;

  tmp_226 <= rd_22_reg(2);

  rd_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_13_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_13_reg(0) <= tmp_118;
        rd_13_reg(1 TO 2) <= rd_13_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_13_process;

  tmp_227 <= rd_13_reg(2);

  delayMatch_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_10 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_10(0) <= dir_out_1;
        delayMatch_reg_10(1) <= delayMatch_reg_10(0);
      END IF;
    END IF;
  END PROCESS delayMatch_10_process;

  dir_out_6 <= delayMatch_reg_10(1);

  p46_output : PROCESS (tmp_222, tmp_223, tmp_226, dir_out_6)
    VARIABLE tmp228 : unsigned(1 DOWNTO 0);
  BEGIN

    CASE tmp_222 IS
      WHEN '0' =>
        tmp228 := tmp_223;
      WHEN '1' =>
        tmp228 := tmp_226;
      WHEN OTHERS => 
        tmp228 := dir_out_6;
    END CASE;

    tmp_229 <= tmp228;
  END PROCESS p46_output;


  delayMatch_11_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_11 <= (OTHERS => to_unsigned(0, 2));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_11(0) <= dir_out_1;
        delayMatch_reg_11(1) <= delayMatch_reg_11(0);
      END IF;
    END IF;
  END PROCESS delayMatch_11_process;

  dir_out_7 <= delayMatch_reg_11(1);

  
  tmp_230 <= tmp_229 WHEN tmp_227 = '1' ELSE
      dir_out_7;

  dir_out_8 <= tmp_230;

  dir_out <= std_logic_vector(dir_out_8);

  
  tmp_231 <= '1' WHEN rx_en_in_1 = '1' ELSE
      '0';

  tmp_232 <= tmp_196;

  
  tmp_233 <= '1' WHEN gain_en_in_1 = '0' ELSE
      '0';

  
  tmp_234 <= '1' WHEN ai > 1500 ELSE
      '0';

  
  tmp_235 <= '1' WHEN aq > 1500 ELSE
      '0';

  tmp_236 <= tmp_234 OR tmp_235;

  
  alpha_relop1_4 <= '1' WHEN rssi_diff < rssi_low_goal_in_1 ELSE
      '0';

  dir_en_out_1 <= '0';

  
  tmp_237 <= '1' WHEN tmp_117 = '1' ELSE
      '0';

  
  alpha_relop1_5 <= '1' WHEN rssi_diff > rssi_high_goal_in_1 ELSE
      '0';

  delayMatch_12_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_12 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_12(0) <= dir_en_out_1;
        delayMatch_reg_12(1) <= delayMatch_reg_12(0);
      END IF;
    END IF;
  END PROCESS delayMatch_12_process;

  dir_en_out_2 <= delayMatch_reg_12(1);

  
  tmp_238 <= '1' WHEN alpha_relop1_4 = '1' ELSE
      dir_en_out_2;

  
  tmp_239 <= '1' WHEN alpha_relop1_5 = '1' ELSE
      tmp_238;

  rd_18_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_18_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_18_reg(0) <= tmp_233;
        rd_18_reg(1 TO 2) <= rd_18_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_18_process;

  tmp_240 <= rd_18_reg(2);

  rd_10_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_10_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_10_reg(0) <= tmp_236;
        rd_10_reg(1 TO 2) <= rd_10_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_10_process;

  tmp_241 <= rd_10_reg(2);

  delayMatch_13_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_13 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_13(0) <= dir_en_out_1;
        delayMatch_reg_13(1) <= delayMatch_reg_13(0);
      END IF;
    END IF;
  END PROCESS delayMatch_13_process;

  dir_en_out_3 <= delayMatch_reg_13(1);

  
  tmp_242 <= tmp_239 WHEN tmp_237 = '1' ELSE
      dir_en_out_3;

  
  tmp_243 <= '1' WHEN tmp_241 = '1' ELSE
      tmp_242;

  rd_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      tmp_244 <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        tmp_244 <= tmp_232;
      END IF;
    END IF;
  END PROCESS rd_16_process;


  delayMatch_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_14 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_14(0) <= dir_en_out_1;
        delayMatch_reg_14(1) <= delayMatch_reg_14(0);
      END IF;
    END IF;
  END PROCESS delayMatch_14_process;

  dir_en_out_4 <= delayMatch_reg_14(1);

  
  tmp_245 <= tmp_243 WHEN tmp_240 = '1' ELSE
      dir_en_out_4;

  
  tmp_246 <= '1' WHEN gain_en_in_1 = '1' ELSE
      '0';

  delayMatch_15_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_15 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_15(0) <= dir_en_out_1;
        delayMatch_reg_15(1) <= delayMatch_reg_15(0);
      END IF;
    END IF;
  END PROCESS delayMatch_15_process;

  dir_en_out_5 <= delayMatch_reg_15(1);

  
  tmp_247 <= '1' WHEN tmp_246 = '1' ELSE
      dir_en_out_5;

  rd_23_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_23_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_23_reg(0) <= tmp_247;
        rd_23_reg(1 TO 2) <= rd_23_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_23_process;

  tmp_248 <= rd_23_reg(2);

  rd_14_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_14_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_14_reg(0) <= tmp_231;
        rd_14_reg(1 TO 2) <= rd_14_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_14_process;

  tmp_249 <= rd_14_reg(2);

  delayMatch_16_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_16 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_16(0) <= dir_en_out_1;
        delayMatch_reg_16(1) <= delayMatch_reg_16(0);
      END IF;
    END IF;
  END PROCESS delayMatch_16_process;

  dir_en_out_6 <= delayMatch_reg_16(1);

  p48_output : PROCESS (tmp_244, tmp_245, tmp_248, dir_en_out_6)
    VARIABLE tmp250 : std_logic;
  BEGIN

    CASE tmp_244 IS
      WHEN '0' =>
        tmp250 := tmp_245;
      WHEN '1' =>
        tmp250 := tmp_248;
      WHEN OTHERS => 
        tmp250 := dir_en_out_6;
    END CASE;

    tmp_251 <= tmp250;
  END PROCESS p48_output;


  delayMatch_17_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      delayMatch_reg_17 <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        delayMatch_reg_17(0) <= dir_en_out_1;
        delayMatch_reg_17(1) <= delayMatch_reg_17(0);
      END IF;
    END IF;
  END PROCESS delayMatch_17_process;

  dir_en_out_7 <= delayMatch_reg_17(1);

  
  tmp_252 <= tmp_251 WHEN tmp_249 = '1' ELSE
      dir_en_out_7;

  dir_en_out_8 <= tmp_252;

  dir_en_out <= dir_en_out_8;

  d1_1 <= i_in_signed;

  d1_2 <= d1_1;

  rd_50_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_50_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_50_reg(0) <= d1_2;
        rd_50_reg(1 TO 3) <= rd_50_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_50_process;

  d1_tmp <= rd_50_reg(3);

  d1 <= std_logic_vector(d1_tmp);

  tmp_253 <= tmp_154;

  d2_1 <= tmp_253(23 DOWNTO 12);

  d2_2 <= d2_1;

  rd_51_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_51_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_51_reg(0) <= d2_2;
        rd_51_reg(1 TO 2) <= rd_51_reg(0 TO 1);
      END IF;
    END IF;
  END PROCESS rd_51_process;

  d2_tmp <= rd_51_reg(2);

  d2 <= std_logic_vector(d2_tmp);

  tmp_254 <= tmp_13;

  d3_1 <= tmp_254(23 DOWNTO 12);

  d3_2 <= d3_1;

  out_8_pipe_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      out_8_pipe_reg <= (OTHERS => to_signed(0, 12));
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        out_8_pipe_reg(0) <= d3_2;
        out_8_pipe_reg(1) <= out_8_pipe_reg(0);
      END IF;
    END IF;
  END PROCESS out_8_pipe_process;

  d3_tmp <= out_8_pipe_reg(1);

  d3 <= std_logic_vector(d3_tmp);

  tmp_255 <= tmp_144;

  d4_1 <= tmp_255;

  d4_2 <= d4_1;

  d4 <= std_logic_vector(d4_2);

  d5_1 <= rssi_diff;

  d5_2 <= d5_1;

  d5 <= std_logic_vector(d5_2);

  tmp_256 <= tmp_196;

  d6_1 <= tmp_256;

  d6_2 <= d6_1;

  d6 <= d6_2;

  d7_1 <= gain_en_in;

  d7_2 <= d7_1;

  rd_52_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rd_52_reg <= (OTHERS => '0');
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rd_52_reg(0) <= d7_2;
        rd_52_reg(1 TO 3) <= rd_52_reg(0 TO 2);
      END IF;
    END IF;
  END PROCESS rd_52_process;

  d7 <= rd_52_reg(3);

  d8_1 <= tmp_230;

  d8_2 <= d8_1;

  d8 <= std_logic_vector(d8_2);

  d9_1 <= tmp_252;

  d9_2 <= d9_1;

  d9 <= d9_2;

  ce_out <= ce;

END rtl;

