-- -------------------------------------------------------------
-- 
-- File Name: C:\GIT\Chilipepper\Labs\Lab_4\MATLAB\codegen\dc_offset_correction\hdlsrc\dc_offset_correction_FixPt.vhd
-- Created: 2013-05-03 15:29:16
-- 
-- Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2
-- 
-- 
-- 
-- -------------------------------------------------------------
-- Rate and Clocking Details
-- -------------------------------------------------------------
-- Design base rate: 1
-- 
-- 
-- Clock Enable  Sample Time
-- -------------------------------------------------------------
-- ce_out        1
-- -------------------------------------------------------------
-- 
-- 
-- Output Signal                 Clock Enable  Sample Time
-- -------------------------------------------------------------
-- i_out                         ce_out        1
-- q_out                         ce_out        1
-- rssi_out                      ce_out        1
-- rssi_en_out                   ce_out        1
-- dir_out                       ce_out        1
-- dir_en_out                    ce_out        1
-- d1                            ce_out        1
-- d2                            ce_out        1
-- d3                            ce_out        1
-- d4                            ce_out        1
-- d5                            ce_out        1
-- d6                            ce_out        1
-- d7                            ce_out        1
-- d8                            ce_out        1
-- d9                            ce_out        1
-- -------------------------------------------------------------
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: dc_offset_correction_FixPt
-- Source Path: dc_offset_correction_FixPt
-- Hierarchy Level: 0
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;

ENTITY dc_offset_correction_FixPt IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        ce                                :   IN    std_logic;
        i_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_in                              :   IN    std_logic_vector(11 DOWNTO 0);  -- sfix12
        alpha_in                          :   IN    std_logic_vector(11 DOWNTO 0);  -- ufix12
        gain_en_in                        :   IN    std_logic;  -- ufix1
        rssi_low_goal_in                  :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_high_goal_in                 :   IN    std_logic_vector(23 DOWNTO 0);  -- ufix24
        rx_en_in                          :   IN    std_logic;
        ce_out                            :   OUT   std_logic;
        i_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        q_out                             :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        rssi_out                          :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        rssi_en_out                       :   OUT   std_logic;  -- ufix1
        dir_out                           :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        dir_en_out                        :   OUT   std_logic;  -- ufix1
        d1                                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        d2                                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        d3                                :   OUT   std_logic_vector(11 DOWNTO 0);  -- sfix12
        d4                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d5                                :   OUT   std_logic_vector(23 DOWNTO 0);  -- ufix24
        d6                                :   OUT   std_logic;  -- ufix1
        d7                                :   OUT   std_logic;  -- ufix1
        d8                                :   OUT   std_logic_vector(1 DOWNTO 0);  -- ufix2
        d9                                :   OUT   std_logic  -- ufix1
        );
END dc_offset_correction_FixPt;


ARCHITECTURE rtl OF dc_offset_correction_FixPt IS

  -- Signals
  SIGNAL enb                              : std_logic;
  SIGNAL i_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL alpha_in_unsigned                : unsigned(11 DOWNTO 0);  -- ufix12
  SIGNAL alpha                            : unsigned(11 DOWNTO 0);  -- ufix12_En12
  SIGNAL p107alpha_cast                   : unsigned(23 DOWNTO 0);  -- ufix24_En12
  SIGNAL p107alpha_cast_1                 : unsigned(23 DOWNTO 0);  -- ufix24_En12
  SIGNAL tmp                              : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL i_mean                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_1                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_2                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p103tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p103tmp_sub_temp                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p103tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p103tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p103tmp_add_cast                 : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL p103tmp_add_cast_1               : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p103tmp_cast_1                   : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL p103tmp_mul_temp_1               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p103tmp_add_cast_2               : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p103tmp_add_cast_3               : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p103tmp_add_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_3                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_4                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_5                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p90tmp_cast                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p90tmp_cast_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_6                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_in_signed                      : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_7                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_mean                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_8                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_9                            : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p104tmp_sub_cast                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p104tmp_sub_temp                 : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p104tmp_cast                     : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p104tmp_mul_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p104tmp_add_cast                 : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL p104tmp_add_cast_1               : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p104tmp_cast_1                   : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL p104tmp_mul_temp_1               : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p104tmp_add_cast_2               : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p104tmp_add_cast_3               : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p104tmp_add_temp                 : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_10                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_11                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_12                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p88tmp_cast                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p88tmp_cast_1                    : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL tmp_13                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL noise_offset                     : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_14                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_15                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL noise_inc                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_16                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p99_tmp                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p99_tmp_1                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p99_tmp_2                        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p99_tmp_3                        : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p99_cast                         : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p99_cast_1                       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p99_add_temp                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p99_cast_2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p99_cast_3                       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p99_cast_4                       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p99_add_temp_1                   : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p99_cast_5                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_17                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_18                           : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL tmp_19                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL noise_dec                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_20                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL p100_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p100_tmp_1                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL p100_tmp_2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p100_tmp_3                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL p100_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p100_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p100_add_temp                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p100_cast_2                      : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p100_cast_3                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p100_cast_4                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p100_add_temp_1                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p100_cast_5                      : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_21                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_22                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL tmp_23                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL p77_sub_temp                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p77_cast                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_24                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_25                           : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p102_tmp                         : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p102_tmp_1                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p102_tmp_2                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL p102_tmp_3                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p102_tmp_4                       : unsigned(3 DOWNTO 0);  -- ufix4
  SIGNAL p102_tmp_5                       : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL p102_tmp_6                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p102_tmp_7                       : unsigned(7 DOWNTO 0);  -- ufix8
  SIGNAL p102_cast                        : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p102_cast_1                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p102_add_temp                    : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p102_cast_2                      : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p102_cast_3                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p102_cast_4                      : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p102_add_temp_1                  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p102_cast_5                      : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL tmp_26                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL i_dc                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL i_dc_1                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p105i_dc_sub_cast                : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p105i_dc_sub_temp                : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p105i_dc_cast                    : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p105i_dc_mul_temp                : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p105i_dc_add_cast                : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL p105i_dc_add_cast_1              : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p105i_dc_cast_1                  : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL p105i_dc_mul_temp_1              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p105i_dc_add_cast_2              : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p105i_dc_add_cast_3              : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p105i_dc_add_temp                : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_27                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p96_tmp                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p96_tmp_1                        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p96_cast                         : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p96_cast_1                       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p96_add_temp                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p96_cast_2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL i_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p86i_out_sub_cast                : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p86i_out_sub_cast_1              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p86i_out_sub_temp                : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL i_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_28                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_dc                             : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_dc_1                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p106q_dc_sub_cast                : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p106q_dc_sub_temp                : unsigned(13 DOWNTO 0);  -- ufix14_En12
  SIGNAL p106q_dc_cast                    : signed(14 DOWNTO 0);  -- sfix15_En12
  SIGNAL p106q_dc_mul_temp                : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p106q_dc_add_cast                : signed(37 DOWNTO 0);  -- sfix38_En24
  SIGNAL p106q_dc_add_cast_1              : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p106q_dc_cast_1                  : signed(12 DOWNTO 0);  -- sfix13_En12
  SIGNAL p106q_dc_mul_temp_1              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p106q_dc_add_cast_2              : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p106q_dc_add_cast_3              : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL p106q_dc_add_temp                : signed(38 DOWNTO 0);  -- sfix39_En24
  SIGNAL tmp_29                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p98_tmp                          : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p98_tmp_1                        : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL p98_cast                         : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p98_cast_1                       : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p98_add_temp                     : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p98_cast_2                       : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL q_out_1                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p85q_out_sub_cast                : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p85q_out_sub_cast_1              : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL p85q_out_sub_temp                : signed(24 DOWNTO 0);  -- sfix25_En12
  SIGNAL q_out_2                          : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL rssi_inst                        : unsigned(22 DOWNTO 0);  -- ufix23
  SIGNAL p75rssi_inst_add_temp            : signed(24 DOWNTO 0);  -- sfix25
  SIGNAL tmp_30                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_31                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL p62_tmp                          : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_32                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL counter_1                        : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_33                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_34                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_35                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_36                           : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL tmp_37                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_38                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_39                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_40                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL rssi_sum                         : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_41                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL tmp_42                           : unsigned(31 DOWNTO 0);  -- ufix32
  SIGNAL rssi_out_1                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_43                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p65_tmp                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p65_cast                         : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p65_cast_1                       : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p65_add_cast                     : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p65_add_temp                     : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p65_cast_2                       : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_44                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_45                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_out_2                       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_en_out_1                    : std_logic;  -- ufix1
  SIGNAL tmp_46                           : std_logic;  -- ufix1
  SIGNAL p64_tmp                          : std_logic;  -- ufix1
  SIGNAL tmp_47                           : std_logic;  -- ufix1
  SIGNAL tmp_48                           : std_logic;  -- ufix1
  SIGNAL rssi_en_out_2                    : std_logic;  -- ufix1
  SIGNAL tmp_49                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_50                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p112tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_51                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL ai                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_52                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_53                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL p114tmp_1                        : signed(12 DOWNTO 0);  -- sfix13
  SIGNAL tmp_54                           : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL aq                               : unsigned(10 DOWNTO 0);  -- ufix11
  SIGNAL tmp_55                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssiHold                         : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_56                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p66_tmp                          : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL p66_cast                         : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p66_cast_1                       : unsigned(39 DOWNTO 0);  -- ufix40_En8
  SIGNAL p66_add_cast                     : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p66_add_temp                     : unsigned(33 DOWNTO 0);  -- ufix34_En1
  SIGNAL p66_cast_2                       : unsigned(32 DOWNTO 0);  -- ufix33
  SIGNAL tmp_57                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_58                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL c                                : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p39c_sub_cast                    : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p39c_mul_temp                    : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL p39c_add_cast                    : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL p39c_mul_temp_1                  : signed(47 DOWNTO 0);  -- sfix48_En24
  SIGNAL p39c_add_cast_1                  : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL p39c_add_temp                    : signed(48 DOWNTO 0);  -- sfix49_En24
  SIGNAL p39c_sub_cast_1                  : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_59                           : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL tmp_60                           : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL p38tmp_cast                      : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL p38tmp_cast_1                    : signed(50 DOWNTO 0);  -- sfix51_En24
  SIGNAL tmp_61                           : signed(49 DOWNTO 0);  -- sfix50_En24
  SIGNAL rssi_diff                        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_high_goal_in_unsigned       : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL rssi_low_goal_in_unsigned        : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL dir_state                        : std_logic;  -- ufix1
  SIGNAL tmp_62                           : std_logic;  -- ufix1
  SIGNAL tmp_63                           : std_logic;  -- ufix1
  SIGNAL tmp_64                           : std_logic;  -- ufix1
  SIGNAL tmp_65                           : std_logic;  -- ufix1
  SIGNAL tmp_66                           : std_logic;  -- ufix1
  SIGNAL tmp_67                           : std_logic;  -- ufix1
  SIGNAL tmp_68                           : std_logic;  -- ufix1
  SIGNAL tmp_70                           : std_logic;  -- ufix1
  SIGNAL tmp_71                           : std_logic;  -- ufix1
  SIGNAL tmp_72                           : std_logic;  -- ufix1
  SIGNAL tmp_73                           : std_logic;  -- ufix1
  SIGNAL dir_out_1                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_74                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_75                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_76                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_77                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_78                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_79                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_81                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_82                           : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL dir_out_2                        : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL tmp_83                           : std_logic;  -- ufix1
  SIGNAL dir_en_out_1                     : std_logic;  -- ufix1
  SIGNAL tmp_84                           : std_logic;  -- ufix1
  SIGNAL tmp_85                           : std_logic;  -- ufix1
  SIGNAL tmp_86                           : std_logic;  -- ufix1
  SIGNAL tmp_87                           : std_logic;  -- ufix1
  SIGNAL tmp_88                           : std_logic;  -- ufix1
  SIGNAL tmp_89                           : std_logic;  -- ufix1
  SIGNAL tmp_91                           : std_logic;  -- ufix1
  SIGNAL tmp_92                           : std_logic;  -- ufix1
  SIGNAL dir_en_out_2                     : std_logic;  -- ufix1
  SIGNAL d1_1                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL d1_2                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_93                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL d2_1                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL d2_2                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_94                           : signed(23 DOWNTO 0);  -- sfix24_En12
  SIGNAL d3_1                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL d3_2                             : signed(11 DOWNTO 0);  -- sfix12
  SIGNAL tmp_95                           : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d4_1                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d4_2                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d5_1                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL d5_2                             : unsigned(23 DOWNTO 0);  -- ufix24
  SIGNAL tmp_96                           : std_logic;  -- ufix1
  SIGNAL d6_1                             : std_logic;  -- ufix1
  SIGNAL d6_2                             : std_logic;  -- ufix1
  SIGNAL d7_1                             : std_logic;  -- ufix1
  SIGNAL d7_2                             : std_logic;  -- ufix1
  SIGNAL d8_1                             : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL d8_2                             : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL d9_1                             : std_logic;  -- ufix1
  SIGNAL d9_2                             : std_logic;  -- ufix1

BEGIN
  i_in_signed <= signed(i_in);

  alpha_in_unsigned <= unsigned(alpha_in);

  --update the q dc offset
  --update the i dc offset
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  --                                                                          %
  --        Generated by MATLAB 8.1, MATLAB Coder 2.4 and HDL Coder 3.2      %
  --                                                                          %
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  p107alpha_cast <= alpha_in_unsigned & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p107alpha_cast_1 <= p107alpha_cast srl 12;
  alpha <= p107alpha_cast_1(11 DOWNTO 0);

  enb <= ce;

  
  tmp_1 <= tmp WHEN rx_en_in = '1' ELSE
      i_mean;

  tmp_2 <= tmp_1;

  i_mean_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_mean <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_mean <= tmp_2;
      END IF;
    END IF;
  END PROCESS i_mean_reg_process;


  p103tmp_sub_cast <= resize(alpha, 14);
  p103tmp_sub_temp <= 4096 - p103tmp_sub_cast;
  p103tmp_cast <= signed(resize(p103tmp_sub_temp, 15));
  p103tmp_mul_temp <= p103tmp_cast * i_mean;
  p103tmp_add_cast <= p103tmp_mul_temp(37 DOWNTO 0);
  p103tmp_add_cast_1 <= resize(p103tmp_add_cast, 39);
  p103tmp_cast_1 <= signed(resize(alpha, 13));
  p103tmp_mul_temp_1 <= p103tmp_cast_1 * i_in_signed;
  p103tmp_add_cast_2 <= p103tmp_mul_temp_1(23 DOWNTO 0);
  p103tmp_add_cast_3 <= resize(p103tmp_add_cast_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
  p103tmp_add_temp <= p103tmp_add_cast_1 + p103tmp_add_cast_3;
  tmp <= p103tmp_add_temp(35 DOWNTO 12);

  tmp_3 <= tmp_2;

  tmp_4 <= tmp_2;

  p90tmp_cast <= resize(tmp_2, 25);
  p90tmp_cast_1 <=  - (p90tmp_cast);
  tmp_5 <= p90tmp_cast_1(23 DOWNTO 0);

  
  tmp_6 <= tmp_5 WHEN tmp_3 < 0 ELSE
      tmp_4;

  q_in_signed <= signed(q_in);

  
  tmp_8 <= tmp_7 WHEN rx_en_in = '1' ELSE
      q_mean;

  tmp_9 <= tmp_8;

  q_mean_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_mean <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_mean <= tmp_9;
      END IF;
    END IF;
  END PROCESS q_mean_reg_process;


  p104tmp_sub_cast <= resize(alpha, 14);
  p104tmp_sub_temp <= 4096 - p104tmp_sub_cast;
  p104tmp_cast <= signed(resize(p104tmp_sub_temp, 15));
  p104tmp_mul_temp <= p104tmp_cast * q_mean;
  p104tmp_add_cast <= p104tmp_mul_temp(37 DOWNTO 0);
  p104tmp_add_cast_1 <= resize(p104tmp_add_cast, 39);
  p104tmp_cast_1 <= signed(resize(alpha, 13));
  p104tmp_mul_temp_1 <= p104tmp_cast_1 * q_in_signed;
  p104tmp_add_cast_2 <= p104tmp_mul_temp_1(23 DOWNTO 0);
  p104tmp_add_cast_3 <= resize(p104tmp_add_cast_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
  p104tmp_add_temp <= p104tmp_add_cast_1 + p104tmp_add_cast_3;
  tmp_7 <= p104tmp_add_temp(35 DOWNTO 12);

  --correct false positive/nagatives
  tmp_10 <= tmp_2;

  tmp_11 <= tmp_2;

  p88tmp_cast <= resize(tmp_2, 25);
  p88tmp_cast_1 <=  - (p88tmp_cast);
  tmp_12 <= p88tmp_cast_1(23 DOWNTO 0);

  
  tmp_13 <= tmp_12 WHEN tmp_10 < 0 ELSE
      tmp_11;

  --dc offset threshold is higher than needed
  tmp_14 <= noise_offset + 10;

  p99_cast <= resize(tmp, 25);
  p99_cast_1 <=  - (p99_cast);
  
  p99_tmp <= p99_cast_1(23 DOWNTO 0) WHEN tmp < 0 ELSE
      tmp;
  p99_add_temp <= 50 + resize(noise_offset, 9);
  p99_cast_2 <= signed(resize(p99_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  p99_tmp_1 <= tmp_15 WHEN p99_tmp > p99_cast_2 ELSE
      noise_inc;
  p99_cast_3 <= resize(tmp_7, 25);
  p99_cast_4 <=  - (p99_cast_3);
  
  p99_tmp_2 <= p99_cast_4(23 DOWNTO 0) WHEN tmp_7 < 0 ELSE
      tmp_7;
  p99_add_temp_1 <= 50 + resize(noise_offset, 9);
  p99_cast_5 <= signed(resize(p99_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  p99_tmp_3 <= p99_tmp_1 + 1 WHEN p99_tmp_2 > p99_cast_5 ELSE
      p99_tmp_1;
  
  tmp_16 <= to_unsigned(0, 4) WHEN (rx_en_in = '1') AND (p99_tmp_3 > 10) ELSE
      p99_tmp_3 WHEN rx_en_in = '1' ELSE
      noise_inc;

  
  tmp_17 <= to_unsigned(0, 4) WHEN tmp_13 < 204800 ELSE
      tmp_16;

  tmp_18 <= tmp_17;

  noise_inc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_inc <= to_unsigned(0, 4);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_inc <= tmp_18;
      END IF;
    END IF;
  END PROCESS noise_inc_reg_process;


  --there is a high dc_offset value that needs to be corrected
  -- too much noise, raise cieling.
  tmp_15 <= noise_inc + 1;

  p100_cast <= resize(tmp, 25);
  p100_cast_1 <=  - (p100_cast);
  
  p100_tmp <= p100_cast_1(23 DOWNTO 0) WHEN tmp < 0 ELSE
      tmp;
  p100_add_temp <= 50 + resize(noise_offset, 9);
  p100_cast_2 <= signed(resize(p100_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  p100_tmp_1 <= noise_dec WHEN p100_tmp > p100_cast_2 ELSE
      tmp_19;
  p100_cast_3 <= resize(tmp_7, 25);
  p100_cast_4 <=  - (p100_cast_3);
  
  p100_tmp_2 <= p100_cast_4(23 DOWNTO 0) WHEN tmp_7 < 0 ELSE
      tmp_7;
  p100_add_temp_1 <= 50 + resize(noise_offset, 9);
  p100_cast_5 <= signed(resize(p100_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  p100_tmp_3 <= p100_tmp_1 WHEN p100_tmp_2 > p100_cast_5 ELSE
      p100_tmp_1 + 1;
  
  tmp_20 <= to_unsigned(0, 2) WHEN (rx_en_in = '1') AND (resize(p100_tmp_3, 17) > 98304) ELSE
      p100_tmp_3 WHEN rx_en_in = '1' ELSE
      noise_dec;

  tmp_22 <= tmp_21;

  p77_sub_temp <= resize(tmp_22, 9) - 10;
  p77_cast <= signed(resize(p77_sub_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  tmp_23 <= to_unsigned(0, 2) WHEN tmp_6 > p77_cast ELSE
      tmp_20;

  tmp_24 <= tmp_23;

  noise_dec_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_dec <= to_unsigned(0, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_dec <= tmp_24;
      END IF;
    END IF;
  END PROCESS noise_dec_reg_process;


  -- too much noise, raise cieling.
  tmp_19 <= noise_dec + 1;

  p102_cast <= resize(tmp, 25);
  p102_cast_1 <=  - (p102_cast);
  
  p102_tmp <= p102_cast_1(23 DOWNTO 0) WHEN tmp < 0 ELSE
      tmp;
  p102_add_temp <= 50 + resize(noise_offset, 9);
  p102_cast_2 <= signed(resize(p102_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  p102_tmp_2 <= noise_dec WHEN p102_tmp > p102_cast_2 ELSE
      tmp_19;
  
  p102_tmp_1 <= tmp_15 WHEN p102_tmp > p102_cast_2 ELSE
      noise_inc;
  p102_cast_3 <= resize(tmp_7, 25);
  p102_cast_4 <=  - (p102_cast_3);
  
  p102_tmp_3 <= p102_cast_4(23 DOWNTO 0) WHEN tmp_7 < 0 ELSE
      tmp_7;
  p102_add_temp_1 <= 50 + resize(noise_offset, 9);
  p102_cast_5 <= signed(resize(p102_add_temp_1 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  p102_tmp_5 <= p102_tmp_2 WHEN p102_tmp_3 > p102_cast_5 ELSE
      p102_tmp_2 + 1;
  
  p102_tmp_4 <= p102_tmp_1 + 1 WHEN p102_tmp_3 > p102_cast_5 ELSE
      p102_tmp_1;
  
  p102_tmp_6 <= tmp_14 WHEN p102_tmp_4 > 10 ELSE
      noise_offset;
  
  p102_tmp_7 <= p102_tmp_6 - 10 WHEN resize(p102_tmp_5, 17) > 98304 ELSE
      p102_tmp_6;
  
  tmp_25 <= p102_tmp_7 WHEN rx_en_in = '1' ELSE
      noise_offset;

  tmp_21 <= tmp_25;

  noise_offset_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      noise_offset <= to_unsigned(0, 8);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        noise_offset <= tmp_21;
      END IF;
    END IF;
  END PROCESS noise_offset_reg_process;


  -- %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  i_dc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      i_dc <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        i_dc <= tmp_26;
      END IF;
    END IF;
  END PROCESS i_dc_reg_process;


  p105i_dc_sub_cast <= resize(alpha, 14);
  p105i_dc_sub_temp <= 4096 - p105i_dc_sub_cast;
  p105i_dc_cast <= signed(resize(p105i_dc_sub_temp, 15));
  p105i_dc_mul_temp <= p105i_dc_cast * i_dc;
  p105i_dc_add_cast <= p105i_dc_mul_temp(37 DOWNTO 0);
  p105i_dc_add_cast_1 <= resize(p105i_dc_add_cast, 39);
  p105i_dc_cast_1 <= signed(resize(alpha, 13));
  p105i_dc_mul_temp_1 <= p105i_dc_cast_1 * i_in_signed;
  p105i_dc_add_cast_2 <= p105i_dc_mul_temp_1(23 DOWNTO 0);
  p105i_dc_add_cast_3 <= resize(p105i_dc_add_cast_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
  p105i_dc_add_temp <= p105i_dc_add_cast_1 + p105i_dc_add_cast_3;
  i_dc_1 <= p105i_dc_add_temp(35 DOWNTO 12);

  p96_cast <= resize(tmp, 25);
  p96_cast_1 <=  - (p96_cast);
  
  p96_tmp <= p96_cast_1(23 DOWNTO 0) WHEN tmp < 0 ELSE
      tmp;
  p96_add_temp <= 50 + resize(noise_offset, 9);
  p96_cast_2 <= signed(resize(p96_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  p96_tmp_1 <= to_signed(0, 24) WHEN p96_tmp > p96_cast_2 ELSE
      i_dc_1;
  
  tmp_27 <= p96_tmp_1 WHEN rx_en_in = '1' ELSE
      i_dc;

  tmp_26 <= tmp_27;

  p86i_out_sub_cast <= resize(i_in_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p86i_out_sub_cast_1 <= resize(tmp_26, 25);
  p86i_out_sub_temp <= p86i_out_sub_cast - p86i_out_sub_cast_1;
  i_out_1 <= p86i_out_sub_temp(23 DOWNTO 12);

  i_out_2 <= i_out_1;

  i_out <= std_logic_vector(i_out_2);

  q_dc_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      q_dc <= to_signed(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        q_dc <= tmp_28;
      END IF;
    END IF;
  END PROCESS q_dc_reg_process;


  p106q_dc_sub_cast <= resize(alpha, 14);
  p106q_dc_sub_temp <= 4096 - p106q_dc_sub_cast;
  p106q_dc_cast <= signed(resize(p106q_dc_sub_temp, 15));
  p106q_dc_mul_temp <= p106q_dc_cast * q_dc;
  p106q_dc_add_cast <= p106q_dc_mul_temp(37 DOWNTO 0);
  p106q_dc_add_cast_1 <= resize(p106q_dc_add_cast, 39);
  p106q_dc_cast_1 <= signed(resize(alpha, 13));
  p106q_dc_mul_temp_1 <= p106q_dc_cast_1 * q_in_signed;
  p106q_dc_add_cast_2 <= p106q_dc_mul_temp_1(23 DOWNTO 0);
  p106q_dc_add_cast_3 <= resize(p106q_dc_add_cast_2 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 39);
  p106q_dc_add_temp <= p106q_dc_add_cast_1 + p106q_dc_add_cast_3;
  q_dc_1 <= p106q_dc_add_temp(35 DOWNTO 12);

  p98_cast <= resize(tmp_7, 25);
  p98_cast_1 <=  - (p98_cast);
  
  p98_tmp <= p98_cast_1(23 DOWNTO 0) WHEN tmp_7 < 0 ELSE
      tmp_7;
  p98_add_temp <= 50 + resize(noise_offset, 9);
  p98_cast_2 <= signed(resize(p98_add_temp & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 24));
  
  p98_tmp_1 <= to_signed(0, 24) WHEN p98_tmp > p98_cast_2 ELSE
      q_dc_1;
  
  tmp_29 <= p98_tmp_1 WHEN rx_en_in = '1' ELSE
      q_dc;

  tmp_28 <= tmp_29;

  p85q_out_sub_cast <= resize(q_in_signed & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 25);
  p85q_out_sub_cast_1 <= resize(tmp_28, 25);
  p85q_out_sub_temp <= p85q_out_sub_cast - p85q_out_sub_cast_1;
  q_out_1 <= p85q_out_sub_temp(23 DOWNTO 12);

  q_out_2 <= q_out_1;

  q_out <= std_logic_vector(q_out_2);

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- RSSI Estimation
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  p75rssi_inst_add_temp <= resize(i_out_1 * i_out_1, 25) + resize(q_out_1 * q_out_1, 25);
  rssi_inst <= unsigned(p75rssi_inst_add_temp(22 DOWNTO 0));

  counter <= tmp_30 + 1;

  
  p62_tmp <= to_unsigned(0, 9) WHEN counter >= 256 ELSE
      counter;
  
  tmp_31 <= to_unsigned(0, 9) WHEN rssi_inst < 5000 ELSE
      p62_tmp;

  
  tmp_32 <= tmp_31 WHEN tmp_30 /= 0 ELSE
      to_unsigned(0, 9);

  
  tmp_33 <= tmp_32 WHEN rx_en_in = '1' ELSE
      counter_1;

  tmp_34 <= tmp_33;

  counter_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      counter_1 <= to_unsigned(0, 9);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        counter_1 <= tmp_34;
      END IF;
    END IF;
  END PROCESS counter_reg_process;


  tmp_35 <= counter_1;

  
  tmp_30 <= to_unsigned(1, 9) WHEN (tmp_35 = 0) AND (rssi_inst > 5000) ELSE
      counter_1;

  tmp_36 <= counter_1;

  
  tmp_39 <= tmp_38 WHEN rssi_inst < 5000 ELSE
      tmp_37;

  
  tmp_40 <= tmp_39 WHEN tmp_30 /= 0 ELSE
      tmp_38;

  
  tmp_41 <= tmp_40 WHEN rx_en_in = '1' ELSE
      rssi_sum;

  tmp_42 <= tmp_41;

  rssi_sum_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssi_sum <= to_unsigned(0, 32);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssi_sum <= tmp_42;
      END IF;
    END IF;
  END PROCESS rssi_sum_reg_process;


  
  tmp_38 <= to_unsigned(0, 32) WHEN (tmp_36 = 0) AND (rssi_inst > 5000) ELSE
      rssi_sum;

  tmp_37 <= resize(resize(tmp_38, 33) + resize(rssi_inst, 33), 32);

  rssi_out_1 <= to_unsigned(0, 24);

  p65_cast <= tmp_37 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p65_cast_1 <= p65_cast srl 8;
  p65_add_cast <= resize(p65_cast_1(39 DOWNTO 7), 34);
  p65_add_temp <= p65_add_cast + to_unsigned(1, 34);
  p65_cast_2 <= p65_add_temp(33 DOWNTO 1);
  
  p65_tmp <= p65_cast_2(23 DOWNTO 0) WHEN counter >= 256 ELSE
      rssi_out_1;
  
  tmp_43 <= rssi_out_1 WHEN rssi_inst < 5000 ELSE
      p65_tmp;

  
  tmp_44 <= tmp_43 WHEN tmp_30 /= 0 ELSE
      rssi_out_1;

  
  tmp_45 <= tmp_44 WHEN rx_en_in = '1' ELSE
      rssi_out_1;

  rssi_out_2 <= tmp_45;

  rssi_out <= std_logic_vector(rssi_out_2);

  rssi_en_out_1 <= '0';

  
  p64_tmp <= '1' WHEN counter >= 256 ELSE
      rssi_en_out_1;
  
  tmp_46 <= rssi_en_out_1 WHEN rssi_inst < 5000 ELSE
      p64_tmp;

  
  tmp_47 <= tmp_46 WHEN tmp_30 /= 0 ELSE
      rssi_en_out_1;

  
  tmp_48 <= tmp_47 WHEN rx_en_in = '1' ELSE
      rssi_en_out_1;

  rssi_en_out_2 <= tmp_48;

  rssi_en_out <= rssi_en_out_2;

  tmp_49 <= i_in_signed;

  p112tmp_1 <=  - (resize(i_in_signed, 13));
  tmp_50 <= p112tmp_1(11 DOWNTO 0);

  
  tmp_51 <= tmp_50 WHEN i_in_signed < 0 ELSE
      tmp_49;

  ai <= unsigned(tmp_51(10 DOWNTO 0));

  tmp_52 <= q_in_signed;

  --spssa
  -- see if the MCU has done something and if so reset
  -- decrease
  -- this overrides anything else
  -- we're saturating the ADC so decrease gain
  --too high - decrease
  --too low - increase
  -- wait for some action and the processor is done
  p114tmp_1 <=  - (resize(q_in_signed, 13));
  tmp_53 <= p114tmp_1(11 DOWNTO 0);

  
  tmp_54 <= tmp_53 WHEN q_in_signed < 0 ELSE
      tmp_52;

  aq <= unsigned(tmp_54(10 DOWNTO 0));

  rssiHold_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      rssiHold <= to_unsigned(0, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        rssiHold <= tmp_55;
      END IF;
    END IF;
  END PROCESS rssiHold_reg_process;


  p66_cast <= tmp_37 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0';
  p66_cast_1 <= p66_cast srl 8;
  p66_add_cast <= resize(p66_cast_1(39 DOWNTO 7), 34);
  p66_add_temp <= p66_add_cast + to_unsigned(1, 34);
  p66_cast_2 <= p66_add_temp(33 DOWNTO 1);
  
  p66_tmp <= p66_cast_2(23 DOWNTO 0) WHEN counter >= 256 ELSE
      rssiHold;
  
  tmp_56 <= rssiHold WHEN rssi_inst < 5000 ELSE
      p66_tmp;

  
  tmp_57 <= tmp_56 WHEN tmp_30 /= 0 ELSE
      rssiHold;

  
  tmp_58 <= tmp_57 WHEN rx_en_in = '1' ELSE
      rssiHold;

  tmp_55 <= tmp_58;

  -- only increase power if the rssi is away from the mean
  p39c_sub_cast <= signed(resize(tmp_55 & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0' & '0', 50));
  p39c_mul_temp <= tmp_2 * tmp_2;
  p39c_add_cast <= resize(p39c_mul_temp, 49);
  p39c_mul_temp_1 <= tmp_9 * tmp_9;
  p39c_add_cast_1 <= resize(p39c_mul_temp_1, 49);
  p39c_add_temp <= p39c_add_cast + p39c_add_cast_1;
  p39c_sub_cast_1 <= resize(p39c_add_temp, 50);
  c <= p39c_sub_cast - p39c_sub_cast_1;

  tmp_59 <= c;

  p38tmp_cast <= resize(c, 51);
  p38tmp_cast_1 <=  - (p38tmp_cast);
  tmp_60 <= p38tmp_cast_1(49 DOWNTO 0);

  
  tmp_61 <= tmp_60 WHEN c < to_signed(0, 50) ELSE
      tmp_59;

  rssi_diff <= unsigned(tmp_61(47 DOWNTO 24));

  rssi_high_goal_in_unsigned <= unsigned(rssi_high_goal_in);

  rssi_low_goal_in_unsigned <= unsigned(rssi_low_goal_in);

  
  tmp_62 <= '0' WHEN gain_en_in = '1' ELSE
      dir_state;

  
  tmp_63 <= '1' WHEN rssi_diff < rssi_low_goal_in_unsigned ELSE
      dir_state;

  
  tmp_64 <= '1' WHEN rssi_diff > rssi_high_goal_in_unsigned ELSE
      tmp_63;

  
  tmp_65 <= tmp_64 WHEN tmp_48 = '1' ELSE
      dir_state;

  
  tmp_66 <= '1' WHEN (ai > 1500) OR (aq > 1500) ELSE
      tmp_65;

  
  tmp_67 <= tmp_66 WHEN gain_en_in = '0' ELSE
      dir_state;

  tmp_68 <= dir_state;

  p14_output : PROCESS (tmp_68, tmp_67, tmp_62)
    VARIABLE tmp69 : std_logic;
  BEGIN

    CASE tmp_68 IS
      WHEN '0' =>
        tmp69 := tmp_67;
      WHEN '1' =>
        tmp69 := tmp_62;
      WHEN OTHERS => 
        tmp69 := '0';
    END CASE;

    tmp_70 <= tmp69;
  END PROCESS p14_output;


  
  tmp_71 <= tmp_70 WHEN rx_en_in = '1' ELSE
      dir_state;

  tmp_72 <= tmp_71;

  dir_state_reg_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      dir_state <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        dir_state <= tmp_72;
      END IF;
    END IF;
  END PROCESS dir_state_reg_process;


  tmp_73 <= dir_state;

  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  -- Gain Correction
  --%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
  dir_out_1 <= to_unsigned(0, 2);

  
  tmp_74 <= to_unsigned(1, 2) WHEN rssi_diff < rssi_low_goal_in_unsigned ELSE
      dir_out_1;

  
  tmp_75 <= to_unsigned(2, 2) WHEN rssi_diff > rssi_high_goal_in_unsigned ELSE
      tmp_74;

  
  tmp_76 <= tmp_75 WHEN tmp_48 = '1' ELSE
      dir_out_1;

  
  tmp_77 <= to_unsigned(2, 2) WHEN (ai > 1500) OR (aq > 1500) ELSE
      tmp_76;

  
  tmp_78 <= tmp_77 WHEN gain_en_in = '0' ELSE
      dir_out_1;

  
  tmp_79 <= to_unsigned(0, 2) WHEN gain_en_in = '1' ELSE
      dir_out_1;

  p16_output : PROCESS (tmp_73, tmp_78, tmp_79, dir_out_1)
    VARIABLE tmp80 : unsigned(1 DOWNTO 0);
  BEGIN

    CASE tmp_73 IS
      WHEN '0' =>
        tmp80 := tmp_78;
      WHEN '1' =>
        tmp80 := tmp_79;
      WHEN OTHERS => 
        tmp80 := dir_out_1;
    END CASE;

    tmp_81 <= tmp80;
  END PROCESS p16_output;


  
  tmp_82 <= tmp_81 WHEN rx_en_in = '1' ELSE
      dir_out_1;

  dir_out_2 <= tmp_82;

  dir_out <= std_logic_vector(dir_out_2);

  tmp_83 <= dir_state;

  dir_en_out_1 <= '0';

  
  tmp_84 <= '1' WHEN rssi_diff < rssi_low_goal_in_unsigned ELSE
      dir_en_out_1;

  
  tmp_85 <= '1' WHEN rssi_diff > rssi_high_goal_in_unsigned ELSE
      tmp_84;

  
  tmp_86 <= tmp_85 WHEN tmp_48 = '1' ELSE
      dir_en_out_1;

  
  tmp_87 <= '1' WHEN (ai > 1500) OR (aq > 1500) ELSE
      tmp_86;

  
  tmp_88 <= tmp_87 WHEN gain_en_in = '0' ELSE
      dir_en_out_1;

  
  tmp_89 <= '1' WHEN gain_en_in = '1' ELSE
      dir_en_out_1;

  p18_output : PROCESS (tmp_83, tmp_88, tmp_89, dir_en_out_1)
    VARIABLE tmp90 : std_logic;
  BEGIN

    CASE tmp_83 IS
      WHEN '0' =>
        tmp90 := tmp_88;
      WHEN '1' =>
        tmp90 := tmp_89;
      WHEN OTHERS => 
        tmp90 := dir_en_out_1;
    END CASE;

    tmp_91 <= tmp90;
  END PROCESS p18_output;


  
  tmp_92 <= tmp_91 WHEN rx_en_in = '1' ELSE
      dir_en_out_1;

  dir_en_out_2 <= tmp_92;

  dir_en_out <= dir_en_out_2;

  d1_1 <= i_in_signed;

  d1_2 <= d1_1;

  d1 <= std_logic_vector(d1_2);

  tmp_93 <= tmp_2;

  d2_1 <= tmp_93(23 DOWNTO 12);

  d2_2 <= d2_1;

  d2 <= std_logic_vector(d2_2);

  tmp_94 <= tmp_26;

  d3_1 <= tmp_94(23 DOWNTO 12);

  d3_2 <= d3_1;

  d3 <= std_logic_vector(d3_2);

  tmp_95 <= tmp_55;

  d4_1 <= tmp_95;

  d4_2 <= d4_1;

  d4 <= std_logic_vector(d4_2);

  d5_1 <= rssi_diff;

  d5_2 <= d5_1;

  d5 <= std_logic_vector(d5_2);

  tmp_96 <= tmp_72;

  d6_1 <= tmp_96;

  d6_2 <= d6_1;

  d6 <= d6_2;

  d7_1 <= gain_en_in;

  d7_2 <= d7_1;

  d7 <= d7_2;

  d8_1 <= tmp_82;

  d8_2 <= d8_1;

  d8 <= std_logic_vector(d8_2);

  d9_1 <= tmp_92;

  d9_2 <= d9_1;

  d9 <= d9_2;

  ce_out <= ce;

END rtl;

